*** /home/njh/src/clamav-devel/./libclamav/blob.c	2006-12-22 08:13:46.000000000 +0000
--- ./libclamav/blob.c	2006-12-22 08:11:40.000000000 +0000
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 16,22 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
*** /home/njh/src/clamav-devel/./libclamav/message.c	2006-12-27 16:21:42.000000000 +0000
--- ./libclamav/message.c	2006-12-13 13:20:52.000000000 +0000
***************
*** 677,685 ****
  messageSetEncoding(message *m, const char *enctype)
  {
  	const struct encoding_map *e;
! 	int i;
  	char *type;
- 
  	assert(m != NULL);
  	assert(enctype != NULL);
  
--- 677,684 ----
  messageSetEncoding(message *m, const char *enctype)
  {
  	const struct encoding_map *e;
! 	int i = 0;
  	char *type;
  	assert(m != NULL);
  	assert(enctype != NULL);
  
***************
*** 2534,2542 ****
  	unsigned int score = 0;
  	size_t common, total;
  	size_t len1, len2;
  	char *rs1 = NULL, *rs2 = NULL;
  	char *s1, *s2;
- 	char ls1[MAX_PATTERN_SIZ], ls2[MAX_PATTERN_SIZ];
  
  	if(strcasecmp(str1, str2) == 0)
  		return 100;
--- 2533,2541 ----
  	unsigned int score = 0;
  	size_t common, total;
  	size_t len1, len2;
+ 	char ls1[MAX_PATTERN_SIZ], ls2[MAX_PATTERN_SIZ];
  	char *rs1 = NULL, *rs2 = NULL;
  	char *s1, *s2;
  
  	if(strcasecmp(str1, str2) == 0)
  		return 100;
***************
*** 2596,2602 ****
  static unsigned int
  compare(char *ls1, char **rs1, char *ls2, char **rs2)
  {
! 	unsigned int common, maxchars = 0;
  	bool some_similarity = FALSE;
  	char *s1, *s2;
  	char *maxs1 = NULL, *maxs2 = NULL, *maxe1 = NULL, *maxe2 = NULL;
--- 2595,2601 ----
  static unsigned int
  compare(char *ls1, char **rs1, char *ls2, char **rs2)
  {
! 	unsigned int common, diff, maxchars = 0;
  	bool some_similarity = FALSE;
  	char *s1, *s2;
  	char *maxs1 = NULL, *maxs2 = NULL, *maxe1 = NULL, *maxe2 = NULL;
***************
*** 2628,2634 ****
  					while(tolower(*s1) == tolower(*s2));
  
  					if(common > maxchars) {
! 						unsigned int diff = common - maxchars;
  						maxchars = common;
  						maxs1 = cs1;
  						maxs2 = cs2;
--- 2627,2633 ----
  					while(tolower(*s1) == tolower(*s2));
  
  					if(common > maxchars) {
! 						diff = common - maxchars;
  						maxchars = common;
  						maxs1 = cs1;
  						maxs2 = cs2;
*** /home/njh/src/clamav-devel/./libclamav/mbox.c	2006-12-27 23:20:11.000000000 +0000
--- ./libclamav/mbox.c	2006-12-27 15:52:30.000000000 +0000
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $";
  
  #ifdef	_MSC_VER
  #include <winsock.h>	/* only needed in CL_EXPERIMENTAL */
--- 16,22 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $";
  
  #ifdef	_MSC_VER
  #include <winsock.h>	/* only needed in CL_EXPERIMENTAL */
***************
*** 110,122 ****
  #endif
  #endif
  
- typedef	enum {
- 	FAIL,
- 	OK,
- 	OK_ATTACHMENTS_NOT_SAVED,
- 	VIRUS
- } mbox_status;
- 
  #ifndef isblank
  #define isblank(c)	(((c) == ' ') || ((c) == '\t'))
  #endif
--- 110,115 ----
***************
*** 278,284 ****
  static	message	*parseEmailFile(FILE *fin, const table_t *rfc821Table, const char *firstLine, const char *dir);
  static	message	*parseEmailHeaders(message *m, const table_t *rfc821Table);
  static	int	parseEmailHeader(message *m, const char *line, const table_t *rfc821Table);
! static	mbox_status	parseEmailBody(message *messageIn, text *textIn, mbox_ctx *mctx, unsigned int recursion_level);
  static	int	boundaryStart(const char *line, const char *boundary);
  static	int	endOfMessage(const char *line, const char *boundary);
  static	int	initialiseTables(table_t **rfc821Table, table_t **subtypeTable);
--- 271,277 ----
  static	message	*parseEmailFile(FILE *fin, const table_t *rfc821Table, const char *firstLine, const char *dir);
  static	message	*parseEmailHeaders(message *m, const table_t *rfc821Table);
  static	int	parseEmailHeader(message *m, const char *line, const table_t *rfc821Table);
! static	int	parseEmailBody(message *messageIn, text *textIn, mbox_ctx *mctx, unsigned int recursion_level);
  static	int	boundaryStart(const char *line, const char *boundary);
  static	int	endOfMessage(const char *line, const char *boundary);
  static	int	initialiseTables(table_t **rfc821Table, table_t **subtypeTable);
***************
*** 296,311 ****
  static	bool	isBounceStart(const char *line);
  static	bool	exportBinhexMessage(const char *dir, message *m);
  static	int	exportBounceMessage(text *start, const mbox_ctx *ctx);
! static	message	*do_multipart(message *mainMessage, message **messages, int i, mbox_status *rc, mbox_ctx *mctx, message *messageIn, text **tptr, unsigned int recursion_level);
  static	int	count_quotes(const char *buf);
  static	bool	next_is_folded_header(const text *t);
  
! static	void	checkURLs(message *m, mbox_ctx *mctx, mbox_status *rc, int is_html);
  
  #ifdef CL_EXPERIMENTAL
! static	void	do_checkURLs(message *m, const char *dir, tag_arguments_t *hrefs);
! static	blob	*getHrefs(message *m, tag_arguments_t *hrefs);
! static	void	hrefs_done(blob *b, tag_arguments_t *hrefs);
  #endif
  
  #if	defined(FOLLOWURLS) && (FOLLOWURLS > 0)
--- 289,304 ----
  static	bool	isBounceStart(const char *line);
  static	bool	exportBinhexMessage(const char *dir, message *m);
  static	int	exportBounceMessage(text *start, const mbox_ctx *ctx);
! static	message	*do_multipart(message *mainMessage, message **messages, int i, int *rc, mbox_ctx *mctx, message *messageIn, text **tptr, unsigned int recursion_level);
  static	int	count_quotes(const char *buf);
  static	bool	next_is_folded_header(const text *t);
  
! static	void	checkURLs(message *m, mbox_ctx *mctx,int *rc, int is_html);
  
  #ifdef CL_EXPERIMENTAL
! static	void	do_checkURLs(message *m, const char *dir,tag_arguments_t* hrefs);
! static	blob*	getHrefs(message* m,tag_arguments_t* hrefs);
! static	void	hrefs_done(blob *b,tag_arguments_t* hrefs);
  #endif
  
  #if	defined(FOLLOWURLS) && (FOLLOWURLS > 0)
***************
*** 1413,1424 ****
  				messageSetCTX(body, ctx);
  				messageDestroy(m);
  				if(messageGetBody(body)) {
! 					mbox_status rc = parseEmailBody(body, NULL, &mctx, 0);
! 					if(rc == FAIL) {
  						messageReset(body);
  						m = body;
  						continue;
! 					} else if(rc == VIRUS) {
  						cli_dbgmsg("Message number %d is infected\n",
  							messagenumber);
  						retcode = CL_VIRUS;
--- 1406,1417 ----
  				messageSetCTX(body, ctx);
  				messageDestroy(m);
  				if(messageGetBody(body)) {
! 					int rc = parseEmailBody(body, NULL, &mctx, 0);
! 					if(rc == 0) {
  						messageReset(body);
  						m = body;
  						continue;
! 					} else if(rc == 3) {
  						cli_dbgmsg("Message number %d is infected\n",
  							messagenumber);
  						retcode = CL_VIRUS;
***************
*** 1495,1504 ****
  		if((retcode == CL_SUCCESS) && messageGetBody(body)) {
  			messageSetCTX(body, ctx);
  			switch(parseEmailBody(body, NULL, &mctx, 0)) {
! 				case FAIL:
  					retcode = CL_EFORMAT;
  					break;
! 				case VIRUS:
  					retcode = CL_VIRUS;
  					break;
  			}
--- 1488,1497 ----
  		if((retcode == CL_SUCCESS) && messageGetBody(body)) {
  			messageSetCTX(body, ctx);
  			switch(parseEmailBody(body, NULL, &mctx, 0)) {
! 				case 0:
  					retcode = CL_EFORMAT;
  					break;
! 				case 3:
  					retcode = CL_VIRUS;
  					break;
  			}
***************
*** 2028,2038 ****
   * any headers. First time of calling it'll be
   * the whole message. Later it'll be parts of a multipart message
   * textIn is the plain text message being built up so far
   */
! static mbox_status
  parseEmailBody(message *messageIn, text *textIn, mbox_ctx *mctx, unsigned int recursion_level)
  {
! 	mbox_status rc;
  	text *aText = textIn;
  	message *mainMessage = messageIn;
  	fileblob *fb;
--- 2021,2037 ----
   * any headers. First time of calling it'll be
   * the whole message. Later it'll be parts of a multipart message
   * textIn is the plain text message being built up so far
+  *
+  * Returns:
+  *	0 for fail
+  *	1 for success, attachments saved
+  *	2 for success, attachments not saved
+  *	3 for virus found
   */
! static int	/* success or fail */
  parseEmailBody(message *messageIn, text *textIn, mbox_ctx *mctx, unsigned int recursion_level)
  {
! 	int rc = 1;
  	text *aText = textIn;
  	message *mainMessage = messageIn;
  	fileblob *fb;
***************
*** 2047,2053 ****
  		if(recursion_level >= mctx->ctx->limits->maxmailrec) {
  			cli_warnmsg("parseEmailBody: hit maximum recursion level (%u)\n",
  				mctx->ctx->limits->maxmailrec);
! 			return OK_ATTACHMENTS_NOT_SAVED;
  		}
  
  	/* Anything left to be parsed? */
--- 2046,2052 ----
  		if(recursion_level >= mctx->ctx->limits->maxmailrec) {
  			cli_warnmsg("parseEmailBody: hit maximum recursion level (%u)\n",
  				mctx->ctx->limits->maxmailrec);
! 			return 2;
  		}
  
  	/* Anything left to be parsed? */
***************
*** 2064,2070 ****
  
  		cli_dbgmsg("Parsing mail file\n");
  
- 		rc = OK;
  		mimeType = messageGetMimeType(mainMessage);
  		mimeSubtype = messageGetMimeSubtype(mainMessage);
  
--- 2063,2068 ----
***************
*** 2124,2130 ****
  				 * There might be html sent without subtype
  				 * html too, so scan them for phishing
  				 */
! 				if(rc == VIRUS)
  					infected = TRUE;
  			}
  #endif
--- 2122,2128 ----
  				 * There might be html sent without subtype
  				 * html too, so scan them for phishing
  				 */
! 				if(rc == 3)
  					infected = TRUE;
  			}
  #endif
***************
*** 2176,2182 ****
  					if(binhexBegin(mainMessage) == t_line) {
  						if(exportBinhexMessage(mctx->dir, mainMessage)) {
  							/* virus found */
! 							rc = VIRUS;
  							infected = TRUE;
  							break;
  						}
--- 2174,2180 ----
  					if(binhexBegin(mainMessage) == t_line) {
  						if(exportBinhexMessage(mctx->dir, mainMessage)) {
  							/* virus found */
! 							rc = 3;
  							infected = TRUE;
  							break;
  						}
***************
*** 2500,2506 ****
  							&rc, mctx, messageIn,
  							&aText, recursion_level + 1);
  						--multiparts;
! 						if(rc == VIRUS)
  							infected = TRUE;
  						break;
  					default:
--- 2498,2504 ----
  							&rc, mctx, messageIn,
  							&aText, recursion_level + 1);
  						--multiparts;
! 						if(rc == 3)
  							infected = TRUE;
  						break;
  					default:
***************
*** 2552,2561 ****
  				/*
  				 * FIXME: we could return 2 here when we have
  				 * saved stuff earlier
- 				 *
- 				 * Nothing to do
  				 */
! 				return (rc == VIRUS) ? VIRUS : OK_ATTACHMENTS_NOT_SAVED;
  			}
  
  			cli_dbgmsg("Find out the multipart type (%s)\n", mimeSubtype);
--- 2550,2557 ----
  				/*
  				 * FIXME: we could return 2 here when we have
  				 * saved stuff earlier
  				 */
! 				return (rc == 3) ? 3 : 2;	/* Nothing to do */
  			}
  
  			cli_dbgmsg("Find out the multipart type (%s)\n", mimeSubtype);
***************
*** 2597,2603 ****
  					cli_dbgmsg("No HTML code found to be scanned\n");
  				else {
  					rc = parseEmailBody(aMessage, aText, mctx, recursion_level + 1);
! 					if(rc == OK) {
  						assert(aMessage == messages[htmltextPart]);
  						messageDestroy(aMessage);
  						messages[htmltextPart] = NULL;
--- 2593,2599 ----
  					cli_dbgmsg("No HTML code found to be scanned\n");
  				else {
  					rc = parseEmailBody(aMessage, aText, mctx, recursion_level + 1);
! 					if(rc == 1) {
  						assert(aMessage == messages[htmltextPart]);
  						messageDestroy(aMessage);
  						messages[htmltextPart] = NULL;
***************
*** 2678,2684 ****
  					mainMessage = do_multipart(mainMessage,
  						messages, i, &rc, mctx,
  						messageIn, &aText, recursion_level + 1);
! 					if(rc == VIRUS) {
  						infected = TRUE;
  						break;
  					}
--- 2674,2680 ----
  					mainMessage = do_multipart(mainMessage,
  						messages, i, &rc, mctx,
  						messageIn, &aText, recursion_level + 1);
! 					if(rc == 3) {
  						infected = TRUE;
  						break;
  					}
***************
*** 2703,2715 ****
  				rc = parseEmailBody(messages[htmltextPart], aText, mctx, recursion_level + 1);
  				break;
  			case ENCRYPTED:
! 				rc = FAIL;	/* Not yet handled */
  				protocol = (char *)messageFindArgument(mainMessage, "protocol");
  				if(protocol) {
  					if(strcasecmp(protocol, "application/pgp-encrypted") == 0) {
  						/* RFC2015 */
  						cli_warnmsg("PGP encoded attachment not scanned\n");
! 						rc = OK_ATTACHMENTS_NOT_SAVED;
  					} else
  						cli_warnmsg("Unknown encryption protocol '%s' - if you believe this file contains a virus, submit it to www.clamav.net\n", protocol);
  					free(protocol);
--- 2699,2711 ----
  				rc = parseEmailBody(messages[htmltextPart], aText, mctx, recursion_level + 1);
  				break;
  			case ENCRYPTED:
! 				rc = 0;
  				protocol = (char *)messageFindArgument(mainMessage, "protocol");
  				if(protocol) {
  					if(strcasecmp(protocol, "application/pgp-encrypted") == 0) {
  						/* RFC2015 */
  						cli_warnmsg("PGP encoded attachment not scanned\n");
! 						rc = 2;
  					} else
  						cli_warnmsg("Unknown encryption protocol '%s' - if you believe this file contains a virus, submit it to www.clamav.net\n", protocol);
  					free(protocol);
***************
*** 2759,2765 ****
  					cli_warnmsg("MIME type 'message' cannot be decoded\n");
  					break;
  			}
! 			rc = FAIL;
  			if((strcasecmp(mimeSubtype, "rfc822") == 0) ||
  			   (strcasecmp(mimeSubtype, "delivery-status") == 0)) {
  				message *m = parseEmailHeaders(mainMessage, mctx->rfc821Table);
--- 2755,2761 ----
  					cli_warnmsg("MIME type 'message' cannot be decoded\n");
  					break;
  			}
! 			rc = 0;
  			if((strcasecmp(mimeSubtype, "rfc822") == 0) ||
  			   (strcasecmp(mimeSubtype, "delivery-status") == 0)) {
  				message *m = parseEmailHeaders(mainMessage, mctx->rfc821Table);
***************
*** 2781,2795 ****
  				break;
  			} else if(strcasecmp(mimeSubtype, "disposition-notification") == 0) {
  				/* RFC 2298 - handle like a normal email */
! 				rc = OK;
  				break;
  			} else if(strcasecmp(mimeSubtype, "partial") == 0) {
  #ifdef	PARTIAL_DIR
  				/* RFC1341 message split over many emails */
  				if(rfc1341(mainMessage, mctx->dir) >= 0)
! 					rc = OK;
  #else
  				cli_warnmsg("Partial message received from MUA/MTA - message cannot be scanned\n");
  #endif
  			} else if(strcasecmp(mimeSubtype, "external-body") == 0)
  				/* TODO */
--- 2777,2792 ----
  				break;
  			} else if(strcasecmp(mimeSubtype, "disposition-notification") == 0) {
  				/* RFC 2298 - handle like a normal email */
! 				rc = 1;
  				break;
  			} else if(strcasecmp(mimeSubtype, "partial") == 0) {
  #ifdef	PARTIAL_DIR
  				/* RFC1341 message split over many emails */
  				if(rfc1341(mainMessage, mctx->dir) >= 0)
! 					rc = 1;
  #else
  				cli_warnmsg("Partial message received from MUA/MTA - message cannot be scanned\n");
+ 				rc = 0;
  #endif
  			} else if(strcasecmp(mimeSubtype, "external-body") == 0)
  				/* TODO */
***************
*** 2970,2976 ****
  	 * No attachments - scan the text portions, often files
  	 * are hidden in HTML code
  	 */
! 	if(mainMessage && (rc != VIRUS)) {
  		text *t_line;
  
  		/*
--- 2967,2973 ----
  	 * No attachments - scan the text portions, often files
  	 * are hidden in HTML code
  	 */
! 	if(mainMessage && (rc != 3)) {
  		text *t_line;
  
  		/*
***************
*** 2979,2985 ****
  		if((encodingLine(mainMessage) != NULL) &&
  		   ((t_line = bounceBegin(mainMessage)) != NULL)) {
  			if(exportBounceMessage(t_line, mctx))
! 				rc = OK;
  		} else {
  			bool saveIt;
  
--- 2976,2982 ----
  		if((encodingLine(mainMessage) != NULL) &&
  		   ((t_line = bounceBegin(mainMessage)) != NULL)) {
  			if(exportBounceMessage(t_line, mctx))
! 				rc = 1;
  		} else {
  			bool saveIt;
  
***************
*** 3027,3043 ****
  					mainMessage = NULL;
  				} else
  					messageReset(mainMessage);
! 				rc = OK;
  			}
  		}
  	} else
! 		rc = OK_ATTACHMENTS_NOT_SAVED;	/* nothing saved */
  
  	if(mainMessage && (mainMessage != messageIn))
  		messageDestroy(mainMessage);
  
! 	if((rc != FAIL) && infected)
! 		rc = VIRUS;
  
  	cli_dbgmsg("parseEmailBody() returning %d\n", rc);
  
--- 3024,3040 ----
  					mainMessage = NULL;
  				} else
  					messageReset(mainMessage);
! 				rc = 1;
  			}
  		}
  	} else
! 		rc = 2;	/* nothing saved */
  
  	if(mainMessage && (mainMessage != messageIn))
  		messageDestroy(mainMessage);
  
! 	if((rc != 0) && infected)
! 		rc = 3;
  
  	cli_dbgmsg("parseEmailBody() returning %d\n", rc);
  
***************
*** 3105,3120 ****
  	 * viruses in both types of mails
  	 */
  	if((strstr(ptr, boundary) != NULL) || (strstr(line, boundary) != NULL))
! 		rc = OK;
  	else if(*ptr++ != '-')
! 		rc = FAIL;
  	else
  		rc = (strcasecmp(ptr, boundary) == 0);
  
  	if(out)
  		free(out);
  
! 	if(rc == OK)
  		cli_dbgmsg("boundaryStart: found %s in %s\n", boundary, line);
  
  	return rc;
--- 3102,3117 ----
  	 * viruses in both types of mails
  	 */
  	if((strstr(ptr, boundary) != NULL) || (strstr(line, boundary) != NULL))
! 		rc = 1;
  	else if(*ptr++ != '-')
! 		rc = 0;
  	else
  		rc = (strcasecmp(ptr, boundary) == 0);
  
  	if(out)
  		free(out);
  
! 	if(rc == 1)
  		cli_dbgmsg("boundaryStart: found %s in %s\n", boundary, line);
  
  	return rc;
***************
*** 3907,3913 ****
  }
  
  static void
! checkURLs(message *mainMessage, mbox_ctx *mctx, mbox_status *rc, int is_html)
  {
  	tag_arguments_t hrefs;
  	blob *b;
--- 3904,3910 ----
  }
  
  static void
! checkURLs(message *mainMessage, mbox_ctx *mctx, int *rc, int is_html)
  {
  	tag_arguments_t hrefs;
  	blob *b;
***************
*** 3933,3943 ****
  		if(hrefs.scanContents /*mctx->ctx->engine->dboptions&CL_DB_PHISHING_URLS*/) {
  			if(phishingScan(mainMessage, mctx->dir, mctx->ctx, &hrefs) == CL_VIRUS) {
  				mainMessage->isInfected = TRUE;
! 				*rc = VIRUS;
  				cli_dbgmsg("PH:Phishing found\n");
  			}
  		}
! 		if(is_html && (mctx->ctx->options&CL_SCAN_MAILURL) && (*rc != VIRUS))
  			do_checkURLs(mainMessage, mctx->dir, &hrefs);
  	}
  	hrefs_done(b,&hrefs);
--- 3930,3940 ----
  		if(hrefs.scanContents /*mctx->ctx->engine->dboptions&CL_DB_PHISHING_URLS*/) {
  			if(phishingScan(mainMessage, mctx->dir, mctx->ctx, &hrefs) == CL_VIRUS) {
  				mainMessage->isInfected = TRUE;
! 				*rc = 3;
  				cli_dbgmsg("PH:Phishing found\n");
  			}
  		}
! 		if(is_html && (mctx->ctx->options&CL_SCAN_MAILURL) && (*rc != 3))
  			do_checkURLs(mainMessage, mctx->dir, &hrefs);
  	}
  	hrefs_done(b,&hrefs);
***************
*** 4040,4046 ****
  
  #if	defined(FOLLOWURLS) && (FOLLOWURLS > 0)
  static void
! checkURLs(message *m, mbox_ctx *mctx, mbox_status *rc, int is_html)
  {
  	blob *b = messageToBlob(m, 0);
  	size_t len;
--- 4037,4043 ----
  
  #if	defined(FOLLOWURLS) && (FOLLOWURLS > 0)
  static void
! checkURLs(message *m, mbox_ctx *mctx, int *rc, int is_html)
  {
  	blob *b = messageToBlob(m, 0);
  	size_t len;
***************
*** 5111,5118 ****
  	 * won't be scanned
  	 */
  	for(t = start; t; t = t->t_next) {
- 		const char *txt = lineGetData(t->t_line);
  		char cmd[RFC2821LENGTH + 1];
  
  		if(txt == NULL)
  			continue;
--- 5108,5115 ----
  	 * won't be scanned
  	 */
  	for(t = start; t; t = t->t_next) {
  		char cmd[RFC2821LENGTH + 1];
+ 		const char *txt = lineGetData(t->t_line);
  
  		if(txt == NULL)
  			continue;
***************
*** 5159,5165 ****
   * Handle the ith element of a number of multiparts, e.g. multipart/alternative
   */
  static message *
! do_multipart(message *mainMessage, message **messages, int i, mbox_status *rc, mbox_ctx *mctx, message *messageIn, text **tptr, unsigned int recursion_level)
  {
  	bool addToText = FALSE;
  	const char *dtype;
--- 5156,5162 ----
   * Handle the ith element of a number of multiparts, e.g. multipart/alternative
   */
  static message *
! do_multipart(message *mainMessage, message **messages, int i, int *rc, mbox_ctx *mctx, message *messageIn, text **tptr, unsigned int recursion_level)
  {
  	bool addToText = FALSE;
  	const char *dtype;
*** /home/njh/src/clamav-devel/./libclamav/filetypes.h	2006-12-09 08:37:12.000000000 +0000
--- ./libclamav/filetypes.h	2006-11-03 20:02:28.000000000 +0000
***************
*** 54,62 ****
      CL_TYPE_UUENCODED,
      CL_TYPE_PST,	/* Microsoft Outlook binary email folder (.pst file) */
      CL_TYPE_HTML_UTF16,
! #ifdef CL_EXPERIMENTAL
!     CL_TYPE_RTF,
! #endif
      /* bigger numbers have higher priority (in o-t-f detection) */
      CL_TYPE_HTML, /* on the fly */
      CL_TYPE_MAIL,  /* magic + on the fly */
--- 54,60 ----
      CL_TYPE_UUENCODED,
      CL_TYPE_PST,	/* Microsoft Outlook binary email folder (.pst file) */
      CL_TYPE_HTML_UTF16,
! 
      /* bigger numbers have higher priority (in o-t-f detection) */
      CL_TYPE_HTML, /* on the fly */
      CL_TYPE_MAIL,  /* magic + on the fly */
*** /home/njh/src/clamav-devel/./libclamav/scanners.c	2006-12-23 13:14:55.000000000 +0000
--- ./libclamav/scanners.c	2006-12-20 08:29:52.000000000 +0000
***************
*** 1246,1252 ****
  	return CL_ETMPDIR;
      }
  
!     if((ret = cli_untar(dir, desc, posix, ctx->limits)))
  	cli_dbgmsg("Tar: %s\n", cl_strerror(ret));
      else
  	ret = cli_scandir(dir, ctx);
--- 1246,1252 ----
  	return CL_ETMPDIR;
      }
  
!     if((ret = cli_untar(dir, desc, posix)))
  	cli_dbgmsg("Tar: %s\n", cl_strerror(ret));
      else
  	ret = cli_scandir(dir, ctx);
*** /home/njh/src/clamav-devel/./libclamav/untar.c	2006-12-22 18:29:13.000000000 +0000
--- ./libclamav/untar.c	2006-11-24 22:28:32.000000000 +0000
***************
*** 20,26 ****
   * Author: Charles G. Waldman (cgw@pgt.com),  Aug 4 1998
   * There are many tar files that this code cannot decode.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 20,26 ----
   * Author: Charles G. Waldman (cgw@pgt.com),  Aug 4 1998
   * There are many tar files that this code cannot decode.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 61,71 ****
  }
  
  int
! cli_untar(const char *dir, int desc, unsigned int posix, const struct cl_limits *limits)
  {
  	int size = 0;
  	int in_block = 0;
- 	unsigned int files = 0;
  	char fullname[NAME_MAX + 1];
  	FILE *outfile = NULL;
  
--- 61,70 ----
  }
  
  int
! cli_untar(const char *dir, int desc, unsigned int posix)
  {
  	int size = 0;
  	int in_block = 0;
  	char fullname[NAME_MAX + 1];
  	FILE *outfile = NULL;
  
***************
*** 104,114 ****
  			if(block[0] == '\0')	/* We're done */
  				break;
  
- 			if(limits && limits->maxfiles && (files >= limits->maxfiles)) {
- 				cli_dbgmsg("cli_untar: number of files exceeded %u\n", limits->maxfiles);
- 				return CL_CLEAN;
- 			}
- 
  			/* Notice assumption that BLOCKSIZE > 262 */
  			if(posix) {
  				strncpy(magic, block+257, 5);
--- 103,108 ----
***************
*** 128,134 ****
  				case '0':	/* plain file */
  				case '\0':	/* plain file */
  				case '7':	/* contiguous file */
- 					files++;
  					directory = 0;
  					break;
  				case '1':	/* Link to already archived file */
--- 122,127 ----
***************
*** 180,194 ****
  				return CL_EFORMAT;
  			}
  			cli_dbgmsg("cli_untar: size = %d\n", size);
- 			if(limits && limits->maxfilesize && ((unsigned int)size > limits->maxfilesize)) {
- 				cli_dbgmsg("cli_untar: size exceeded %d bytes\n", size);
- 				skipEntry++;
- 			}
  
  			if(skipEntry) {
  				const int nskip = (size % BLOCKSIZE || !size) ? size + BLOCKSIZE - (size % BLOCKSIZE) : size;
! 
! 				cli_dbgmsg("cli_untar: skipping entry\n");
  				lseek(desc, nskip, SEEK_CUR);
  				continue;
  			}
--- 173,182 ----
  				return CL_EFORMAT;
  			}
  			cli_dbgmsg("cli_untar: size = %d\n", size);
  
  			if(skipEntry) {
  				const int nskip = (size % BLOCKSIZE || !size) ? size + BLOCKSIZE - (size % BLOCKSIZE) : size;
! 				cli_dbgmsg("cli_untar: GNU extension, skipping entry\n");
  				lseek(desc, nskip, SEEK_CUR);
  				continue;
  			}
*** /home/njh/src/clamav-devel/./libclamav/untar.h	2006-12-22 18:29:13.000000000 +0000
--- ./libclamav/untar.h	2006-11-24 22:28:32.000000000 +0000
***************
*** 18,26 ****
   *
   * Change History:
   * $Log: patches,v $
   * Revision 1.15  2006/12/28 09:31:53  njh
   * Latest bug fixes for portability problems
   *
-  * Revision 1.5  2006/12/22 18:29:13  njh
-  * Recommit fix for bug 153
-  *
   * Revision 1.4  2006/04/09 19:59:28  kojm
   * update GPL headers with new address for FSF
   *
--- 18,23 ----
***************
*** 34,37 ****
   * First draft
   *
   */
! int cli_untar(const char *dir, int desc, unsigned int posix, const struct cl_limits *limits);
--- 31,34 ----
   * First draft
   *
   */
! int cli_untar(const char *dir, int desc, unsigned int posix);
*** /home/njh/src/clamav-devel/./libclamav/js/alloc.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/alloc.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 22,36 ****
   * MA 02111-1307, USA
   */
  
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
- 
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "js/jsint.h"
--- 22,30 ----
   * MA 02111-1307, USA
   */
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "js/jsint.h"
***************
*** 315,318 ****
  }
  
  #endif /* not JS_DEBUG_MEMORY_LEAKS */
- #endif	/*CL_EXPERIMENTAL*/
--- 309,311 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_array.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_array.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,30 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /*
--- 24,30 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /*
***************
*** 47,58 ****
   *   length
   */
  
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
- 
  #include "jsint.h"
  #include "mrgsort.h"
  
--- 47,52 ----
***************
*** 654,657 ****
    n = &vm->globals[js_vm_intern (vm, "Array")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 648,650 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_bool.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_bool.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,38 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
- 
  #include "jsint.h"
  
  /*
--- 24,32 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
  /*
***************
*** 157,160 ****
    n = &vm->globals[js_vm_intern (vm, "Boolean")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 151,153 ----
*** /home/njh/src/clamav-devel/./libclamav/js/bc.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/bc.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 227,230 ****
    js_free (bc->sects);
    js_free (bc);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 222,224 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_core.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_core.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,30 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /*
--- 24,30 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /*
***************
*** 44,54 ****
   *  isInt (any)
   *  print (any[,...])
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 44,49 ----
***************
*** 662,665 ****
        js_vm_builtin_create (vm, n, info, NULL);
      }
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 657,659 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_date.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_date.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  #include "rentrant.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  #include "rentrant.h"
***************
*** 795,798 ****
        js_vm_builtin_create (vm, n, info, NULL);
      }
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 790,792 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_dir.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_dir.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 322,325 ****
    n = &vm->globals[js_vm_intern (vm, "Directory")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 317,319 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_file.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_file.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,30 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /*
--- 24,30 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /*
***************
*** 63,73 ****
   *   autoFlush	boolean		mutable
   *   bufferSize	integer		mutable
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 63,68 ----
***************
*** 1015,1018 ****
    /* Create the builtin. */
    js_vm_builtin_create (vm, result_return, n->u.vbuiltin->info, ictx);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 1010,1012 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_func.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_func.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 81,84 ****
    n = &vm->globals[js_vm_intern (vm, "Function")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 76,78 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_math.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_math.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  #include "rentrant.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  #include "rentrant.h"
***************
*** 514,517 ****
    n = &vm->globals[js_vm_intern (vm, "Math")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 509,511 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_number.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_number.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,40 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /*
   * Standard: ECMAScript-2.0.draft-22-Apr-98
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,35 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /*
   * Standard: ECMAScript-2.0.draft-22-Apr-98
   */
  
  #include "jsint.h"
  
***************
*** 323,326 ****
    n = &vm->globals[js_vm_intern (vm, "Number")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 318,320 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_object.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_object.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 198,201 ****
    n = &vm->globals[js_vm_intern (vm, "Object")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 193,195 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_regexp.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_regexp.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  #include "regex.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  #include "regex.h"
***************
*** 1139,1142 ****
    if (regs.end)
      free (regs.end);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 1134,1136 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_string.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_string.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,38 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /* TODO: global method: String (obj) => string */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,33 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /* TODO: global method: String (obj) => string */
  
  #include "jsint.h"
  
***************
*** 940,943 ****
    n = &vm->globals[js_vm_intern (vm, "RegExp")];
    ctx->regexp_info = n->u.vbuiltin->info;
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 935,937 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_vm.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_vm.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,30 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /*
--- 24,30 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  /*
***************
*** 56,66 ****
   *   VM.versionPatch		integer
   *   VM.warnUndef		boolean		yes
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 56,61 ----
***************
*** 448,451 ****
    n = &vm->globals[js_vm_intern (vm, "VM")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 443,445 ----
*** /home/njh/src/clamav-devel/./libclamav/js/compiler.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/compiler.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 1,8 ****
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  const unsigned char js_compiler_bytecode[] = {
    0xc0, 0x01, 0x4a, 0x53, 0x00, 0x00, 0x00, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0x54,
--- 1,3 ----
***************
*** 11201,11204 ****
  };
  unsigned int js_compiler_bytecode_len = 89552;
  #define JS_COMPILER_BYTECODE_LEN 89552
- #endif	/*CL_EXPERIMENTAL*/
--- 11196,11198 ----
*** /home/njh/src/clamav-devel/./libclamav/js/heap.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/heap.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 589,592 ****
    /* Just sweep without marking. */
    sweep (vm);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 584,586 ----
*** /home/njh/src/clamav-devel/./libclamav/js/iostream.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/iostream.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 476,479 ****
    if (stream->data_in_buf == 0)
      stream->at_eof = 1;
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 471,473 ----
*** /home/njh/src/clamav-devel/./libclamav/js/js.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/js.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "js/js.h"
  #include "js/jsint.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "js/js.h"
  #include "js/jsint.h"
***************
*** 1687,1690 ****
  
    return stream;
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 1682,1684 ----
*** /home/njh/src/clamav-devel/./libclamav/js/object.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/object.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 538,541 ****
  
    return -1;
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 533,535 ----
*** /home/njh/src/clamav-devel/./libclamav/js/r_pthrs.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/r_pthrs.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  #include "rentrant.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  #include "rentrant.h"
***************
*** 132,135 ****
  }
  
  #endif /* not DRAND48_R_WITH_DRAND48D */
- #endif	/*CL_EXPERIMENTAL*/
--- 127,129 ----
*** /home/njh/src/clamav-devel/./libclamav/js/utils.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/utils.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 442,445 ****
  
    return result;
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 437,439 ----
*** /home/njh/src/clamav-devel/./libclamav/js/vm.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/vm.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 971,974 ****
    js_builtin_Object (vm);
    js_builtin_String (vm);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 966,968 ----
*** /home/njh/src/clamav-devel/./libclamav/js/vmjumps.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/vmjumps.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 586,589 ****
    return NULL;
  #endif /* not (__GNUC__ && !DISABLE_JUMPS) */
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 581,583 ----
*** /home/njh/src/clamav-devel/./libclamav/js/vmswitch.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/vmswitch.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 557,560 ****
  
    JS_COPY (&vm->exec_result, JS_SP1);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 552,554 ----
*** /home/njh/src/clamav-devel/./libclamav/js/xjs.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/xjs.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "js/js.h"
  #include "js/jsint.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
  #include "js/js.h"
  #include "js/jsint.h"
***************
*** 463,466 ****
  
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 458,460 ----
*** /home/njh/src/clamav-devel/./libclamav/js/xmd5.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/xmd5.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,39 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
  
! #ifdef	CL_EXPERIMENTAL
! 
! #include "jsint.h"
! #include "md5.h"
  
  /*
   * Types and definitions.
--- 24,34 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $
   */
  
! #include "js/jsint.h"
! #include "js/md5.h"
  
  /*
   * Types and definitions.
***************
*** 225,228 ****
    n = &vm->globals[js_vm_intern (vm, "MD5")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 220,222 ----
*** /home/njh/src/clamav-devel/./libclamav/js/jsconfig.h	2006-10-19 18:27:28.000000000 +0100
--- ./libclamav/js/jsconfig.h	2006-10-21 16:12:36.000000000 +0100
***************
*** 165,168 ****
  #define HAVE_STRING_H 1
  
  /* Define if you have the <unistd.h> header file.  */
! #define HAVE_UNISTD_H 1
--- 165,168 ----
  #define HAVE_STRING_H 1
  
  /* Define if you have the <unistd.h> header file.  */
! /* #undef HAVE_UNISTD_H 1 */
*** /home/njh/src/clamav-devel/./libclamav/jscript.c	2006-12-13 15:25:34.000000000 +0000
--- ./libclamav/jscript.c	2006-11-24 20:52:14.000000000 +0000
***************
*** 28,40 ****
   * TODO:	Add mailfollowurls type feature
   * TODO:	Check the NGS code for vulnerabilities, leaks etc.
   * TODO:	Check the NGS code is thread safe
-  * TODO:	Test code such as
-  *	<script>
-  *		document.writeln("<script> function f() { ..the real worm code..
-  *			</script>"); f();
-  *	</script>
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 28,35 ----
   * TODO:	Add mailfollowurls type feature
   * TODO:	Check the NGS code for vulnerabilities, leaks etc.
   * TODO:	Check the NGS code is thread safe
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.15 2006/12/28 09:31:53 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
*** /home/njh/src/clamav-devel/./libclamav/cab.c	2006-12-27 15:51:09.000000000 +0000
--- ./libclamav/cab.c	2006-12-20 08:29:52.000000000 +0000
***************
*** 173,179 ****
  
  int cab_open(int fd, off_t offset, struct cab_archive *cab)
  {
! 	unsigned int i, bscore = 0, badname = 0;
  	struct cab_file *file, *lfile = NULL;
  	struct cab_folder *folder, *lfolder = NULL;
  	struct cab_hdr hdr;
--- 173,179 ----
  
  int cab_open(int fd, off_t offset, struct cab_archive *cab)
  {
! 	unsigned int i, bscore = 0;
  	struct cab_file *file, *lfile = NULL;
  	struct cab_folder *folder, *lfolder = NULL;
  	struct cab_hdr hdr;
***************
*** 272,278 ****
  	if(ret)
  	    return ret;
  	if(cab_chkname(pt))
! 	    badname = 1;
  	else
  	    cli_dbgmsg("CAB: Preceeding cabinet name: %s\n", pt);
  	free(pt);
--- 272,278 ----
  	if(ret)
  	    return ret;
  	if(cab_chkname(pt))
! 	    bscore++;
  	else
  	    cli_dbgmsg("CAB: Preceeding cabinet name: %s\n", pt);
  	free(pt);
***************
*** 281,287 ****
  	if(ret)
  	    return ret;
  	if(cab_chkname(pt))
! 	    badname = 1;
  	else
  	    cli_dbgmsg("CAB: Preceeding cabinet info: %s\n", pt);
  	free(pt);
--- 281,287 ----
  	if(ret)
  	    return ret;
  	if(cab_chkname(pt))
! 	    bscore++;
  	else
  	    cli_dbgmsg("CAB: Preceeding cabinet info: %s\n", pt);
  	free(pt);
***************
*** 293,299 ****
  	if(ret)
  	    return ret;
  	if(cab_chkname(pt))
! 	    badname = 1;
  	else
  	    cli_dbgmsg("CAB: Next cabinet name: %s\n", pt);
  	free(pt);
--- 293,299 ----
  	if(ret)
  	    return ret;
  	if(cab_chkname(pt))
! 	    bscore++;
  	else
  	    cli_dbgmsg("CAB: Next cabinet name: %s\n", pt);
  	free(pt);
***************
*** 302,313 ****
  	if(ret)
  	    return ret;
  	if(cab_chkname(pt))
! 	    badname = 1;
  	else
  	    cli_dbgmsg("CAB: Next cabinet info: %s\n", pt);
  	free(pt);
      }
-     bscore += badname;
  
      if(bscore >= 4) {
  	cli_dbgmsg("CAB: bscore == %u, most likely a fake cabinet\n", bscore);
--- 302,312 ----
  	if(ret)
  	    return ret;
  	if(cab_chkname(pt))
! 	    bscore++;
  	else
  	    cli_dbgmsg("CAB: Next cabinet info: %s\n", pt);
  	free(pt);
      }
  
      if(bscore >= 4) {
  	cli_dbgmsg("CAB: bscore == %u, most likely a fake cabinet\n", bscore);
*** /home/njh/src/clamav-devel/./clamscan/manager.c	2006-12-20 11:35:26.000000000 +0000
--- ./clamscan/manager.c	2006-12-20 12:14:46.000000000 +0000
***************
*** 30,40 ****
--- 30,48 ----
  #include <ctype.h>
  #include <sys/stat.h>
  #include <sys/types.h>
+ #ifdef	C_WINDOWS
+ #include <sys/utime.h>
+ #else
  #include <sys/wait.h>
  #include <utime.h>
+ #endif
+ #ifdef	HAVE_INITGROUPS
  #include <grp.h>
+ #endif
  #include <fcntl.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
  #include <signal.h>
  #include <clamav.h>
***************
*** 57,62 ****
--- 65,75 ----
  dev_t procdev;
  #endif
  
+ #ifdef	C_WINDOWS
+ #undef	P_tmpdir
+ 
+ #define	P_tmpdir	"C:\\WINDOWS\\TEMP"
+ #endif
  
  int scanmanager(const struct optstruct *opt)
  {
***************
*** 69,77 ****
  	struct stat sb;
  	char *fullpath = NULL, cwd[1024];
  
- 
  /* njh@bandsman.co.uk: BeOS */
! #if !defined(C_CYGWIN) && !defined(C_OS2) && !defined(C_BEOS)
      if(!geteuid()) {
  	if((user = getpwnam(UNPUSER)) == NULL) {
  	    logg("!Can't get information about user "UNPUSER"\n");
--- 82,89 ----
  	struct stat sb;
  	char *fullpath = NULL, cwd[1024];
  
  /* njh@bandsman.co.uk: BeOS */
! #if !defined(C_CYGWIN) && !defined(C_OS2) && !defined(C_BEOS) && !defined(C_WINDOWS)
      if(!geteuid()) {
  	if((user = getpwnam(UNPUSER)) == NULL) {
  	    logg("!Can't get information about user "UNPUSER"\n");
***************
*** 370,381 ****
--- 382,395 ----
  	return 0;
      }
  
+ #ifndef	C_WINDOWS
      if(geteuid())
  	if(checkaccess(filename, NULL, R_OK) != 1) {
  	    if(!printinfected)
  		logg("%s: Access denied\n", filename);
  	    return 0;
  	}
+ #endif
  
      claminfo.files++;
  
***************
*** 486,492 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 500,506 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 505,511 ****
  	exit(63); /* critical */
      }
  
! #ifndef C_OS2
      if(user)
  	chown(gendir, user->pw_uid, user->pw_gid);
  #endif
--- 519,526 ----
  	exit(63); /* critical */
      }
  
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
! 	/* FIXME: do the correct native windows way */
      if(user)
  	chown(gendir, user->pw_uid, user->pw_gid);
  #endif
***************
*** 684,690 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 699,705 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 720,726 ****
  
      fixperms(gendir);
  
! #ifndef C_OS2
      if(user) {
  	chown(gendir, user->pw_uid, user->pw_gid);
  	chown(tmpfile, user->pw_uid, user->pw_gid);
--- 735,741 ----
  
      fixperms(gendir);
  
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
      if(user) {
  	chown(gendir, user->pw_uid, user->pw_gid);
  	chown(tmpfile, user->pw_uid, user->pw_gid);
***************
*** 763,769 ****
  
      logg("*Scanning %s\n", filename);
  
!     if((fd = open(filename, O_RDONLY)) == -1) {
  	logg("^Can't open file %s\n", filename);
  	return 54;
      }
--- 778,784 ----
  
      logg("*Scanning %s\n", filename);
  
!     if((fd = open(filename, O_RDONLY|O_BINARY)) == -1) {
  	logg("^Can't open file %s\n", filename);
  	return 54;
      }
***************
*** 798,804 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 813,819 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 816,821 ****
--- 831,843 ----
  	return 63;
      }
  
+ #ifdef	C_WINDOWS
+ 	if(setmode(fileno(stdin), O_BINARY) < 0) {
+ 		logg("^Can't set binary mode on stdin\n");
+ 		return 63;
+ 	}
+ #endif
+ 
      while((ret = fread(buff, 1, FILEBUFF, stdin)))
  	fwrite(buff, 1, ret, fs);
  
***************
*** 850,855 ****
--- 872,885 ----
   * 0 -> OK
   */
  
+ #ifdef	C_WINDOWS
+ int clamav_unpack(const char *prog, char **args, const char *tmpdir, const struct passwd *user, const struct optstruct *opt)
+ {
+ 	/* TODO: use spamvp(P_WAIT, prog, args); */
+ 	cli_errmsg("clamav_unpack is not supported under Windows yet\n");
+ 	return -1;
+ }
+ #else
  int clamav_unpack(const char *prog, char **args, const char *tmpdir, const struct passwd *user, const struct optstruct *opt)
  {
  	pid_t pid;
***************
*** 880,886 ****
  	case -1:
  	    return -1;
  	case 0:
! #ifndef C_CYGWIN
  	    if(!geteuid() && user) {
  
  #ifdef HAVE_SETGROUPS
--- 910,916 ----
  	case -1:
  	    return -1;
  	case 0:
! #if	(!defined(C_CYGWIN)) && (!defined(C_WINDOWS))
  	    if(!geteuid() && user) {
  
  #ifdef HAVE_SETGROUPS
***************
*** 956,961 ****
--- 986,992 ----
  
      return 0;
  }
+ #endif
  
  void move_infected(const char *filename, const struct optstruct *opt)
  {
***************
*** 963,969 ****
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
  	int moveflag = opt_check(opt, "move");
! 	struct utimbuf ubuf;
  
  
      if((moveflag && !(movedir = opt_arg(opt, "move"))) ||
--- 994,1000 ----
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
  	int moveflag = opt_check(opt, "move");
! 	struct _utimbuf ubuf;
  
  
      if((moveflag && !(movedir = opt_arg(opt, "move"))) ||
***************
*** 1042,1048 ****
  	}
  
  	chmod(movefilename, fstat.st_mode);
! #ifndef C_OS2
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  #endif
  
--- 1073,1079 ----
  	}
  
  	chmod(movefilename, fstat.st_mode);
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  #endif
  
*** /home/njh/src/clamav-devel/./clamscan/clamscan.c	2006-12-12 18:43:58.000000000 +0000
--- ./clamscan/clamscan.c	2006-12-12 18:43:32.000000000 +0000
***************
*** 24,32 ****
--- 24,39 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifdef	C_WINDOWS
+ #include <fcntl.h>
+ #else
  #include <sys/time.h>
+ #endif
  #include <time.h>
+ #include <ctype.h>
  
  #include "clamscan_opt.h"
  #include "others.h"
***************
*** 45,50 ****
--- 52,61 ----
  
  void help(void);
  
+ #if	defined(C_WINDOWS) && defined(_DEBUG)
+ #include <crtdbg.h>
+ #endif
+ 
  struct s_info claminfo;
  short recursion = 0, printinfected = 0, bell = 0;
  
***************
*** 53,61 ****
--- 64,81 ----
  	int ds, dms, ret;
  	double mb;
  	struct timeval t1, t2;
+ #ifndef	C_WINDOWS
  	struct timezone tz;
+ #endif
  	struct optstruct *opt;
  	const char *pt;
+ 	
+ #if	defined(C_WINDOWS) && defined(CL_THREAD_SAFE)
+ 	if(!pthread_win32_process_attach_np()) {
+ 		mprintf("!Can't start the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
  
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, NULL);
***************
*** 182,192 ****
--- 202,229 ----
  
      memset(&claminfo, 0, sizeof(struct s_info));
  
+ #ifdef	C_WINDOWS
+ 	_set_fmode(_O_BINARY);
+ #ifdef	_DEBUG
+ 	{
+ 		_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);
+ 		_CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);
+ 	}
+ #endif	
+ 
+ 	gettimeofday(&t1, NULL);
+ #else
      gettimeofday(&t1, &tz);
+ #endif
+ 
      ret = scanmanager(opt);
  
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
+ #ifdef	C_WINDOWS
+ 	gettimeofday(&t2, NULL);
+ #else
  	gettimeofday(&t2, &tz);
+ #endif
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
***************
*** 212,217 ****
--- 249,262 ----
      }
  
      opt_free(opt);
+     
+ #if	defined(C_WINDOWS) && defined(CL_THREAD_SAFE)
+ 	if(!pthread_win32_process_detach_np()) {
+ 		mprintf("!Can't stop the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
      return ret;
  }
  
*** /home/njh/src/clamav-devel/./clamscan/treewalk.c	2006-10-29 14:49:55.000000000 +0000
--- ./clamscan/treewalk.c	2006-10-29 14:49:40.000000000 +0000
***************
*** 24,35 ****
--- 24,43 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/stat.h>
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/wait.h>
+ #endif
+ #ifdef	HAVE_INITGROUPS
  #include <grp.h>
+ #endif
+ #ifndef	C_WINDOWS
  #include <dirent.h>
+ #endif
  #include <errno.h>
  
  #include "shared.h"
***************
*** 97,103 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 105,111 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_INTERIX)) && (!defined(C_WINDOWS)) && (!defined(C_CYGWIN))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 136,141 ****
--- 144,156 ----
  
  }
  
+ #ifdef	C_WINDOWS
+ int
+ clamav_rmdirs(const char *dir)
+ {
+ 	return rmdirs(dir);
+ }
+ #else
  int clamav_rmdirs(const char *dir)
  {
  #ifndef C_CYGWIN
***************
*** 184,189 ****
--- 199,205 ----
      }
  
  }
+ #endif
  
  int fixperms(const char *dirname)
  {
***************
*** 195,201 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 211,217 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_INTERIX)) && (!defined(C_WINDOWS)) && (!defined(C_CYGWIN))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 241,247 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 257,263 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_INTERIX)) && (!defined(C_WINDOWS)) && (!defined(C_CYGWIN))
  	    if(dent->d_ino)
  #endif
  	    {
*** /home/njh/src/clamav-devel/./clamscan/clamscan_opt.h	2006-12-27 23:14:40.000000000 +0000
--- ./clamscan/clamscan_opt.h	2006-10-29 17:00:22.000000000 +0000
***************
*** 62,68 ****
      {"max-ratio", 1, 0, 0},
      {"max-recursion", 1, 0, 0},
      {"max-dir-recursion", 1, 0, 0},
-     {"max-mail-recursion", 1, 0, 0},
  #ifdef HAVE_NCORE
      {"ncore", 0, 0, 0},
  #endif
--- 62,67 ----
*** /home/njh/src/clamav-devel/./clamscan/treewalk.h	2006-06-08 21:00:50.000000000 +0100
--- ./clamscan/treewalk.h	2006-07-26 15:36:44.000000000 +0100
***************
*** 20,26 ****
--- 20,29 ----
  #ifndef __TREEWALK_H
  #define __TREEWALK_H
  
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
+ 
  #include <clamav.h>
  
  #include "options.h"
*** /home/njh/src/clamav-devel/./clamscan/others.c	2006-04-09 20:59:26.000000000 +0100
--- ./clamscan/others.c	2006-07-26 16:03:16.000000000 +0100
***************
*** 29,41 ****
--- 29,47 ----
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <errno.h>
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <sys/wait.h>
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <signal.h>
***************
*** 73,78 ****
--- 79,92 ----
      }
  }
  
+ #ifdef	C_WINDOWS
+ /* FIXME: Handle users correctly */
+ int
+ checkaccess(const char *path, const char *username, int mode)
+ {
+ 	return _access(path, mode);
+ }
+ #else
  int checkaccess(const char *path, const char *username, int mode)
  {
  	struct passwd *user;
***************
*** 117,122 ****
--- 131,137 ----
  
      return ret;
  }
+ #endif
  
  int match_regex(const char *filename, const char *pattern)
  {
*** /home/njh/src/clamav-devel/./clamscan/manager.h	2006-05-15 19:30:18.000000000 +0100
--- ./clamscan/manager.h	2006-10-10 11:12:40.000000000 +0100
***************
*** 21,27 ****
--- 21,29 ----
  #define __MANAGER_H
  
  #include <clamav.h>
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
  #include "options.h"
  
  int scanmanager(const struct optstruct *opt);
***************
*** 42,45 ****
--- 44,52 ----
  
  void move_infected(const char *filename, const struct optstruct *opt);
  
+ #ifdef	_DEBUG
+ /* breaks mspack/qtmd.c :-( */
+ #define	free(p)	_free_dbg(p, _NORMAL_BLOCK)
+ #endif
+ 
  #endif
*** /home/njh/src/clamav-devel/./shared/cdiff.c	2006-10-29 16:49:30.000000000 +0000
--- ./shared/cdiff.c	2006-10-29 16:50:40.000000000 +0000
***************
*** 27,33 ****
--- 27,35 ----
  #include <ctype.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "shared/memory.h"
  #include "shared/misc.h"
***************
*** 363,369 ****
  
      if(del || xchg) {
  
! 	if(!(fh = fopen(ctx->open_db, "r"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for reading\n", ctx->open_db);
  	    return -1;
  	}
--- 365,371 ----
  
      if(del || xchg) {
  
! 	if(!(fh = fopen(ctx->open_db, "rb"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for reading\n", ctx->open_db);
  	    return -1;
  	}
***************
*** 374,380 ****
  	    return -1;
  	}
  
! 	if(!(tmpfh = fopen(tmp, "w"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for writing\n", tmp);
  	    fclose(fh);
  	    free(tmp);
--- 376,382 ----
  	    return -1;
  	}
  
! 	if(!(tmpfh = fopen(tmp, "wb"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for writing\n", tmp);
  	    fclose(fh);
  	    free(tmp);
***************
*** 459,465 ****
  
      if(add) {
  
! 	if(!(fh = fopen(ctx->open_db, "a"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for appending\n", ctx->open_db);
  	    return -1;
  	}
--- 461,467 ----
  
      if(add) {
  
! 	if(!(fh = fopen(ctx->open_db, "ab"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for appending\n", ctx->open_db);
  	    return -1;
  	}
***************
*** 530,536 ****
  	return -1;
      }
  
!     if(!(src = fopen(srcdb, "r"))) {
  	logg("!cdiff_cmd_move: Can't open %s for reading\n", srcdb);
  	free(start_str);
  	free(end_str);
--- 532,538 ----
  	return -1;
      }
  
!     if(!(src = fopen(srcdb, "rb"))) {
  	logg("!cdiff_cmd_move: Can't open %s for reading\n", srcdb);
  	free(start_str);
  	free(end_str);
***************
*** 547,553 ****
  	return -1;
      }
  
!     if(!(dst = fopen(dstdb, "a"))) {
  	logg("!cdiff_cmd_move: Can't open %s for appending\n", dstdb);
  	free(start_str);
  	free(end_str);
--- 549,555 ----
  	return -1;
      }
  
!     if(!(dst = fopen(dstdb, "ab"))) {
  	logg("!cdiff_cmd_move: Can't open %s for appending\n", dstdb);
  	free(start_str);
  	free(end_str);
***************
*** 568,574 ****
  	return -1;
      }
  
!     if(!(tmp = fopen(tmpdb, "w"))) {
  	logg("!cdiff_cmd_move: Can't open file %s for writing\n", tmpdb);
  	free(start_str);
  	free(end_str);
--- 570,576 ----
  	return -1;
      }
  
!     if(!(tmp = fopen(tmpdb, "wb"))) {
  	logg("!cdiff_cmd_move: Can't open file %s for writing\n", tmpdb);
  	free(start_str);
  	free(end_str);
***************
*** 910,916 ****
  
      } else { /* .script */
  
! 	if(!(fh = fdopen(desc, "r"))) {
  	    logg("!cdiff_apply: fdopen() failed for descriptor %d\n", desc);
  	    close(desc);
  	    return -1;
--- 912,918 ----
  
      } else { /* .script */
  
! 	if(!(fh = fdopen(desc, "rb"))) {
  	    logg("!cdiff_apply: fdopen() failed for descriptor %d\n", desc);
  	    close(desc);
  	    return -1;
*** /home/njh/src/clamav-devel/./shared/misc.c	2006-10-29 20:48:42.000000000 +0000
--- ./shared/misc.c	2006-10-29 20:48:10.000000000 +0000
***************
*** 37,52 ****
  #include <ctype.h>
  #include <errno.h>
  
! #include "shared/cfgparser.h"
! #include "shared/memory.h"
! #include "shared/output.h"
  
! #include "libclamav/clamav.h"
! #include "libclamav/cvd.h"
! 
! #ifndef	O_BINARY
! #define	O_BINARY	0
! #endif
  
  char *freshdbdir(void)
  {
--- 37,48 ----
  #include <ctype.h>
  #include <errno.h>
  
! #include "clamav.h"
! #include "cfgparser.h"
! #include "memory.h"
! #include "output.h"
  
! #include "../libclamav/cvd.h"
  
  char *freshdbdir(void)
  {
*** /home/njh/src/clamav-devel/./shared/getopt.c	2004-03-29 01:00:58.000000000 +0100
--- ./shared/getopt.c	2006-07-26 16:49:38.000000000 +0100
***************
*** 41,47 ****
--- 41,49 ----
  
  #include <stdio.h>
  
+ #ifndef	C_WINDOWS
  int strncmp(const char *s1, const char *s2, size_t n);
+ #endif
  
  /* Comment out all this code if we are using the GNU C Library, and are not
     actually compiling the library itself.  This code is part of the GNU C
*** /home/njh/src/clamav-devel/./shared/network.h	2006-04-09 20:59:28.000000000 +0100
--- ./shared/network.h	2006-07-31 15:59:30.000000000 +0100
***************
*** 21,28 ****
--- 21,33 ----
  #ifndef __NETWORK_H
  #define __NETWORK_H
  
+ #ifdef	HAVE_SYS_TYPES_H
  #include <sys/types.h>
+ #endif
+ 
+ #ifndef	C_WINDOWS
  #include <netdb.h>
+ #endif
  
  int r_gethostbyname(const char *hostname, struct hostent *hp, char *buf, size_t len);
  
*** /home/njh/src/clamav-devel/./shared/output.c	2006-08-31 09:03:18.000000000 +0100
--- ./shared/output.c	2006-08-31 10:23:58.000000000 +0100
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
+ 
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 30,42 ****
--- 35,51 ----
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <fcntl.h>
  #include <time.h>
  #include <sys/stat.h>
  #include <errno.h>
+ #ifndef	C_WINDOWS
  #include <sys/time.h>
  #include <sys/socket.h>
+ #endif
  #if HAVE_SYS_TYPES_H
  #include <sys/types.h>
  #endif
***************
*** 122,128 ****
--- 131,139 ----
  int logg(const char *str, ...)
  {
  	va_list args, argscpy, argsout;
+ #ifdef	F_WRLCK
  	struct flock fl;
+ #endif
  	char *pt, *timestr, vbuff[1025];
  	time_t currtime;
  	struct stat sb;
***************
*** 140,146 ****
      if(logg_file) {
  	if(!logg_fd) {
  	    old_umask = umask(0037);
! 	    if((logg_fd = fopen(logg_file, "a")) == NULL) {
  		umask(old_umask);
  #ifdef CL_THREAD_SAFE
  		pthread_mutex_unlock(&logg_mutex);
--- 151,157 ----
      if(logg_file) {
  	if(!logg_fd) {
  	    old_umask = umask(0037);
! 	    if((logg_fd = fopen(logg_file, "at")) == NULL) {
  		umask(old_umask);
  #ifdef CL_THREAD_SAFE
  		pthread_mutex_unlock(&logg_mutex);
***************
*** 149,154 ****
--- 160,166 ----
  		return -1;
  	    } else umask(old_umask);
  
+ #ifdef	F_WRLCK
  	    if(logg_lock) {
  		memset(&fl, 0, sizeof(fl));
  		fl.l_type = F_WRLCK;
***************
*** 159,164 ****
--- 171,177 ----
  		    return -1;
  		}
  	    }
+ #endif
  	}
  
  	if(logg_size) {
*** /home/njh/src/clamav-devel/./shared/memory.h	2006-04-09 20:59:28.000000000 +0100
--- ./shared/memory.h	2006-10-10 11:16:24.000000000 +0100
***************
*** 25,28 ****
--- 25,33 ----
  void *mmalloc(size_t size);
  void *mcalloc(size_t nmemb, size_t size);
  
+ #ifdef	_DEBUG
+ #include <crtdbg.h>
+ #define	free(p)	_free_dbg(p, _NORMAL_BLOCK)
+ #endif
+ 
  #endif
*** /home/njh/src/clamav-devel/./shared/memory.c	2006-04-09 20:59:28.000000000 +0100
--- ./shared/memory.c	2006-10-10 22:08:26.000000000 +0100
***************
*** 19,31 ****
--- 19,41 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ 
+ #if	defined(_MSC_VER) && defined(_DEBUG)
+ #include <crtdbg.h>
+ #endif
  
  void *mmalloc(size_t size)
  {
  	void *alloc;
  
+ #if defined(_MSC_VER) && defined(_DEBUG)
+     alloc = _malloc_dbg(size, _NORMAL_BLOCK, __FILE__, __LINE__);
+ #else
      alloc = malloc(size);
+ #endif
  
      if(!alloc) {
  	fprintf(stderr, "CRITICAL: Can't allocate memory (%ld bytes).\n", (long int) size);
***************
*** 38,44 ****
--- 48,58 ----
  {
  	void *alloc;
  
+ #if defined(_MSC_VER) && defined(_DEBUG)
+     alloc = _calloc_dbg(nmemb, size, _NORMAL_BLOCK, __FILE__, __LINE__);
+ #else
      alloc = calloc(nmemb, size);
+ #endif
  
      if(!alloc) {
  	fprintf(stderr, "CRITICAL: Can't allocate memory (%ld bytes).\n", (long int) nmemb * size);
*** /home/njh/src/clamav-devel/./freshclam/manager.c	2006-12-09 08:42:20.000000000 +0000
--- ./freshclam/manager.c	2006-12-09 08:42:02.000000000 +0000
***************
*** 20,25 ****
--- 20,29 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 27,40 ****
--- 31,50 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <ctype.h>
+ #ifndef	C_WINDOWS
  #include <netinet/in.h>
  #include <netdb.h>
+ #endif
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
***************
*** 63,68 ****
--- 73,82 ----
  #define	O_BINARY	0
  #endif
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  
  static int wwwconnect(const char *server, const char *proxy, int pport, char *ip, const char *localip, int ctimeout)
  {
***************
*** 143,149 ****
--- 157,165 ----
  		else
  			port = 8080;
  
+ #ifndef	C_WINDOWS
  		endservent();
+ #endif
  #else
  		port = 8080;
  #endif
***************
*** 178,184 ****
  		break;
  	}
          logg("^Can't get information about %s: %s\n", hostpt, herr);
! 	close(socketfd);
  	return -1;
      }
  
--- 194,200 ----
  		break;
  	}
          logg("^Can't get information about %s: %s\n", hostpt, herr);
! 	closesocket(socketfd);
  	return -1;
      }
  
***************
*** 208,214 ****
  	}
      }
  
!     close(socketfd);
      return -2;
  }
  
--- 224,230 ----
  	}
      }
  
!     closesocket(socketfd);
      return -2;
  }
  
***************
*** 366,374 ****
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(write(sd, cmd, strlen(cmd)) < 0) {
  	logg("!remote_cvdhead: write failed\n");
! 	close(sd);
  	return NULL;
      }
  
--- 382,390 ----
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(send(sd, cmd, strlen(cmd), 0) < 0) {
  	logg("!remote_cvdhead: write failed\n");
! 	closesocket(sd);
  	return NULL;
      }
  
***************
*** 384,390 ****
  	if(cnt <= 0)
  	    break;
      }
!     close(sd);
  
      if(bread == -1) {
  	logg("!remote_cvdhead: Error while reading CVD header from %s\n", hostname);
--- 400,406 ----
  	if(cnt <= 0)
  	    break;
      }
!     closesocket(sd);
  
      if(bread == -1) {
  	logg("!remote_cvdhead: Error while reading CVD header from %s\n", hostname);
***************
*** 506,512 ****
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(write(sd, cmd, strlen(cmd)) < 0) {
  	logg("!getfile: Can't write to socket\n");
  	return 52;
      }
--- 522,528 ----
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(send(sd, cmd, strlen(cmd), 0) < 0) {
  	logg("!getfile: Can't write to socket\n");
  	return 52;
      }
***************
*** 544,550 ****
      /* check whether the resource actually existed or not */
      if((strstr(buffer, "HTTP/1.1 404")) != NULL || (strstr(buffer, "HTTP/1.0 404")) != NULL) { 
  	logg("!getfile: %s not found on remote server\n", srcfile);
! 	close(sd);
  	return 58;
      }
  
--- 560,566 ----
      /* check whether the resource actually existed or not */
      if((strstr(buffer, "HTTP/1.1 404")) != NULL || (strstr(buffer, "HTTP/1.0 404")) != NULL) { 
  	logg("!getfile: %s not found on remote server\n", srcfile);
! 	closesocket(sd);
  	return 58;
      }
  
***************
*** 573,579 ****
  	getcwd(currdir, sizeof(currdir));
  	logg("!getfile: Can't create new file %s in %s\n", destfile, currdir);
  	logg("Hint: The database directory must be writable for UID %d or GID %d\n", getuid(), getgid());
! 	close(sd);
  	return 57;
      }
  
--- 589,595 ----
  	getcwd(currdir, sizeof(currdir));
  	logg("!getfile: Can't create new file %s in %s\n", destfile, currdir);
  	logg("Hint: The database directory must be writable for UID %d or GID %d\n", getuid(), getgid());
! 	closesocket(sd);
  	return 57;
      }
  
***************
*** 586,592 ****
  	    logg("getfile: Can't write %d bytes to %s\n", bread, destfile);
  	    unlink(destfile);
  	    close(fd);
! 	    close(sd);
  	    return 57; /* FIXME */
  	}
  
--- 602,608 ----
  	    logg("getfile: Can't write %d bytes to %s\n", bread, destfile);
  	    unlink(destfile);
  	    close(fd);
! 	    closesocket(sd);
  	    return 57; /* FIXME */
  	}
  
***************
*** 603,609 ****
              fflush(stdout);
          }
      }
!     close(sd);
      close(fd);
  
      if(totalsize > 0)
--- 619,625 ----
              fflush(stdout);
          }
      }
!     closesocket(sd);
      close(fd);
  
      if(totalsize > 0)
***************
*** 730,736 ****
          return ret;
      }
  
!     if((fd = open(tempname, O_RDONLY)) == -1) {
  	logg("!getpatch: Can't open %s for reading\n", tempname);
          unlink(tempname);
          free(tempname);
--- 746,752 ----
          return ret;
      }
  
!     if((fd = open(tempname, O_RDONLY|O_BINARY)) == -1) {
  	logg("!getpatch: Can't open %s for reading\n", tempname);
          unlink(tempname);
          free(tempname);
***************
*** 936,945 ****
  	ret = 0;
  
  	for(i = currver + 1; i <= newver; i++) {
- 	    /*
- 	     * !!! FIXME !!!: Redesign this code to make more than one attempt
- 	     *		      to download a single cdiff.
- 	     */
  	    ret = getpatch(dbname, i, hostname, ip, localip, proxy, port, user, pass, uas, ctimeout, rtimeout);
  	    if(ret) {
  		logg("^Removing incremental directory %s\n", dbinc);
--- 952,957 ----
***************
*** 986,994 ****
  	char ipaddr[16], *dnsreply = NULL, *pt, *localip = NULL, *newver = NULL;
  	const char *arg = NULL;
  	struct cfgstruct *cpt;
- #ifdef HAVE_RESOLV_H
  	const char *dnsdbinfo;
- #endif
  
      time(&currtime);
      logg("ClamAV update process started at %s", ctime(&currtime));
--- 998,1004 ----
***************
*** 998,1004 ****
      logg("See the FAQ at http://www.clamav.net/faq.html for an explanation.\n");
  #endif
  
- #ifdef HAVE_RESOLV_H
      dnsdbinfo = cfgopt(copt, "DNSDatabaseInfo")->strarg;
  
      if(opt_check(opt, "no-dns")) {
--- 1008,1013 ----
***************
*** 1061,1067 ****
  	    logg("^Invalid DNS reply. Falling back to HTTP mode.\n");
  	}
      }
- #endif /* HAVE_RESOLV_H */
  
      if(opt_check(opt, "local-address")) {
          localip = opt_arg(opt, "local-address");
--- 1070,1075 ----
*** /home/njh/src/clamav-devel/./freshclam/execute.c	2006-08-31 08:38:17.000000000 +0100
--- ./freshclam/execute.c	2006-10-07 00:03:52.000000000 +0100
***************
*** 1,5 ****
  /*
!  *  By Per Jessen <per@computer.org>
   *
   *  This program is free software; you can redistribute it and/or modify
   *  it under the terms of the GNU General Public License as published by
--- 1,5 ----
  /*
!  *  By Per Jessen <per@computer.org> with changes by the ClamAV team
   *
   *  This program is free software; you can redistribute it and/or modify
   *  it under the terms of the GNU General Public License as published by
***************
*** 23,31 ****
--- 23,36 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <errno.h>
+ #ifdef	C_WINDOWS
+ #include <process.h>
+ #endif
  
  #include "shared/output.h"
  
***************
*** 35,40 ****
--- 40,55 ----
  
  void execute( const char *type, const char *text )
  {
+ #ifdef        C_WINDOWS
+ 	if(active_children < MAX_CHILDREN) {
+ 		if(spawnlp(P_DETACH, text, text, NULL) == -1) {
+ 			logg("^%s: couldn't execute \"%s\".\n", type, text);
+ 			return;
+ 		}
+ 		active_children++;	/* FIXME: this is never reduced */
+ 	} else
+ 		logg("^%s: already %d processes active.\n", type, active_children);
+ #else
  	pid_t pid;
  
  	if ( active_children<MAX_CHILDREN )
***************
*** 55,58 ****
--- 70,74 ----
  	{
  		logg("^%s: already %d processes active.\n", type, active_children);
  	}
+ #endif
  }
*** /home/njh/src/clamav-devel/./freshclam/nonblock.c	2006-09-15 13:11:55.000000000 +0100
--- ./freshclam/nonblock.c	2006-09-15 14:11:28.000000000 +0100
***************
*** 15,20 ****
--- 15,23 ----
   *  along with this program; if not, write to the Free Software
   *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   */
+ #ifdef	_MSC_VER
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,37 ****
  
  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <string.h>
  #include <ctype.h>
  #include <netinet/in.h>
  #include <netdb.h>
  #include <sys/types.h>
! #include <sys/socket.h>
  #include <sys/time.h>
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
--- 27,46 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <ctype.h>
+ #ifndef	C_WINDOWS
  #include <netinet/in.h>
  #include <netdb.h>
+ #endif
  #include <sys/types.h>
! /*#include <sys/socket.h>	/* in nonblock.h */
! #ifndef	C_WINDOWS
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
***************
*** 40,45 ****
--- 49,64 ----
  
  #include "shared/output.h"
  
+ #if	(!defined(EALREADY)) && (defined(WSAEALREADY))
+ #define EALREADY	WSAEALREADY
+ #endif
+ #if	(!defined(EINPROGRESS)) && (defined(WSAEINPROGRESS))
+ #define EINPROGRESS	WSAEINPROGRESS
+ #endif
+ #if	(!defined(EISCONN)) && (defined(WSAEISCONN))
+ #define EISCONN	WSAEISCONN
+ #endif
+ 
  #ifdef SO_ERROR
  
  #ifndef timercmp
***************
*** 229,234 ****
--- 248,254 ----
  
  static long nonblock_fcntl(int sock)
  {
+ #ifdef	F_GETFL
  	long fcntl_flags; /* Save fcntl() flags */
  
  	fcntl_flags = fcntl(sock, F_GETFL, 0);
***************
*** 242,257 ****
--- 262,282 ----
  	}
  
  	return fcntl_flags;
+ #else
+ 	return 0;
+ #endif
  }
  
  static void restore_fcntl(int sock, long fcntl_flags)
  {
+ #ifdef	F_SETFL
  	if (fcntl_flags != -1) {
  		if (fcntl(sock, F_SETFL, fcntl_flags)) {
  			logg("restore_fcntl: restoring: fcntl(%d, F_SETFL): errno=%d: %s\n",
  			     sock, errno, strerror(errno));
  		}
  	}
+ #endif
  }
  
  /*
*** /home/njh/src/clamav-devel/./freshclam/nonblock.h	2006-09-04 09:24:02.000000000 +0100
--- ./freshclam/nonblock.h	2006-09-04 10:35:10.000000000 +0100
***************
*** 24,30 ****
--- 24,32 ----
  #endif
  
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
+ #endif
  
  /*
  	wait_connect(): wrapper for connect(), with explicit 'secs' timeout
*** /home/njh/src/clamav-devel/./freshclam/notify.c	2006-08-31 08:53:35.000000000 +0100
--- ./freshclam/notify.c	2006-08-31 10:26:34.000000000 +0100
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
+ 
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,45 ****
--- 29,60 ----
  #ifdef BUILD_CLAMD
  
  #include <stdio.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/un.h>
  #include <netinet/in.h>
  #include <arpa/inet.h>
  #include <netdb.h>
+ #endif
  #include <string.h>
  
  #include "shared/cfgparser.h"
  #include "shared/output.h"
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  int notify(const char *cfgfile)
  {
  	char buff[20];
+ #ifndef	C_WINDOWS
  	struct sockaddr_un server;
+ #endif
          struct sockaddr_in server2;
  	struct hostent *he;
  	struct cfgstruct *copt, *cpt;
***************
*** 52,57 ****
--- 67,73 ----
  	return 1;
      }
  
+ #ifndef	C_WINDOWS
      if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
  	socktype = "UNIX";
  	server.sun_family = AF_UNIX;
***************
*** 64,76 ****
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server, sizeof(struct sockaddr_un)) < 0) {
! 	    close(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd through %s\n", cpt->strarg);
  	    perror("connect()");
  	    return 1;
  	}
  
!     } else if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
  
  	socktype = "TCP";
  #ifdef PF_INET
--- 80,94 ----
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server, sizeof(struct sockaddr_un)) < 0) {
! 	    closesocket(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd through %s\n", cpt->strarg);
  	    perror("connect()");
  	    return 1;
  	}
  
!     } else
! #endif
!     if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
  
  	socktype = "TCP";
  #ifdef PF_INET
***************
*** 98,104 ****
  
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    close(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd on %s:%d\n",
  		    inet_ntoa(server2.sin_addr), ntohs(server2.sin_port));
  	    perror("connect()");
--- 116,122 ----
  
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    closesocket(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd on %s:%d\n",
  		    inet_ntoa(server2.sin_addr), ntohs(server2.sin_port));
  	    perror("connect()");
***************
*** 110,132 ****
  	return 1;
      }
  
!     if(write(sockd, "RELOAD", 6) < 0) {
  	logg("^Clamd was NOT notified: Could not write to %s socket\n", socktype);
  	perror("write()");
! 	close(sockd);
  	return 1;
      }
  
      /* TODO: Handle timeout */
      memset(buff, 0, sizeof(buff));
!     if((bread = read(sockd, buff, sizeof(buff))) > 0)
  	if(!strstr(buff, "RELOADING")) {
  	    logg("^Clamd was NOT notified: Unknown answer from clamd: '%s'\n", buff);
! 	    close(sockd);
  	    return 1;
  	}
  
!     close(sockd);
      logg("Clamd successfully notified about the update.\n");
      return 0;
  }
--- 128,150 ----
  	return 1;
      }
  
!     if(send(sockd, "RELOAD", 6, 0) < 0) {
  	logg("^Clamd was NOT notified: Could not write to %s socket\n", socktype);
  	perror("write()");
! 	closesocket(sockd);
  	return 1;
      }
  
      /* TODO: Handle timeout */
      memset(buff, 0, sizeof(buff));
!     if((bread = recv(sockd, buff, sizeof(buff), 0)) > 0)
  	if(!strstr(buff, "RELOADING")) {
  	    logg("^Clamd was NOT notified: Unknown answer from clamd: '%s'\n", buff);
! 	    closesocket(sockd);
  	    return 1;
  	}
  
!     closesocket(sockd);
      logg("Clamd successfully notified about the update.\n");
      return 0;
  }
*** /home/njh/src/clamav-devel/./clamd/localserver.c	2006-12-22 09:09:48.000000000 +0000
--- ./clamd/localserver.c	2006-12-22 18:35:14.000000000 +0000
***************
*** 24,32 ****
--- 24,36 ----
  #include <stdio.h>
  #include <string.h>
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
+ #endif
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <sys/un.h>
+ #endif
  #include <errno.h>
  #ifdef HAVE_UNISTD_H
  #include <unistd.h>
*** /home/njh/src/clamav-devel/./clamdscan/clamdscan.c	2006-10-29 17:09:34.000000000 +0000
--- ./clamdscan/clamdscan.c	2006-10-29 14:50:54.000000000 +0000
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+  
+ #ifdef	_MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,31 ****
--- 29,44 ----
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifdef	C_WINDOWS
+ #ifdef	CL_THREAD_SAFE
+ #include <pthread.h>
+ #endif
+ #else
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <signal.h>
  
***************
*** 49,62 ****
  {
  	int ds, dms, ret, infected;
  	struct timeval t1, t2;
  	struct timezone tz;
  	time_t starttime;
  	struct optstruct *opt;
  	char *clamdscan_accepted[] = { "help", "version", "verbose", "quiet",
  				  "stdout", "log", "move", "copy", "remove",
  				  "config-file", "no-summary",
  				  "disable-summary", NULL };
! 
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, clamdscan_accepted);
      if(!opt) {
--- 62,83 ----
  {
  	int ds, dms, ret, infected;
  	struct timeval t1, t2;
+ #ifndef	C_WINDOWS
  	struct timezone tz;
+ #endif
  	time_t starttime;
  	struct optstruct *opt;
  	char *clamdscan_accepted[] = { "help", "version", "verbose", "quiet",
  				  "stdout", "log", "move", "copy", "remove",
  				  "config-file", "no-summary",
  				  "disable-summary", NULL };
! 				  
! #ifdef	C_WINDOWS
! 	if(!pthread_win32_process_attach_np()) {
! 		mprintf("!Can't start the win32 pthreads layer\n");
! 		return 1;
! 	}
! #endif
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, clamdscan_accepted);
      if(!opt) {
***************
*** 105,117 ****
      time(&starttime);
      /* ctime() does \n, but I need it once more */
  
!     gettimeofday(&t1, &tz);
  
      ret = client(opt, &infected);
  
      /* TODO: Implement STATUS in clamd */
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
  	gettimeofday(&t2, &tz);
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
--- 126,146 ----
      time(&starttime);
      /* ctime() does \n, but I need it once more */
  
! #ifdef	C_WINDOWS
! 	gettimeofday(&t1, NULL);
! #else
! 	gettimeofday(&t1, &tz);
! #endif
  
      ret = client(opt, &infected);
  
      /* TODO: Implement STATUS in clamd */
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
+ #ifdef	C_WINDOWS
+ 	gettimeofday(&t2, NULL);
+ #else
  	gettimeofday(&t2, &tz);
+ #endif
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
***************
*** 128,133 ****
--- 157,171 ----
      }
  
      opt_free(opt);
+ 
+ #ifdef	C_WINDOWS
+ 	WSACleanup();
+ 	if(!pthread_win32_process_detach_np()) {
+ 		mprintf("!Can't stop the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
      exit(ret);
  }
  
*** /home/njh/src/clamav-devel/./clamdscan/client.c	2006-10-29 17:08:37.000000000 +0000
--- ./clamdscan/client.c	2006-10-29 17:48:46.000000000 +0000
***************
*** 16,37 ****
--- 16,44 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef	_MSC_VER
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
  #endif
  
  #include <stdio.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/un.h>
  #include <netinet/in.h>
  #include <arpa/inet.h>
  #include <netdb.h>
  #include <utime.h>
+ #endif
  #include <errno.h>
  
  #ifdef HAVE_SYS_UIO_H
***************
*** 54,65 ****
--- 61,140 ----
  # define SOCKET_INET	AF_INET
  #endif
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  /* #define ENABLE_FD_PASSING	    FIXME: Doesn't work yet */
  
  void move_infected(const char *filename, const struct optstruct *opt);
  int notremoved = 0, notmoved = 0;
  static int ncore = 0;
  
+ #ifdef	C_WINDOWS
+ static  int     get_a_line(int sockd, char *buf, size_t len);
+ 
+ static int
+ dsresult(int sockd, const struct optstruct *opt)
+ {
+ 	char buff[BUFSIZ], *pt;
+ 	int infected = 0, waserror = 0;
+ 
+ 	while(get_a_line(sockd, buff, sizeof(buff))) {
+ 		if(strstr(buff, "FOUND\n")) {
+ 			infected++;
+ 			logg("%s", buff);
+ 			if(opt_check(opt, "move") || opt_check(opt, "copy")) {
+ 				/* filename: Virus FOUND */
+ 				if((pt = strrchr(buff, ':'))) {
+ 					*pt = 0;
+ 					move_infected(buff, opt);
+ 				} else
+ 					mprintf("@Broken data format. File not %s.\n", opt_check(opt, "move") ? "moved" : "copied");
+ 			} else if(opt_check(opt, "remove")) {
+ 				if(!(pt = strrchr(buff, ':')))
+ 					mprintf("@Broken data format. File not removed.\n");
+ 				else {
+ 					*pt = 0;
+ 					if(unlink(buff)) {
+ 						mprintf("%s: Can't remove.\n", buff);
+ 						logg("%s: Can't remove.\n", buff);
+ 						notremoved++;
+ 					} else {
+ 						mprintf("%s: Removed.\n", buff);
+ 						logg("%s: Removed.\n", buff);
+ 					}
+ 				}
+ 			}
+ 		}
+ 
+ 		if(strstr(buff, "ERROR\n")) {
+ 			logg("%s", buff);
+ 			waserror = 1;
+ 		}
+ 	}
+ 
+ 	return infected ? infected : (waserror ? -1 : 0);
+ }
+ 
+ static int
+ get_a_line(int sockd, char *buf, size_t len)
+ {
+ 	char *ptr;
+ 
+ 	for(ptr = buf; ptr < &buf[len]; ptr++) {
+ 		/* FIXME: very inefficient to call recv so many times */
+ 		if(recv(sockd, ptr, sizeof(char), 0) <= 0)
+ 			return 0;
+ 		if(*ptr == '\n') {
+ 			*++ptr = '\0';
+ 			return 1;
+ 		}
+ 	}
+ 	return 1;
+ }
+ 
+ #else
  static int dsresult(int sockd, const struct optstruct *opt)
  {
  	int infected = 0, waserror = 0;
***************
*** 67,76 ****
  	FILE *fd;
  
  
! #ifndef C_OS2
      if((fd = fdopen(dup(sockd), "r")) == NULL) {
! #else /* FIXME: accoriding to YD OS/2 does not support dup() for sockets */
!     if((fd = fdopen(sockd, "r")) == NULL) {
  #endif
  	logg("^Can't open descriptor for reading.\n");
  	return -1;
--- 142,151 ----
  	FILE *fd;
  
  
! #ifndef (C_OS2)
      if((fd = fdopen(dup(sockd), "r")) == NULL) {
! #else /* FIXME: according to YD OS/2 does not support dup() for sockets */
!     if((fd = fdopen(sockd, "rb")) == NULL) {
  #endif
  	logg("^Can't open descriptor for reading.\n");
  	return -1;
***************
*** 80,92 ****
  	if(strstr(buff, "FOUND\n")) {
  	    infected++;
  	    logg("%s", buff);
! 	    if(opt_check(opt, "move") || opt_check(opt, "copy")) {
  		/* filename: Virus FOUND */
  		if((pt = strrchr(buff, ':'))) {
  		    *pt = 0;
  		    move_infected(buff, opt);
  		} else {
! 		    mprintf("@Broken data format. File not %s.\n", opt_check(opt, "move") ? "moved" : "copied");
  		}
  
  	    } else if(opt_check(opt, "remove")) {
--- 155,167 ----
  	if(strstr(buff, "FOUND\n")) {
  	    infected++;
  	    logg("%s", buff);
! 	    if(opt_check(opt, "move")) {
  		/* filename: Virus FOUND */
  		if((pt = strrchr(buff, ':'))) {
  		    *pt = 0;
  		    move_infected(buff, opt);
  		} else {
! 		    mprintf("@Broken data format. File not moved.\n");
  		}
  
  	    } else if(opt_check(opt, "remove")) {
***************
*** 118,123 ****
--- 193,199 ----
  
      return infected ? infected : (waserror ? -1 : 0);
  }
+ #endif	/* C_WINDOWS */
  
  static int dsfile(int sockd, const char *scantype, const char *filename, const struct optstruct *opt)
  {
***************
*** 128,134 ****
      scancmd = mcalloc(strlen(filename) + 20, sizeof(char));
      sprintf(scancmd, "%s %s", scantype, filename);
  
!     if(write(sockd, scancmd, strlen(scancmd)) <= 0) {
  	logg("^Can't write to the socket.\n");
  	free(scancmd);
  	return -1;
--- 204,210 ----
      scancmd = mcalloc(strlen(filename) + 20, sizeof(char));
      sprintf(scancmd, "%s %s", scantype, filename);
  
!     if(send(sockd, scancmd, strlen(scancmd), 0) <= 0) {
  	logg("^Can't write to the socket.\n");
  	free(scancmd);
  	return -1;
***************
*** 202,208 ****
  	char buff[4096], *pt;
  
  
!     if(write(sockd, "STREAM", 6) <= 0) {
  	logg("^Can't write to the socket.\n");
  	return 2;
      }
--- 278,284 ----
  	char buff[4096], *pt;
  
  
!     if(send(sockd, "STREAM", 6, 0) <= 0) {
  	logg("^Can't write to the socket.\n");
  	return 2;
      }
***************
*** 312,318 ****
--- 388,396 ----
  
  static int dconnect(const struct optstruct *opt)
  {
+ #ifndef	C_WINDOWS
  	struct sockaddr_un server;
+ #endif
  	struct sockaddr_in server2;
  	struct hostent *he;
  	struct cfgstruct *copt, *cpt;
***************
*** 328,341 ****
  	return -1;
      }
  
      memset((char *) &server, 0, sizeof(server));
      memset((char *) &server2, 0, sizeof(server2));
  
      /* Set default address to connect to */
      server2.sin_addr.s_addr = inet_addr("127.0.0.1");    
  
-     if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
  
  	server.sun_family = AF_UNIX;
  	strncpy(server.sun_path, cpt->strarg, sizeof(server.sun_path));
  
--- 406,424 ----
  	return -1;
      }
  
+ #ifndef	C_WINDOWS
      memset((char *) &server, 0, sizeof(server));
+ #endif
      memset((char *) &server2, 0, sizeof(server2));
  
      /* Set default address to connect to */
      server2.sin_addr.s_addr = inet_addr("127.0.0.1");    
  
  
+     if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
+ #ifdef	C_WINDOWS
+ 	logg("^LocalSocket is not supported under Windows");
+ #else
  	server.sun_family = AF_UNIX;
  	strncpy(server.sun_path, cpt->strarg, sizeof(server.sun_path));
  
***************
*** 353,360 ****
--- 436,452 ----
  	    freecfg(copt);
  	    return -1;
  	}
+ #endif
  
      } else if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
+ #ifdef  C_WINDOWS
+                 WSADATA wsaData;
+ 
+                 if(WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR) {
+                         logg("!Error at WSAStartup(): %d\n", WSAGetLastError());
+                         return -1;
+                 }
+ #endif
  
  	if((sockd = socket(SOCKET_INET, SOCK_STREAM, 0)) < 0) {
  	    perror("socket()");
***************
*** 368,374 ****
  
  	if((cpt = cfgopt(copt, "TCPAddr"))->enabled) {
  	    if ((he = gethostbyname(cpt->strarg)) == 0) {
! 		close(sockd);
  		perror("gethostbyname()");
  		logg("^Can't lookup clamd hostname.\n");
  		freecfg(copt);
--- 460,466 ----
  
  	if((cpt = cfgopt(copt, "TCPAddr"))->enabled) {
  	    if ((he = gethostbyname(cpt->strarg)) == 0) {
! 		closesocket(sockd);
  		perror("gethostbyname()");
  		logg("^Can't lookup clamd hostname.\n");
  		freecfg(copt);
***************
*** 378,384 ****
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    close(sockd);
  	    perror("connect()");
  	    logg("^Can't connect to clamd.\n");
  	    freecfg(copt);
--- 470,476 ----
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    closesocket(sockd);
  	    perror("connect()");
  	    logg("^Can't connect to clamd.\n");
  	    freecfg(copt);
***************
*** 433,439 ****
  	else
  	    errors++;
  
! 	close(sockd);
  
  #if defined(ENABLE_FD_PASSING) && defined(HAVE_SENDMSG) && (defined(HAVE_ACCRIGHTS_IN_MSGHDR) || defined(HAVE_CONTROL_IN_MSGHDR)) && !defined(C_CYGWIN)
      } else if(!strcmp(opt->filename, "-")) { /* scan data from stdin */
--- 525,531 ----
  	else
  	    errors++;
  
! 	closesocket(sockd);
  
  #if defined(ENABLE_FD_PASSING) && defined(HAVE_SENDMSG) && (defined(HAVE_ACCRIGHTS_IN_MSGHDR) || defined(HAVE_CONTROL_IN_MSGHDR)) && !defined(C_CYGWIN)
      } else if(!strcmp(opt->filename, "-")) { /* scan data from stdin */
***************
*** 494,500 ****
  			else
  			    errors++;
  
! 			close(sockd);
  			break;
  
  		    default:
--- 586,592 ----
  			else
  			    errors++;
  
! 			closesocket(sockd);
  			break;
  
  		    default:
***************
*** 516,526 ****
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
  	int moveflag = opt_check(opt, "move");
  	struct utimbuf ubuf;
  
  
      if((moveflag && !(movedir = opt_arg(opt, "move"))) ||
!         (!moveflag && !(movedir = opt_arg(opt, "copy")))) {
          /* Should never reach here */
          logg("^opt_arg() returned NULL\n");
          notmoved++;
--- 608,620 ----
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
  	int moveflag = opt_check(opt, "move");
+ #ifndef	C_WINDOWS
  	struct utimbuf ubuf;
+ #endif
  
  
      if((moveflag && !(movedir = opt_arg(opt, "move"))) ||
!        (!moveflag && !(movedir = opt_arg(opt, "copy")))) {
          /* Should never reach here */
          logg("^opt_arg() returned NULL\n");
          notmoved++;
***************
*** 591,597 ****
         }
      }
  
!     if(!moveflag || rename(filename, movefilename) == -1) {
  	if(filecopy(filename, movefilename) == -1) {
  	    logg("^cannot %s '%s' to '%s': %s\n", (moveflag) ? "move" : "copy", filename, movefilename, strerror(errno));
  	    notmoved++;
--- 685,691 ----
         }
      }
  
!     if(rename(filename, movefilename) == -1) {
  	if(filecopy(filename, movefilename) == -1) {
  	    logg("^cannot %s '%s' to '%s': %s\n", (moveflag) ? "move" : "copy", filename, movefilename, strerror(errno));
  	    notmoved++;
***************
*** 602,610 ****
--- 696,706 ----
  	chmod(movefilename, fstat.st_mode);
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  
+ #ifndef	C_WINDOWS
  	ubuf.actime = fstat.st_atime;
  	ubuf.modtime = fstat.st_mtime;
  	utime(movefilename, &ubuf);
+ #endif
  
  	if(moveflag && unlink(filename)) {
  	    logg("^cannot unlink '%s': %s\n", filename, strerror(errno));
***************
*** 614,620 ****
  	}
      }
  
!     logg("%s: %s to '%s'\n", (moveflag)?"moved":"copied", filename, movefilename);
  
      free(movefilename);
  }
--- 710,716 ----
  	}
      }
  
!     logg("%s: %s to '%s'\n", (moveflag) ? "moved" : "copied", filename, movefilename);
  
      free(movefilename);
  }
*** /home/njh/src/clamav-devel/./clamconf/clamconf.c	2006-09-15 13:38:59.000000000 +0100
--- ./clamconf/clamconf.c	2006-09-15 14:38:42.000000000 +0100
***************
*** 26,32 ****
--- 26,34 ----
  #include <string.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "cfgparser.h"
  #define _GNU_SOURCE
*** /home/njh/src/clamav-devel/./sigtool/sigtool.c	2006-12-22 08:28:52.000000000 +0000
--- ./sigtool/sigtool.c	2006-11-05 10:16:14.000000000 +0000
***************
*** 1667,1672 ****
--- 1667,1673 ----
      mprintf("    --list-sigs[=FILE]     -l[FILE]        List signature names\n");
      mprintf("    --vba=FILE                             Extract VBA/Word6 macro code\n");
      mprintf("    --vba-hex=FILE                         Extract Word6 macro code with hex values\n");
+     mprintf("    --vba-hex=FILE                         Extract Word6 macro code with hex values\n");
      mprintf("    --diff=OLD NEW         -d OLD NEW      Create diff for OLD and NEW CVDs\n");
      mprintf("    --run-cdiff=FILE       -r FILE         Execute update script FILE in cwd\n");
      mprintf("    --verify-cdiff=DIFF CVD/INCDIR         Verify DIFF against CVD\n");
