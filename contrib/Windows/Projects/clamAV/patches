*** /home/njh/src/clamav-devel/./libclamav/htmlnorm.c	2006-09-20 11:20:55.000000000 +0100
--- ./libclamav/htmlnorm.c	2006-09-20 11:43:42.000000000 +0100
***************
*** 22,29 ****
--- 22,35 ----
   *  MA 02110-1301, USA.
   */
  
+ #if HAVE_CONFIG_H
+ #include "clamav-config.h"
+ #endif
+ 
  #include <stdio.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
***************
*** 32,41 ****
  #include <stdio.h>
  #include <ctype.h>
  
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
  #if HAVE_MMAP
  #if HAVE_SYS_MMAN_H
  #include <sys/mman.h>
--- 38,43 ----
*** /home/njh/src/clamav-devel/./libclamav/cvd.c	2006-07-25 17:52:00.000000000 +0100
--- ./libclamav/cvd.c	2006-09-02 21:10:50.000000000 +0100
***************
*** 29,36 ****
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <unistd.h>
! #include <zlib.h>
  #include <time.h>
  
  #include "clamav.h"
--- 29,38 ----
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
! #endif
! #include "zlib.h"
  #include <time.h>
  
  #include "clamav.h"
***************
*** 53,59 ****
      cli_dbgmsg("in cli_untgz()\n");
  
      if((infile = gzdopen(fd, "rb")) == NULL) {
! 	cli_errmsg("Can't gzdopen() descriptor %d\n", fd);
  	return -1;
      }
  
--- 55,61 ----
      cli_dbgmsg("in cli_untgz()\n");
  
      if((infile = gzdopen(fd, "rb")) == NULL) {
! 	cli_errmsg("Can't gzdopen() descriptor %d, errno = %d\n", fd, errno);
  	return -1;
      }
  
***************
*** 403,415 ****
      }
  
      if(cli_untgz(fd, dir)) {
  	cli_errmsg("cli_cvdload(): Can't unpack CVD file.\n");
  	free(dir);
  	return CL_ECVDEXTR;
      }
- 
      /* load extracted directory */
      ret = cl_load(dir, engine, signo, options);
  
      cli_rmdirs(dir);
      free(dir);
--- 405,419 ----
      }
  
      if(cli_untgz(fd, dir)) {
+ 		close(fd);
  	cli_errmsg("cli_cvdload(): Can't unpack CVD file.\n");
  	free(dir);
  	return CL_ECVDEXTR;
      }
      /* load extracted directory */
      ret = cl_load(dir, engine, signo, options);
+ 	if(ret != 0)
+ 		close(fd);
  
      cli_rmdirs(dir);
      free(dir);
*** /home/njh/src/clamav-devel/./libclamav/blob.c	2006-09-27 11:30:27.000000000 +0100
--- ./libclamav/blob.c	2006-09-27 11:30:16.000000000 +0100
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 16,22 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
*** /home/njh/src/clamav-devel/./libclamav/vba_extract.c	2006-08-11 20:39:24.000000000 +0100
--- ./libclamav/vba_extract.c	2006-09-07 08:31:36.000000000 +0100
***************
*** 23,29 ****
--- 23,31 ----
  
  #include <stdio.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
***************
*** 264,270 ****
  		return NULL;
  	}
  	sprintf(fullname, "%s/_VBA_PROJECT", dir);
!         fd = open(fullname, O_RDONLY);
  
          if (fd == -1) {
                  cli_dbgmsg("Can't open %s\n", fullname);
--- 266,272 ----
  		return NULL;
  	}
  	sprintf(fullname, "%s/_VBA_PROJECT", dir);
!         fd = open(fullname, O_RDONLY|O_BINARY);
  
          if (fd == -1) {
                  cli_dbgmsg("Can't open %s\n", fullname);
***************
*** 744,750 ****
  	}
  	fullname = cli_malloc(strlen(dir) + 18);
  	sprintf(fullname, "%s/_clam_ole_object", dir);
! 	ofd = open(fullname, O_RDWR|O_CREAT|O_TRUNC, 0600);
  	free(fullname);
          if (ofd < 0) {
  		return -1;
--- 746,752 ----
  	}
  	fullname = cli_malloc(strlen(dir) + 18);
  	sprintf(fullname, "%s/_clam_ole_object", dir);
! 	ofd = open(fullname, O_RDWR|O_CREAT|O_TRUNC|O_BINARY, 0600);
  	free(fullname);
          if (ofd < 0) {
  		return -1;
***************
*** 814,820 ****
  	}
  	sprintf(fullname, "%s/ppt%.8lx.doc", dir, lseek(fd, 0, SEEK_CUR));
  	
! 	ofd = open(fullname, O_WRONLY|O_CREAT|O_TRUNC, 0600);
  	free(fullname);
          if (ofd == -1) {
                  cli_dbgmsg("ppt_unlzw Open outfile failed\n");
--- 816,822 ----
  	}
  	sprintf(fullname, "%s/ppt%.8lx.doc", dir, lseek(fd, 0, SEEK_CUR));
  	
! 	ofd = open(fullname, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, 0600);
  	free(fullname);
          if (ofd == -1) {
                  cli_dbgmsg("ppt_unlzw Open outfile failed\n");
***************
*** 946,952 ****
  		return NULL;
  	}
  	sprintf(fullname, "%s/PowerPoint Document", dir);
! 	fd = open(fullname, O_RDONLY);
  	free(fullname);
  	if (fd == -1) {
  		cli_dbgmsg("Open  PowerPoint Document failed\n");
--- 948,954 ----
  		return NULL;
  	}
  	sprintf(fullname, "%s/PowerPoint Document", dir);
! 	fd = open(fullname, O_RDONLY|O_BINARY);
  	free(fullname);
  	if (fd == -1) {
  		cli_dbgmsg("Open  PowerPoint Document failed\n");
***************
*** 1529,1535 ****
  		return NULL;
  	}
  	sprintf(fullname, "%s/WordDocument", dir);
! 	fd = open(fullname, O_RDONLY);
  	free(fullname);
  	if (fd == -1) {
  		cli_dbgmsg("Open WordDocument failed\n");
--- 1531,1537 ----
  		return NULL;
  	}
  	sprintf(fullname, "%s/WordDocument", dir);
! 	fd = open(fullname, O_RDONLY|O_BINARY);
  	free(fullname);
  	if (fd == -1) {
  		cli_dbgmsg("Open WordDocument failed\n");
*** /home/njh/src/clamav-devel/./libclamav/unrar/unrarfilter.c	2006-09-04 09:17:48.000000000 +0100
--- ./libclamav/unrar/unrarfilter.c	2006-09-04 09:19:02.000000000 +0100
***************
*** 20,27 ****
--- 20,33 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #if HAVE_CONFIG_H
+ #include "clamav-config.h"
+ #endif
  
+ 
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "unrar.h"
  #include "unrarfilter.h"
*** /home/njh/src/clamav-devel/./libclamav/unrar/unrar.h	2006-09-20 11:34:00.000000000 +0100
--- ./libclamav/unrar/unrar.h	2006-09-20 11:33:04.000000000 +0100
***************
*** 25,31 ****
--- 25,33 ----
  #define UNRAR_H 1
  
  #include <sys/types.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  /*	#define RAR_DEBUG */
  /*	#define RAR_HIGH_DEBUG */
***************
*** 108,113 ****
--- 110,123 ----
  	unsigned char mark[SIZEOF_MARKHEAD];
  } mark_header_t;
  
+ #ifndef HAVE_ATTRIB_PACKED
+ #define __attribute__(x)
+ #endif
+ 
+ #ifdef HAVE_PRAGMA_PACK
+ #pragma pack(1)
+ #endif
+ 
  typedef struct main_header_tag
  {
  	uint16_t head_crc __attribute__ ((packed));
*** /home/njh/src/clamav-devel/./libclamav/unrar/unrarvm.c	2006-09-20 11:34:00.000000000 +0100
--- ./libclamav/unrar/unrarvm.c	2006-09-20 11:33:04.000000000 +0100
***************
*** 319,325 ****
  {
  	int in_addr=bit_pos/8;
  	int in_bit=bit_pos&7;
! 	unsigned int bit_field=(uint)data[in_addr++];
  	bit_field|=(unsigned int)data[in_addr++] << 8;
  	bit_field|=(unsigned int)data[in_addr++] << 16;
  	bit_field|=(unsigned int)data[in_addr] << 24;
--- 319,325 ----
  {
  	int in_addr=bit_pos/8;
  	int in_bit=bit_pos&7;
! 	unsigned int bit_field=(unsigned int)data[in_addr++];
  	bit_field|=(unsigned int)data[in_addr++] << 8;
  	bit_field|=(unsigned int)data[in_addr++] << 16;
  	bit_field|=(unsigned int)data[in_addr] << 24;
*** /home/njh/src/clamav-devel/./libclamav/unrar/unrar15.c	2006-04-09 20:59:28.000000000 +0100
--- ./libclamav/unrar/unrar15.c	2006-07-26 18:41:24.000000000 +0100
***************
*** 503,506 ****
--- 503,507 ----
  		}
  	}
  	unp_write_buf_old(unpack_data);
+ 	return TRUE;
  }
*** /home/njh/src/clamav-devel/./libclamav/mspack/mspack.h	2006-04-09 20:59:28.000000000 +0100
--- ./libclamav/mspack/mspack.h	2006-07-25 17:42:28.000000000 +0100
***************
*** 127,133 ****
--- 127,135 ----
  #endif
  
  #include <sys/types.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  /**
   * System self-test function, to ensure both library and calling program
*** /home/njh/src/clamav-devel/./libclamav/mspack/system.h	2005-07-20 02:55:58.000000000 +0100
--- ./libclamav/mspack/system.h	2006-07-26 18:38:06.000000000 +0100
***************
*** 40,45 ****
--- 40,46 ----
  extern int mspack_valid_system(struct mspack_system *sys);
  
  /* inline memcmp() */
+ #ifndef	C_WINDOWS
  static inline int memcmp(const void *s1, const void *s2, size_t n) {
    unsigned char *c1 = (unsigned char *) s1;
    unsigned char *c2 = (unsigned char *) s2;
***************
*** 54,58 ****
--- 55,60 ----
    while (*e) e++;
    return e - s;
  }
+ #endif
  
  #endif
*** /home/njh/src/clamav-devel/./libclamav/others.h	2006-05-30 14:47:03.000000000 +0100
--- ./libclamav/others.h	2006-07-25 17:14:30.000000000 +0100
***************
*** 100,107 ****
--- 100,112 ----
  #define ROL(a,b) a = ( a << (b % (sizeof(a)<<3) ))  |  (a >> (  (sizeof(a)<<3)  -  (b % (sizeof(a)<<3 )) ) )
  #define ROR(a,b) a = ( a >> (b % (sizeof(a)<<3) ))  |  (a << (  (sizeof(a)<<3)  -  (b % (sizeof(a)<<3 )) ) )
  
+ #ifndef	FALSE
  #define FALSE (0)
+ #endif
+ 
+ #ifndef	TRUE
  #define TRUE (1)
+ #endif
  
  #ifndef MIN
  #define MIN(a, b)	(((a) < (b)) ? (a) : (b))
*** /home/njh/src/clamav-devel/./libclamav/regex_list.c	2006-09-26 19:55:36.000000000 +0100
--- ./libclamav/regex_list.c	2006-09-26 19:54:00.000000000 +0100
***************
*** 19,27 ****
   *  MA 02110-1301, USA.
   *
   *  $Log: patches,v $
   *  Revision 1.11  2006/09/27 14:28:13  njh
   *  Sync with latest CVS
   *
-  *  Revision 1.5  2006/09/26 18:55:36  njh
-  *  Fixed portability issues
-  *
   *  Revision 1.4  2006/09/25 18:27:00  njh
   *  Fix handling of escaped characters
   *
--- 19,24 ----
*** /home/njh/src/clamav-devel/./libclamav/readdb.c	2006-09-27 10:11:32.000000000 +0100
--- ./libclamav/readdb.c	2006-09-27 10:12:02.000000000 +0100
***************
*** 25,40 ****
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
  #include <unistd.h>
  #include <dirent.h>
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <sys/param.h>
  #include <fcntl.h>
  
  #include "clamav.h"
  #include "cvd.h"
! #include "strings.h"
  #include "matcher-ac.h"
  #include "matcher-bm.h"
  #include "others.h"
--- 25,48 ----
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifndef	C_WINDOWS
  #include <dirent.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_SYS_PARAM_H
  #include <sys/param.h>
+ #endif
  #include <fcntl.h>
  
  #include "clamav.h"
  #include "cvd.h"
! #ifdef	HAVE_STRINGS_H
! #include <strings.h>
! #endif
  #include "matcher-ac.h"
  #include "matcher-bm.h"
  #include "others.h"
***************
*** 42,49 ****
--- 50,59 ----
  #include "defaults.h"
  
  #ifdef CL_EXPERIMENTAL
+ /*
  #include "phish_whitelist.h"
  #include "phish_domaincheck_db.h"
+ */
  #endif
  
  
***************
*** 1117,1122 ****
--- 1127,1133 ----
  #endif
  	    skipped = 1;
  #ifdef CL_EXPERIMENTAL
+ /*
      } else if(cli_strbcasestr(filename, ".wdb")) {
  	if(!(options & CL_SCAN_NOPHISHING))
  	    ret = cli_loadwdb(fd, options);
***************
*** 1127,1132 ****
--- 1138,1144 ----
  	    ret = cli_loadpdb(fd, options);
  	else
  	    skipped = 1;
+ */
  #endif
      } else {
  	cli_dbgmsg("cli_load: unknown extension - assuming old database format\n");
***************
*** 1178,1184 ****
  #else
      while((dent = readdir(dd))) {
  #endif
! #ifndef C_INTERIX
  	if(dent->d_ino)
  #endif
  	{
--- 1190,1196 ----
  #else
      while((dent = readdir(dd))) {
  #endif
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	if(dent->d_ino)
  #endif
  	{
***************
*** 1194,1201 ****
--- 1206,1215 ----
  	     cli_strbcasestr(dent->d_name, ".zmd")  ||
  	     cli_strbcasestr(dent->d_name, ".rmd")  ||
  #ifdef CL_EXPERIMENTAL
+ /*
  	     cli_strbcasestr(dent->d_name, ".pdb")  ||
  	     cli_strbcasestr(dent->d_name, ".wdb")  ||
+ */
  #endif
  	     cli_strbcasestr(dent->d_name, ".hw")  ||
  	     cli_strbcasestr(dent->d_name, ".inc")  ||
***************
*** 1299,1305 ****
  #else
      while((dent = readdir(dd))) {
  #endif
! #ifndef C_INTERIX
  	if(dent->d_ino)
  #endif
  	{
--- 1313,1319 ----
  #else
      while((dent = readdir(dd))) {
  #endif
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	if(dent->d_ino)
  #endif
  	{
***************
*** 1315,1322 ****
--- 1329,1338 ----
  	    cli_strbcasestr(dent->d_name, ".zmd")  || 
  	    cli_strbcasestr(dent->d_name, ".rmd")  || 
  #ifdef CL_EXPERIMENTAL
+ /*
  	    cli_strbcasestr(dent->d_name, ".pdb")  ||
  	    cli_strbcasestr(dent->d_name, ".wdb")  ||
+ */
  #endif
  	    cli_strbcasestr(dent->d_name, ".hw")   ||
  	    cli_strbcasestr(dent->d_name, ".inc")   ||
***************
*** 1378,1384 ****
  #else
      while((dent = readdir(dd))) {
  #endif
! #ifndef C_INTERIX
  	if(dent->d_ino)
  #endif
  	{
--- 1394,1400 ----
  #else
      while((dent = readdir(dd))) {
  #endif
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	if(dent->d_ino)
  #endif
  	{
***************
*** 1394,1401 ****
--- 1410,1419 ----
  	    cli_strbcasestr(dent->d_name, ".zmd")  || 
  	    cli_strbcasestr(dent->d_name, ".rmd")  || 
  #ifdef CL_EXPERIMENTAL
+ /*
  	    cli_strbcasestr(dent->d_name, ".pdb")  ||
  	    cli_strbcasestr(dent->d_name, ".wdb")  ||
+ */
  #endif
  	    cli_strbcasestr(dent->d_name, ".hw")   ||
  	    cli_strbcasestr(dent->d_name, ".inc")   ||
*** /home/njh/src/clamav-devel/./libclamav/elf.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/elf.c	2006-07-26 09:48:52.000000000 +0100
***************
*** 27,33 ****
--- 27,35 ----
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <time.h>
  
  #include "cltypes.h"
*** /home/njh/src/clamav-devel/./libclamav/matcher.c	2006-06-22 07:59:53.000000000 +0100
--- ./libclamav/matcher.c	2006-07-28 16:29:48.000000000 +0100
***************
*** 25,31 ****
--- 25,33 ----
  #include <ctype.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "clamav.h"
  #include "others.h"
***************
*** 396,402 ****
  	}
  
  	if(fileoff != (unsigned long int) off) {
! 	    cli_dbgmsg("Virus offset: %d, expected: %d (%s)\n", fileoff, off, virname);
  	    return 0;
  	}
      }
--- 398,404 ----
  	}
  
  	if(fileoff != (unsigned long int) off) {
! 	    cli_dbgmsg("Virus offset: %ld, expected: %ld (%s)\n", fileoff, off, virname);
  	    return 0;
  	}
      }
*** /home/njh/src/clamav-devel/./libclamav/matcher-ac.c	2006-07-28 18:51:14.000000000 +0100
--- ./libclamav/matcher-ac.c	2006-07-28 20:50:36.000000000 +0100
***************
*** 29,35 ****
--- 29,37 ----
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "clamav.h"
  #include "others.h"
*** /home/njh/src/clamav-devel/./libclamav/binhex.c	2006-07-31 10:19:52.000000000 +0100
--- ./libclamav/binhex.c	2006-08-11 21:05:12.000000000 +0100
***************
*** 18,25 ****
   *
   * Change History:
   * $Log: patches,v $
   * Revision 1.11  2006/09/27 14:28:13  njh
   * Sync with latest CVS
   *
!  * Revision 1.22  2006/07/31 09:19:52  njh
!  * Use MAP_PRIVATE
   *
   * Revision 1.21  2006/07/01 16:17:35  njh
   * Added destroy flag
--- 18,25 ----
   *
   * Change History:
   * $Log: patches,v $
   * Revision 1.11  2006/09/27 14:28:13  njh
   * Sync with latest CVS
   *
!  * Revision 1.1  2006/08/11 20:05:13  njh
!  * First Draft
   *
   * Revision 1.21  2006/07/01 16:17:35  njh
   * Added destroy flag
***************
*** 82,88 ****
   * First draft of binhex.c
   *
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #include "clamav.h"
  
--- 82,88 ----
   * First draft of binhex.c
   *
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #include "clamav.h"
  
*** /home/njh/src/clamav-devel/./libclamav/special.c	2006-04-09 20:59:28.000000000 +0100
--- ./libclamav/special.c	2006-07-26 12:18:00.000000000 +0100
***************
*** 17,29 ****
--- 17,37 ----
   *  MA 02110-1301, USA.
   */
  
+ #ifdef	_MSC_VER
+ #include <windows.h>
+ #endif
+ 
  #include "clamav-config.h"
  
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifndef	C_WINDOWS
  #include <netinet/in.h>
+ #endif
  #include <string.h>
  
  #include "clamav.h"
*** /home/njh/src/clamav-devel/./libclamav/filetypes.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/filetypes.c	2006-07-28 13:53:10.000000000 +0100
***************
*** 203,209 ****
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1   /* 0xfX */
  };
  
! cli_file_t cli_filetype(const char *buf, size_t buflen)
  {
  	int i, ascii = 1, len;
  
--- 203,209 ----
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1   /* 0xfX */
  };
  
! cli_file_t cli_filetype(const unsigned char *buf, size_t buflen)
  {
  	int i, ascii = 1, len;
  
*** /home/njh/src/clamav-devel/./libclamav/line.h	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/line.h	2006-08-11 21:05:12.000000000 +0100
***************
*** 17,22 ****
--- 17,25 ----
   *  MA 02110-1301, USA.
   *
   * $Log: patches,v $
   * Revision 1.11  2006/09/27 14:28:13  njh
   * Sync with latest CVS
   *
+  * Revision 1.1  2006/08/11 20:05:13  njh
+  * First Draft
+  *
   * Revision 1.5  2006/04/09 19:59:27  kojm
   * update GPL headers with new address for FSF
   *
*** /home/njh/src/clamav-devel/./libclamav/text.h	2006-07-01 17:17:35.000000000 +0100
--- ./libclamav/text.h	2006-08-11 21:05:12.000000000 +0100
***************
*** 17,22 ****
--- 17,25 ----
   *  MA 02110-1301, USA.
   *
   * $Log: patches,v $
   * Revision 1.11  2006/09/27 14:28:13  njh
   * Sync with latest CVS
   *
+  * Revision 1.1  2006/08/11 20:05:13  njh
+  * First Draft
+  *
   * Revision 1.9  2006/07/01 16:17:35  njh
   * Added destroy flag
   *
*** /home/njh/src/clamav-devel/./libclamav/filetypes.h	2006-04-24 17:28:05.000000000 +0100
--- ./libclamav/filetypes.h	2006-07-28 13:53:10.000000000 +0100
***************
*** 70,76 ****
      struct cli_matched_type *next;
  };
  
! cli_file_t cli_filetype(const char *buf, size_t buflen);
  cli_file_t cli_filetype2(int desc);
  int cli_addtypesigs(struct cl_engine *engine);
  
--- 70,76 ----
      struct cli_matched_type *next;
  };
  
! cli_file_t cli_filetype(const unsigned char *buf, size_t buflen);
  cli_file_t cli_filetype2(int desc);
  int cli_addtypesigs(struct cl_engine *engine);
  
*** /home/njh/src/clamav-devel/./libclamav/sis.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/sis.c	2006-07-31 09:45:28.000000000 +0100
***************
*** 29,35 ****
--- 29,37 ----
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <time.h>
  #include <zlib.h>
  
*** /home/njh/src/clamav-devel/./libclamav/is_tar.h	2005-03-22 21:26:25.000000000 +0000
--- ./libclamav/is_tar.h	2006-08-11 21:05:12.000000000 +0100
***************
*** 5,11 ****
   *
   * Created 25 August 1985 by John Gilmore, ihnp4!hoptoad!gnu.
   *
!  * $Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $ # checkin only
   */
  
  /*
--- 5,11 ----
   *
   * Created 25 August 1985 by John Gilmore, ihnp4!hoptoad!gnu.
   *
!  * $Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $ # checkin only
   */
  
  /*
*** /home/njh/src/clamav-devel/./libclamav/is_tar.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/is_tar.c	2006-08-11 21:05:12.000000000 +0100
***************
*** 5,11 ****
   * Public Domain version written 26 Aug 1985 John Gilmore (ihnp4!hoptoad!gnu).
   *
   * @(#)list.c 1.18 9/23/86 Public Domain - gnu
!  * $Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $
   *
   * Comments changed and some code/comments reformatted
   * for file command by Ian Darwin.
--- 5,11 ----
   * Public Domain version written 26 Aug 1985 John Gilmore (ihnp4!hoptoad!gnu).
   *
   * @(#)list.c 1.18 9/23/86 Public Domain - gnu
!  * $Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $
   *
   * Comments changed and some code/comments reformatted
   * for file command by Ian Darwin.
*** /home/njh/src/clamav-devel/./libclamav/clamav.h	2006-09-27 10:11:32.000000000 +0100
--- ./libclamav/clamav.h	2006-09-27 10:12:02.000000000 +0100
***************
*** 22,28 ****
--- 22,30 ----
  
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
   
  #ifdef __cplusplus
  extern "C"
*** /home/njh/src/clamav-devel/./libclamav/scanners.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/scanners.c	2006-07-31 20:42:08.000000000 +0100
***************
*** 26,36 ****
--- 26,42 ----
  #include <stdlib.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifdef	HAVE_SYS_PARAM_H
  #include <sys/param.h>
+ #endif
  #include <fcntl.h>
+ #ifndef	C_WINDOWS
  #include <dirent.h>
  #include <netinet/in.h>
+ #endif
  
  
  #if HAVE_MMAP
***************
*** 868,874 ****
  #else
  	while((dent = readdir(dd))) {
  #endif
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 874,880 ----
  #else
  	while((dent = readdir(dd))) {
  #endif
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 930,936 ****
  	for(i = 0; i < vba_project->count; i++) {
  	    fullname = (char *) cli_malloc(strlen(vba_project->dir) + strlen(vba_project->name[i]) + 2);
  	    sprintf(fullname, "%s/%s", vba_project->dir, vba_project->name[i]);
! 	    fd = open(fullname, O_RDONLY);
  	    if(fd == -1) {
  		cli_dbgmsg("VBADir: Can't open file %s\n", fullname);
  		free(fullname);
--- 936,942 ----
  	for(i = 0; i < vba_project->count; i++) {
  	    fullname = (char *) cli_malloc(strlen(vba_project->dir) + strlen(vba_project->name[i]) + 2);
  	    sprintf(fullname, "%s/%s", vba_project->dir, vba_project->name[i]);
! 	    fd = open(fullname, O_RDONLY|O_BINARY);
  	    if(fd == -1) {
  		cli_dbgmsg("VBADir: Can't open file %s\n", fullname);
  		free(fullname);
***************
*** 975,981 ****
      	for (i = 0; i < vba_project->count; i++) {
  		fullname = (char *) cli_malloc(strlen(vba_project->dir) + strlen(vba_project->name[i]) + 2);
  		sprintf(fullname, "%s/%s", vba_project->dir, vba_project->name[i]);
! 		fd = open(fullname, O_RDONLY);
  		if(fd == -1) {
  			cli_dbgmsg("VBADir: Can't open file %s\n", fullname);
  			free(fullname);
--- 981,987 ----
      	for (i = 0; i < vba_project->count; i++) {
  		fullname = (char *) cli_malloc(strlen(vba_project->dir) + strlen(vba_project->name[i]) + 2);
  		sprintf(fullname, "%s/%s", vba_project->dir, vba_project->name[i]);
! 		fd = open(fullname, O_RDONLY|O_BINARY);
  		if(fd == -1) {
  			cli_dbgmsg("VBADir: Can't open file %s\n", fullname);
  			free(fullname);
***************
*** 1019,1025 ****
      /* Check directory for embedded OLE objects */
      fullname = (char *) cli_malloc(strlen(dirname) + 16);
      sprintf(fullname, "%s/_1_Ole10Native", dirname);
!     fd = open(fullname, O_RDONLY);
      free(fullname);
      if (fd >= 0) {
      	ofd = cli_decode_ole_object(fd, dirname);
--- 1025,1031 ----
      /* Check directory for embedded OLE objects */
      fullname = (char *) cli_malloc(strlen(dirname) + 16);
      sprintf(fullname, "%s/_1_Ole10Native", dirname);
!     fd = open(fullname, O_RDONLY|O_BINARY);
      free(fullname);
      if (fd >= 0) {
      	ofd = cli_decode_ole_object(fd, dirname);
***************
*** 1040,1046 ****
  #else
  	while((dent = readdir(dd))) {
  #endif
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 1046,1052 ----
  #else
  	while((dent = readdir(dd))) {
  #endif
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 1088,1094 ****
  
      html_normalise_fd(desc, tempname, NULL);
      snprintf(fullname, 1024, "%s/comment.html", tempname);
!     fd = open(fullname, O_RDONLY);
      if (fd >= 0) {
          ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	close(fd);
--- 1094,1100 ----
  
      html_normalise_fd(desc, tempname, NULL);
      snprintf(fullname, 1024, "%s/comment.html", tempname);
!     fd = open(fullname, O_RDONLY|O_BINARY);
      if (fd >= 0) {
          ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	close(fd);
***************
*** 1103,1109 ****
  
      if (ret == CL_CLEAN) {
  	snprintf(fullname, 1024, "%s/nocomment.html", tempname);
! 	fd = open(fullname, O_RDONLY);
  	if (fd >= 0) {
  	    ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	    close(fd);
--- 1109,1115 ----
  
      if (ret == CL_CLEAN) {
  	snprintf(fullname, 1024, "%s/nocomment.html", tempname);
! 	fd = open(fullname, O_RDONLY|O_BINARY);
  	if (fd >= 0) {
  	    ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	    close(fd);
***************
*** 1119,1125 ****
  
      if (ret == CL_CLEAN) {
  	snprintf(fullname, 1024, "%s/script.html", tempname);
! 	fd = open(fullname, O_RDONLY);
  	if (fd >= 0) {
  	    ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	    close(fd);
--- 1125,1131 ----
  
      if (ret == CL_CLEAN) {
  	snprintf(fullname, 1024, "%s/script.html", tempname);
! 	fd = open(fullname, O_RDONLY|O_BINARY);
  	if (fd >= 0) {
  	    ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	    close(fd);
***************
*** 1357,1363 ****
      free(src);
  
      tempfile = cli_gentemp(NULL);
!     if((ndesc = open(tempfile, O_RDWR|O_CREAT|O_TRUNC, S_IRWXU)) < 0) {
  	cli_errmsg("CryptFF: Can't create file %s\n", tempfile);
  	free(dest);
  	free(tempfile);
--- 1363,1369 ----
      free(src);
  
      tempfile = cli_gentemp(NULL);
!     if((ndesc = open(tempfile, O_RDWR|O_CREAT|O_TRUNC|O_BINARY, S_IRWXU)) < 0) {
  	cli_errmsg("CryptFF: Can't create file %s\n", tempfile);
  	free(dest);
  	free(tempfile);
***************
*** 1848,1854 ****
  	int fd, ret;
  
      /* internal version of cl_scanfile with arec/mrec preserved */
!     if((fd = open(filename, O_RDONLY)) == -1)
  	return CL_EOPEN;
  
      ret = cli_magic_scandesc(fd, ctx);
--- 1854,1860 ----
  	int fd, ret;
  
      /* internal version of cl_scanfile with arec/mrec preserved */
!     if((fd = open(filename, O_RDONLY|O_BINARY)) == -1)
  	return CL_EOPEN;
  
      ret = cli_magic_scandesc(fd, ctx);
***************
*** 1862,1868 ****
  	int fd, ret;
  
  
!     if((fd = open(filename, O_RDONLY)) == -1)
  	return CL_EOPEN;
  
      ret = cl_scandesc(fd, virname, scanned, engine, limits, options);
--- 1868,1874 ----
  	int fd, ret;
  
  
!     if((fd = open(filename, O_RDONLY|O_BINARY)) == -1)
  	return CL_EOPEN;
  
      ret = cl_scandesc(fd, virname, scanned, engine, limits, options);
*** /home/njh/src/clamav-devel/./libclamav/untar.c	2006-08-20 20:42:02.000000000 +0100
--- ./libclamav/untar.c	2006-08-20 20:47:28.000000000 +0100
***************
*** 22,27 ****
--- 22,30 ----
   *
   * Change History:
   * $Log: patches,v $
   * Revision 1.11  2006/09/27 14:28:13  njh
   * Sync with latest CVS
   *
+  * Revision 1.2  2006/08/20 19:47:28  njh
+  * Fix error return
+  *
   * Revision 1.31  2006/08/20 19:42:02  njh
   * Fix error return
   *
***************
*** 116,122 ****
   * First draft
   *
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #include <stdio.h>
  #include <errno.h>
--- 119,125 ----
   * First draft
   *
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #include <stdio.h>
  #include <errno.h>
*** /home/njh/src/clamav-devel/./libclamav/msexpand.c	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/msexpand.c	2006-07-26 10:23:16.000000000 +0100
***************
*** 24,30 ****
--- 24,32 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  
  #if HAVE_CONFIG_H
*** /home/njh/src/clamav-devel/./libclamav/untar.h	2006-04-09 20:59:28.000000000 +0100
--- ./libclamav/untar.h	2006-08-11 21:05:12.000000000 +0100
***************
*** 18,23 ****
--- 18,26 ----
   *
   * Change History:
   * $Log: patches,v $
   * Revision 1.11  2006/09/27 14:28:13  njh
   * Sync with latest CVS
   *
+  * Revision 1.1  2006/08/11 20:05:13  njh
+  * First Draft
+  *
   * Revision 1.4  2006/04/09 19:59:28  kojm
   * update GPL headers with new address for FSF
   *
*** /home/njh/src/clamav-devel/./libclamav/pst.c	2006-09-16 21:22:21.000000000 +0100
--- ./libclamav/pst.c	2006-08-29 08:44:40.000000000 +0100
***************
*** 36,42 ****
   * TODO: Remove the vcard handling
   * FIXME: The code does little error checking of OOM scenarios
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"	/* must come first */
--- 36,42 ----
   * TODO: Remove the vcard handling
   * FIXME: The code does little error checking of OOM scenarios
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"	/* must come first */
***************
*** 57,64 ****
  #include "cltypes.h"
  #include "others.h"
  
! #if	defined(C_SOLARIS) || defined(C_WINDOWS) || defined(_HPUX_SOURCE)
! typedef	uint16_t	u_int16_t;	/* should be in cltypes.h */
  typedef	uint32_t	u_int32_t;
  #endif
  
--- 57,64 ----
  #include "cltypes.h"
  #include "others.h"
  
! #if	defined(C_SOLARIS) || defined(C_WINDOWS)	/* should be in cltypes.h */
! typedef	uint16_t	u_int16_t;
  typedef	uint32_t	u_int32_t;
  #endif
  
***************
*** 1193,1199 ****
    struct _pst_table_ptr_struct table, table2;
    pst_desc desc_rec;
    pst_desc_ll *d_ptr=NULL, *d_par=NULL;
!   int32_t i = 0, prev_id=-1;
    char *buf = NULL, *bptr;
  
    struct _pst_d_ptr_ll {
--- 1193,1199 ----
    struct _pst_table_ptr_struct table, table2;
    pst_desc desc_rec;
    pst_desc_ll *d_ptr=NULL, *d_par=NULL;
!   int32_t i = 0, y, prev_id=-1;
    char *buf = NULL, *bptr;
  
    struct _pst_d_ptr_ll {
***************
*** 1514,1519 ****
--- 1514,1520 ----
        return -1;
      }
  
+     y = 0;
      while(table.start != 0 /*&& y < 0x1F && table.start < end_val*/) {
  
        if (table2.start <= table.start) {
***************
*** 2070,2076 ****
  }
  
  int32_t _pst_process(pst_num_array *list , pst_item *item) {
!   int32_t x;
    int32_t next = 0;
    pst_item_attach *attach;
    pst_item_extra_field *ef;
--- 2071,2077 ----
  }
  
  int32_t _pst_process(pst_num_array *list , pst_item *item) {
!   int32_t x, t;
    int32_t next = 0;
    pst_item_attach *attach;
    pst_item_extra_field *ef;
***************
*** 2125,2130 ****
--- 2126,2132 ----
  	MALLOC_EMAIL(item);
  	memcpy(&(item->email->importance), list->items[x]->data, sizeof(item->email->importance));
  	LE32_CPU(item->email->importance);
+ 	t = item->email->importance;
  	//	INC_CHECK_X();
  	break;
        case 0x001A: // PR_MESSAGE_CLASS Ascii type of messages - NOT FOLDERS
***************
*** 2175,2180 ****
--- 2177,2183 ----
  	MALLOC_EMAIL(item);
  	memcpy(&(item->email->priority), list->items[x]->data, sizeof(item->email->priority));
  	LE32_CPU(item->email->priority);
+ 	t = item->email->priority;
  	//	INC_CHECK_X();
  	break;
        case 0x0029:// PR_READ_RECEIPT_REQUESTED
***************
*** 2209,2214 ****
--- 2212,2218 ----
  	MALLOC_EMAIL(item);
  	memcpy(&(item->email->orig_sensitivity), list->items[x]->data, sizeof(item->email->orig_sensitivity));
  	LE32_CPU(item->email->orig_sensitivity);
+ 	t = item->email->orig_sensitivity;
  	//	INC_CHECK_X();
  	break;
        case 0x0036: // PR_SENSITIVITY
***************
*** 2221,2226 ****
--- 2225,2231 ----
  	MALLOC_EMAIL(item);
  	memcpy(&(item->email->sensitivity), list->items[x]->data, sizeof(item->email->sensitivity));
  	LE32_CPU(item->email->sensitivity);
+ 	t = item->email->sensitivity;
  	//	INC_CHECK_X();
  	break;
        case 0x0037: // PR_SUBJECT raw subject
***************
*** 2849,2854 ****
--- 2854,2860 ----
  	MOVE_NEXT(attach);
  	memcpy(&(attach->method), list->items[x]->data, sizeof(attach->method));
  	LE32_CPU(attach->method);
+ 	t = attach->method;
  	//INC_CHECK_X();
  	break;
        case 0x370B: // PR_RENDERING_POSITION
*** /home/njh/src/clamav-devel/./libclamav/matcher-ac.h	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/matcher-ac.h	2006-07-28 13:54:20.000000000 +0100
***************
*** 27,33 ****
  #define AC_DEFAULT_DEPTH 2
  
  int cli_ac_addpatt(struct cli_matcher *root, struct cli_ac_patt *pattern);
! int cli_ac_scanbuff(const char *buffer, unsigned int length, const char **virname, const struct cli_matcher *root, int *partcnt, unsigned short otfrec, unsigned long int offset, unsigned long int *partoff, unsigned short ftype, int fd, struct cli_matched_type **ftoffset);
  int cli_ac_buildtrie(struct cli_matcher *root);
  void cli_ac_free(struct cli_matcher *root);
  void cli_ac_setdepth(unsigned int depth);
--- 27,33 ----
  #define AC_DEFAULT_DEPTH 2
  
  int cli_ac_addpatt(struct cli_matcher *root, struct cli_ac_patt *pattern);
! int cli_ac_scanbuff(const unsigned char *buffer, unsigned int length, const char **virname, const struct cli_matcher *root, int *partcnt, unsigned short otfrec, unsigned long int offset, unsigned long int *partoff, unsigned short ftype, int fd, struct cli_matched_type **ftoffset);
  int cli_ac_buildtrie(struct cli_matcher *root);
  void cli_ac_free(struct cli_matcher *root);
  void cli_ac_setdepth(unsigned int depth);
*** /home/njh/src/clamav-devel/./libclamav/uuencode.c	2006-07-31 20:38:20.000000000 +0100
--- ./libclamav/uuencode.c	2006-08-11 21:05:12.000000000 +0100
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #include "clamav.h"
  
--- 16,22 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #include "clamav.h"
  
*** /home/njh/src/clamav-devel/./libclamav/line.c	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/line.c	2006-08-11 21:05:12.000000000 +0100
***************
*** 17,22 ****
--- 17,25 ----
   *  MA 02110-1301, USA.
   *
   * $Log: patches,v $
   * Revision 1.11  2006/09/27 14:28:13  njh
   * Sync with latest CVS
   *
+  * Revision 1.1  2006/08/11 20:05:13  njh
+  * First Draft
+  *
   * Revision 1.10  2006/04/09 19:59:27  kojm
   * update GPL headers with new address for FSF
   *
***************
*** 49,55 ****
   *
   */
  
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 52,58 ----
   *
   */
  
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
*** /home/njh/src/clamav-devel/./libclamav/binhex.h	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/binhex.h	2006-08-11 21:05:12.000000000 +0100
***************
*** 18,23 ****
--- 18,26 ----
   *
   * Change History:
   * $Log: patches,v $
   * Revision 1.11  2006/09/27 14:28:13  njh
   * Sync with latest CVS
   *
+  * Revision 1.1  2006/08/11 20:05:13  njh
+  * First Draft
+  *
   * Revision 1.4  2006/04/09 19:59:27  kojm
   * update GPL headers with new address for FSF
   *
*** /home/njh/src/clamav-devel/./libclamav/tnef.c	2006-07-22 14:31:22.000000000 +0100
--- ./libclamav/tnef.c	2006-08-11 21:05:12.000000000 +0100
***************
*** 25,31 ****
  #include "clamav-config.h"
  #endif
  
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #include <stdio.h>
  #include <fcntl.h>
--- 25,31 ----
  #include "clamav-config.h"
  #endif
  
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #include <stdio.h>
  #include <fcntl.h>
*** /home/njh/src/clamav-devel/./libclamav/phish_domaincheck_db.c	2006-09-26 19:55:36.000000000 +0100
--- ./libclamav/phish_domaincheck_db.c	2006-09-26 19:36:22.000000000 +0100
***************
*** 19,27 ****
   *  MA 02110-1301, USA.
   *
   *  $Log: patches,v $
   *  Revision 1.11  2006/09/27 14:28:13  njh
   *  Sync with latest CVS
   *
-  *  Revision 1.2  2006/09/26 18:55:36  njh
-  *  Fixed portability issues
-  *
   *  Revision 1.1  2006/09/13 19:40:27  njh
   *  First draft
   *
--- 19,24 ----
*** /home/njh/src/clamav-devel/./libclamav/phish_whitelist.c	2006-09-26 19:55:36.000000000 +0100
--- ./libclamav/phish_whitelist.c	2006-09-26 19:36:22.000000000 +0100
***************
*** 19,27 ****
   *  MA 02110-1301, USA.
   *
   *  $Log: patches,v $
   *  Revision 1.11  2006/09/27 14:28:13  njh
   *  Sync with latest CVS
   *
-  *  Revision 1.3  2006/09/26 18:55:36  njh
-  *  Fixed portability issues
-  *
   *  Revision 1.2  2006/09/17 14:50:58  njh
   *  Sync with latest CVS
   *
--- 19,24 ----
*** /home/njh/src/clamav-devel/./libclamav/phishcheck.c	2006-09-27 15:23:14.000000000 +0100
--- ./libclamav/phishcheck.c	2006-09-27 15:22:11.000000000 +0100
***************
*** 19,27 ****
   *  MA 02110-1301, USA.
   *
   *  $Log: patches,v $
   *  Revision 1.11  2006/09/27 14:28:13  njh
   *  Sync with latest CVS
   *
-  *  Revision 1.10  2006/09/27 14:23:14  njh
-  *  Ported to VS2005
-  *
   *  Revision 1.9  2006/09/26 18:55:36  njh
   *  Fixed portability issues
   *
--- 19,24 ----
*** /home/njh/src/clamav-devel/./libclamav/ole2_extract.c	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/ole2_extract.c	2006-08-15 10:14:26.000000000 +0100
***************
*** 30,39 ****
  #include <fcntl.h>
  #include <stdio.h>
  #include <string.h>
  #include <unistd.h>
  #include <ctype.h>
  #include <stdlib.h>
! #include <clamav.h>
  
  #if HAVE_MMAP
  #if HAVE_SYS_MMAN_H
--- 30,41 ----
  #include <fcntl.h>
  #include <stdio.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <ctype.h>
  #include <stdlib.h>
! #include "clamav.h"
  
  #if HAVE_MMAP
  #if HAVE_SYS_MMAN_H
***************
*** 135,141 ****
  	j=0;
  	/* size-2 to ignore trailing NULL */
  	for (i=0 ; i < size-2; i+=2) {
! 		if (isprint(name[i])) {
  			newname[j++] = name[i];
  		} else {
  			if (name[i] < 10 && name[i] >= 0) {
--- 137,143 ----
  	j=0;
  	/* size-2 to ignore trailing NULL */
  	for (i=0 ; i < size-2; i+=2) {
! 		if((!(name[i]&0x80)) && isprint(name[i])) {
  			newname[j++] = name[i];
  		} else {
  			if (name[i] < 10 && name[i] >= 0) {
***************
*** 587,594 ****
  #ifdef  C_DARWIN
                          *newname &= '\177';
  #endif
! #if     defined(MSDOS) || defined(C_CYGWIN) || defined(WIN32) || defined(C_OS2)
!                         if(strchr("/*?<>|\"+=,;: ", *newname))
  #else
                          if(*newname == '/')
  #endif
--- 589,596 ----
  #ifdef  C_DARWIN
                          *newname &= '\177';
  #endif
! #if     defined(MSDOS) || defined(C_CYGWIN) || defined(WIN32) || defined(C_OS2) || defined(C_WINDOWS)
!                         if(strchr("/*?<>|\"+=,;:\\ ", *newname))
  #else
                          if(*newname == '/')
  #endif
***************
*** 602,611 ****
  		free(name);
  		return FALSE;
  	}
  	sprintf(newname, "%s/%s", dir, name);
  	free(name);
  
! 	ofd = open(newname, O_WRONLY|O_CREAT|O_TRUNC, S_IRWXU);
  	if (ofd < 0) {
  		cli_errmsg("ERROR: failed to create file: %s\n", newname);
  		free(newname);
--- 604,614 ----
  		free(name);
  		return FALSE;
  	}
+ 
  	sprintf(newname, "%s/%s", dir, name);
  	free(name);
  
! 	ofd = open(newname, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IRWXU);
  	if (ofd < 0) {
  		cli_errmsg("ERROR: failed to create file: %s\n", newname);
  		free(newname);
*** /home/njh/src/clamav-devel/./libclamav/pdf.c	2006-09-15 19:07:34.000000000 +0100
--- ./libclamav/pdf.c	2006-09-17 15:50:58.000000000 +0100
***************
*** 15,21 ****
   *  along with this program; if not, write to the Free Software
   *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 15,21 ----
   *  along with this program; if not, write to the Free Software
   *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.11 2006/09/27 14:28:13 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
*** /home/njh/src/clamav-devel/./libclamav/unzip.h	2006-05-30 14:00:04.000000000 +0100
--- ./libclamav/unzip.h	2006-08-17 17:35:12.000000000 +0100
***************
*** 34,39 ****
--- 34,46 ----
  
  #include "cltypes.h"
  
+ #ifndef HAVE_ATTRIB_PACKED
+ #define __attribute__(x)
+ #endif
+ 
+ #ifdef HAVE_PRAGMA_PACK
+ #pragma pack(1)
+ #endif
  
  /******** Zip format structures *********/
  
*** /home/njh/src/clamav-devel/./libclamav/chmunpack.c	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/chmunpack.c	2006-08-17 17:35:12.000000000 +0100
***************
*** 27,33 ****
--- 27,35 ----
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  
  #if defined(HAVE_ATTRIB_PACKED) || defined(HAVE_PRAGMA_PACK)
***************
*** 831,837 ****
  	mf_in.name = strdup("input");
  	
  	snprintf(filename, 1024, "%s/clamav-unchm.bin", dirname);
! 	mf_out.desc = open(filename, O_WRONLY|O_CREAT|O_TRUNC, S_IRWXU);
  	if (!mf_out.desc) {
  		cli_dbgmsg("open failed\n", filename);
  		free(mf_in.name);
--- 833,839 ----
  	mf_in.name = strdup("input");
  	
  	snprintf(filename, 1024, "%s/clamav-unchm.bin", dirname);
! 	mf_out.desc = open(filename, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IRWXU);
  	if (!mf_out.desc) {
  		cli_dbgmsg("open failed\n", filename);
  		free(mf_in.name);
***************
*** 920,926 ****
  	mf_out.fh = NULL;
  	
  	/* Reopen the file for reading */
! 	mf_out.desc = open(filename, O_RDONLY);
  	if (mf_out.desc < 0) {
  		cli_dbgmsg("re-open output failed\n");
  		goto abort;
--- 922,928 ----
  	mf_out.fh = NULL;
  	
  	/* Reopen the file for reading */
! 	mf_out.desc = open(filename, O_RDONLY|O_BINARY);
  	if (mf_out.desc < 0) {
  		cli_dbgmsg("re-open output failed\n");
  		goto abort;
***************
*** 942,948 ****
  		}
  		
  		snprintf(filename, 1024, "%s/%d-%llu.chm", dirname, count, entry->offset);
! 		ofd = open(filename, O_WRONLY|O_CREAT|O_TRUNC, S_IRWXU);
  		if (ofd < 0) {
  			entry = entry->next;
  			continue;
--- 944,950 ----
  		}
  		
  		snprintf(filename, 1024, "%s/%d-%llu.chm", dirname, count, entry->offset);
! 		ofd = open(filename, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IRWXU);
  		if (ofd < 0) {
  			entry = entry->next;
  			continue;
*** /home/njh/src/clamav-devel/./libclamav/unzip.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/unzip.c	2006-08-17 17:39:14.000000000 +0100
***************
*** 31,39 ****
  #include <zlib.h>
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <unistd.h>
  #include <fcntl.h>
- #include <unistd.h>
  
  #include "clamav.h"
  #include "others.h"
--- 31,40 ----
  #include <zlib.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <fcntl.h>
  
  #include "clamav.h"
  #include "others.h"
*** /home/njh/src/clamav-devel/./clamscan/manager.c	2006-09-15 13:27:22.000000000 +0100
--- ./clamscan/manager.c	2006-09-15 13:26:54.000000000 +0100
***************
*** 30,40 ****
--- 30,48 ----
  #include <ctype.h>
  #include <sys/stat.h>
  #include <sys/types.h>
+ #ifdef	C_WINDOWS
+ #include <sys/utime.h>
+ #else
  #include <sys/wait.h>
  #include <utime.h>
+ #endif
+ #ifdef	HAVE_INITGROUPS
  #include <grp.h>
+ #endif
  #include <fcntl.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
  #include <signal.h>
  #include <clamav.h>
***************
*** 57,62 ****
--- 65,75 ----
  dev_t procdev;
  #endif
  
+ #ifdef	C_WINDOWS
+ #undef	P_tmpdir
+ 
+ #define	P_tmpdir	"C:\\WINDOWS\\TEMP"
+ #endif
  
  int scanmanager(const struct optstruct *opt)
  {
***************
*** 69,77 ****
  	struct stat sb;
  	char *fullpath = NULL, cwd[1024];
  
- 
  /* njh@bandsman.co.uk: BeOS */
! #if !defined(C_CYGWIN) && !defined(C_OS2) && !defined(C_BEOS)
      if(!geteuid()) {
  	if((user = getpwnam(UNPUSER)) == NULL) {
  	    logg("^Can't get information about user "UNPUSER"\n");
--- 82,89 ----
  	struct stat sb;
  	char *fullpath = NULL, cwd[1024];
  
  /* njh@bandsman.co.uk: BeOS */
! #if !defined(C_CYGWIN) && !defined(C_OS2) && !defined(C_BEOS) && !defined(C_WINDOWS)
      if(!geteuid()) {
  	if((user = getpwnam(UNPUSER)) == NULL) {
  	    logg("^Can't get information about user "UNPUSER"\n");
***************
*** 360,371 ****
--- 372,385 ----
  	return 0;
      }
  
+ #ifndef	C_WINDOWS
      if(geteuid())
  	if(checkaccess(filename, NULL, R_OK) != 1) {
  	    if(!printinfected)
  		logg("%s: Access denied\n", filename);
  	    return 0;
  	}
+ #endif
  
      claminfo.files++;
  
***************
*** 476,482 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 490,496 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 495,501 ****
  	exit(63); /* critical */
      }
  
! #ifndef C_OS2
      if(user)
  	chown(gendir, user->pw_uid, user->pw_gid);
  #endif
--- 509,516 ----
  	exit(63); /* critical */
      }
  
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
! 	/* FIXME: do the correct native windows way */
      if(user)
  	chown(gendir, user->pw_uid, user->pw_gid);
  #endif
***************
*** 674,680 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 689,695 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 710,716 ****
  
      fixperms(gendir);
  
! #ifndef C_OS2
      if(user) {
  	chown(gendir, user->pw_uid, user->pw_gid);
  	chown(tmpfile, user->pw_uid, user->pw_gid);
--- 725,731 ----
  
      fixperms(gendir);
  
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
      if(user) {
  	chown(gendir, user->pw_uid, user->pw_gid);
  	chown(tmpfile, user->pw_uid, user->pw_gid);
***************
*** 753,759 ****
  
      logg("*Scanning %s\n", filename);
  
!     if((fd = open(filename, O_RDONLY)) == -1) {
  	logg("^Can't open file %s\n", filename);
  	return 54;
      }
--- 768,774 ----
  
      logg("*Scanning %s\n", filename);
  
!     if((fd = open(filename, O_RDONLY|O_BINARY)) == -1) {
  	logg("^Can't open file %s\n", filename);
  	return 54;
      }
***************
*** 788,794 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 803,809 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 806,811 ****
--- 821,833 ----
  	return 63;
      }
  
+ #ifdef	C_WINDOWS
+ 	if(setmode(fileno(stdin), O_BINARY) < 0) {
+ 		logg("^Can't set binary mode on stdin\n");
+ 		return 63;
+ 	}
+ #endif
+ 
      while((ret = fread(buff, 1, FILEBUFF, stdin)))
  	fwrite(buff, 1, ret, fs);
  
***************
*** 840,845 ****
--- 862,875 ----
   * 0 -> OK
   */
  
+ #ifdef	C_WINDOWS
+ int clamav_unpack(const char *prog, char **args, const char *tmpdir, const struct passwd *user, const struct optstruct *opt)
+ {
+ 	/* TODO: use spamvp(P_WAIT, prog, args); */
+ 	cli_errmsg("clamav_unpack is not supported under Windows yet\n");
+ 	return -1;
+ }
+ #else
  int clamav_unpack(const char *prog, char **args, const char *tmpdir, const struct passwd *user, const struct optstruct *opt)
  {
  	pid_t pid;
***************
*** 870,876 ****
  	case -1:
  	    return -1;
  	case 0:
! #ifndef C_CYGWIN
  	    if(!geteuid() && user) {
  
  #ifdef HAVE_SETGROUPS
--- 900,906 ----
  	case -1:
  	    return -1;
  	case 0:
! #if	(!defined(C_CYGWIN)) && (!defined(C_WINDOWS))
  	    if(!geteuid() && user) {
  
  #ifdef HAVE_SETGROUPS
***************
*** 946,958 ****
  
      return 0;
  }
  
  void move_infected(const char *filename, const struct optstruct *opt)
  {
  	char *movedir, *movefilename, *tmp, numext[4 + 1];
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
! 	struct utimbuf ubuf;
  
  
      if(!(movedir = opt_arg(opt, "move"))) {
--- 976,989 ----
  
      return 0;
  }
+ #endif
  
  void move_infected(const char *filename, const struct optstruct *opt)
  {
  	char *movedir, *movefilename, *tmp, numext[4 + 1];
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
! 	struct _utimbuf ubuf;
  
  
      if(!(movedir = opt_arg(opt, "move"))) {
***************
*** 1030,1036 ****
  	}
  
  	chmod(movefilename, fstat.st_mode);
! #ifndef C_OS2
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  #endif
  
--- 1061,1067 ----
  	}
  
  	chmod(movefilename, fstat.st_mode);
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  #endif
  
*** /home/njh/src/clamav-devel/./clamscan/clamscan.c	2006-09-15 13:27:22.000000000 +0100
--- ./clamscan/clamscan.c	2006-09-15 13:26:54.000000000 +0100
***************
*** 24,32 ****
--- 24,39 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifdef	C_WINDOWS
+ #include <fcntl.h>
+ #else
  #include <sys/time.h>
+ #endif
  #include <time.h>
+ #include <ctype.h>
  
  #include "clamscan_opt.h"
  #include "others.h"
***************
*** 53,62 ****
  	int ds, dms, ret;
  	double mb;
  	struct timeval t1, t2;
  	struct timezone tz;
  	struct optstruct *opt;
  	const char *pt;
! 
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, NULL);
      if(!opt) {
--- 60,77 ----
  	int ds, dms, ret;
  	double mb;
  	struct timeval t1, t2;
+ #ifndef	C_WINDOWS
  	struct timezone tz;
+ #endif
  	struct optstruct *opt;
  	const char *pt;
! 	
! #if	defined(C_WINDOWS) && defined(CL_THREAD_SAFE)
! 	if(!pthread_win32_process_attach_np()) {
! 		mprintf("!Can't start the win32 pthreads layer\n");
! 		return 1;
! 	}
! #endif
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, NULL);
      if(!opt) {
***************
*** 174,184 ****
  
      memset(&claminfo, 0, sizeof(struct s_info));
  
      gettimeofday(&t1, &tz);
      ret = scanmanager(opt);
  
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
! 	gettimeofday(&t2, &tz);
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
--- 189,210 ----
  
      memset(&claminfo, 0, sizeof(struct s_info));
  
+ #ifdef	C_WINDOWS
+ 	_set_fmode(_O_BINARY);
+ 
+ 	gettimeofday(&t1, NULL);
+ #else
      gettimeofday(&t1, &tz);
+ #endif
+ 
      ret = scanmanager(opt);
  
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
! #ifdef	C_WINDOWS
! 	gettimeofday(&t2, NULL);
! #else
!     gettimeofday(&t2, &tz);
! #endif
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
***************
*** 204,209 ****
--- 230,243 ----
      }
  
      opt_free(opt);
+     
+ #if	defined(C_WINDOWS) && defined(CL_THREAD_SAFE)
+ 	if(!pthread_win32_process_detach_np()) {
+ 		mprintf("!Can't stop the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
      return ret;
  }
  
*** /home/njh/src/clamav-devel/./clamscan/manager.h	2006-05-15 19:30:18.000000000 +0100
--- ./clamscan/manager.h	2006-07-26 14:31:40.000000000 +0100
***************
*** 21,27 ****
--- 21,29 ----
  #define __MANAGER_H
  
  #include <clamav.h>
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
  #include "options.h"
  
  int scanmanager(const struct optstruct *opt);
*** /home/njh/src/clamav-devel/./clamscan/treewalk.h	2006-06-08 21:00:50.000000000 +0100
--- ./clamscan/treewalk.h	2006-07-26 14:36:44.000000000 +0100
***************
*** 20,26 ****
--- 20,29 ----
  #ifndef __TREEWALK_H
  #define __TREEWALK_H
  
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
+ 
  #include <clamav.h>
  
  #include "options.h"
*** /home/njh/src/clamav-devel/./clamscan/others.c	2006-04-09 20:59:26.000000000 +0100
--- ./clamscan/others.c	2006-07-26 15:03:16.000000000 +0100
***************
*** 29,41 ****
--- 29,47 ----
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <errno.h>
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <sys/wait.h>
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <signal.h>
***************
*** 73,78 ****
--- 79,92 ----
      }
  }
  
+ #ifdef	C_WINDOWS
+ /* FIXME: Handle users correctly */
+ int
+ checkaccess(const char *path, const char *username, int mode)
+ {
+ 	return _access(path, mode);
+ }
+ #else
  int checkaccess(const char *path, const char *username, int mode)
  {
  	struct passwd *user;
***************
*** 117,122 ****
--- 131,137 ----
  
      return ret;
  }
+ #endif
  
  int match_regex(const char *filename, const char *pattern)
  {
*** /home/njh/src/clamav-devel/./clamscan/treewalk.c	2006-06-08 21:00:50.000000000 +0100
--- ./clamscan/treewalk.c	2006-07-26 18:40:58.000000000 +0100
***************
*** 24,35 ****
--- 24,43 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/stat.h>
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/wait.h>
+ #endif
+ #ifdef	HAVE_INITGROUPS
  #include <grp.h>
+ #endif
+ #ifndef	C_WINDOWS
  #include <dirent.h>
+ #endif
  #include <errno.h>
  
  #include "shared.h"
***************
*** 97,103 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 105,111 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 136,141 ****
--- 144,156 ----
  
  }
  
+ #ifdef	C_WINDOWS
+ int
+ clamav_rmdirs(const char *dir)
+ {
+ 	return rmdirs(dir);
+ }
+ #else
  int clamav_rmdirs(const char *dir)
  {
  #ifndef C_CYGWIN
***************
*** 182,189 ****
  	    else
  		return -2;
      }
- 
  }
  
  int fixperms(const char *dirname)
  {
--- 197,204 ----
  	    else
  		return -2;
      }
  }
+ #endif	/* C_WINDOWS*/
  
  int fixperms(const char *dirname)
  {
***************
*** 195,201 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 210,216 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 241,247 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 256,262 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	    if(dent->d_ino)
  #endif
  	    {
*** /home/njh/src/clamav-devel/./shared/memory.c	2006-04-09 20:59:28.000000000 +0100
--- ./shared/memory.c	2006-07-26 15:44:20.000000000 +0100
***************
*** 19,25 ****
--- 19,27 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  void *mmalloc(size_t size)
  {
*** /home/njh/src/clamav-devel/./shared/getopt.c	2004-03-29 01:00:58.000000000 +0100
--- ./shared/getopt.c	2006-07-26 15:49:38.000000000 +0100
***************
*** 41,47 ****
--- 41,49 ----
  
  #include <stdio.h>
  
+ #ifndef	C_WINDOWS
  int strncmp(const char *s1, const char *s2, size_t n);
+ #endif
  
  /* Comment out all this code if we are using the GNU C Library, and are not
     actually compiling the library itself.  This code is part of the GNU C
*** /home/njh/src/clamav-devel/./shared/cdiff.c	2006-08-14 10:17:45.000000000 +0100
--- ./shared/cdiff.c	2006-08-14 10:20:26.000000000 +0100
***************
*** 27,33 ****
--- 27,35 ----
  #include <ctype.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "shared/memory.h"
  #include "shared/misc.h"
***************
*** 352,358 ****
  
      if(del || xchg) {
  
! 	if(!(fh = fopen(ctx->open_db, "r"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for reading\n", ctx->open_db);
  	    return -1;
  	}
--- 354,360 ----
  
      if(del || xchg) {
  
! 	if(!(fh = fopen(ctx->open_db, "rb"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for reading\n", ctx->open_db);
  	    return -1;
  	}
***************
*** 363,369 ****
  	    return -1;
  	}
  
! 	if(!(tmpfh = fopen(tmp, "w"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for writing\n", tmp);
  	    fclose(fh);
  	    free(tmp);
--- 365,371 ----
  	    return -1;
  	}
  
! 	if(!(tmpfh = fopen(tmp, "wb"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for writing\n", tmp);
  	    fclose(fh);
  	    free(tmp);
***************
*** 448,454 ****
  
      if(add) {
  
! 	if(!(fh = fopen(ctx->open_db, "a"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for appending\n", ctx->open_db);
  	    return -1;
  	}
--- 450,456 ----
  
      if(add) {
  
! 	if(!(fh = fopen(ctx->open_db, "ab"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for appending\n", ctx->open_db);
  	    return -1;
  	}
***************
*** 519,525 ****
  	return -1;
      }
  
!     if(!(src = fopen(srcdb, "r"))) {
  	logg("!cdiff_cmd_move: Can't open %s for reading\n", srcdb);
  	free(start_str);
  	free(end_str);
--- 521,527 ----
  	return -1;
      }
  
!     if(!(src = fopen(srcdb, "rb"))) {
  	logg("!cdiff_cmd_move: Can't open %s for reading\n", srcdb);
  	free(start_str);
  	free(end_str);
***************
*** 536,542 ****
  	return -1;
      }
  
!     if(!(dst = fopen(dstdb, "a"))) {
  	logg("!cdiff_cmd_move: Can't open %s for appending\n", dstdb);
  	free(start_str);
  	free(end_str);
--- 538,544 ----
  	return -1;
      }
  
!     if(!(dst = fopen(dstdb, "ab"))) {
  	logg("!cdiff_cmd_move: Can't open %s for appending\n", dstdb);
  	free(start_str);
  	free(end_str);
***************
*** 557,563 ****
  	return -1;
      }
  
!     if(!(tmp = fopen(tmpdb, "w"))) {
  	logg("!cdiff_cmd_move: Can't open file %s for writing\n", tmpdb);
  	free(start_str);
  	free(end_str);
--- 559,565 ----
  	return -1;
      }
  
!     if(!(tmp = fopen(tmpdb, "wb"))) {
  	logg("!cdiff_cmd_move: Can't open file %s for writing\n", tmpdb);
  	free(start_str);
  	free(end_str);
***************
*** 686,692 ****
  	return -1;
      }
  
!     if(!(fh = fdopen(desc, "r"))) {
  	logg("!cdiff_apply: fdopen() failed for descriptor %d\n", desc);
  	close(desc);
  	return -1;
--- 688,694 ----
  	return -1;
      }
  
!     if(!(fh = fdopen(desc, "rb"))) {
  	logg("!cdiff_apply: fdopen() failed for descriptor %d\n", desc);
  	close(desc);
  	return -1;
*** /home/njh/src/clamav-devel/./shared/network.h	2006-04-09 20:59:28.000000000 +0100
--- ./shared/network.h	2006-07-31 14:59:30.000000000 +0100
***************
*** 21,28 ****
--- 21,33 ----
  #ifndef __NETWORK_H
  #define __NETWORK_H
  
+ #ifdef	HAVE_SYS_TYPES_H
  #include <sys/types.h>
+ #endif
+ 
+ #ifndef	C_WINDOWS
  #include <netdb.h>
+ #endif
  
  int r_gethostbyname(const char *hostname, struct hostent *hp, char *buf, size_t len);
  
*** /home/njh/src/clamav-devel/./shared/output.c	2006-08-31 09:03:18.000000000 +0100
--- ./shared/output.c	2006-08-31 09:23:58.000000000 +0100
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
+ 
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 30,42 ****
--- 35,51 ----
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <fcntl.h>
  #include <time.h>
  #include <sys/stat.h>
  #include <errno.h>
+ #ifndef	C_WINDOWS
  #include <sys/time.h>
  #include <sys/socket.h>
+ #endif
  #if HAVE_SYS_TYPES_H
  #include <sys/types.h>
  #endif
***************
*** 122,128 ****
--- 131,139 ----
  int logg(const char *str, ...)
  {
  	va_list args, argscpy, argsout;
+ #ifdef	F_WRLCK
  	struct flock fl;
+ #endif
  	char *pt, *timestr, vbuff[1025];
  	time_t currtime;
  	struct stat sb;
***************
*** 140,146 ****
      if(logg_file) {
  	if(!logg_fd) {
  	    old_umask = umask(0037);
! 	    if((logg_fd = fopen(logg_file, "a")) == NULL) {
  		umask(old_umask);
  #ifdef CL_THREAD_SAFE
  		pthread_mutex_unlock(&logg_mutex);
--- 151,157 ----
      if(logg_file) {
  	if(!logg_fd) {
  	    old_umask = umask(0037);
! 	    if((logg_fd = fopen(logg_file, "at")) == NULL) {
  		umask(old_umask);
  #ifdef CL_THREAD_SAFE
  		pthread_mutex_unlock(&logg_mutex);
***************
*** 149,154 ****
--- 160,166 ----
  		return -1;
  	    } else umask(old_umask);
  
+ #ifdef	F_WRLCK
  	    if(logg_lock) {
  		memset(&fl, 0, sizeof(fl));
  		fl.l_type = F_WRLCK;
***************
*** 159,164 ****
--- 171,177 ----
  		    return -1;
  		}
  	    }
+ #endif
  	}
  
  	if(logg_size) {
*** /home/njh/src/clamav-devel/./shared/misc.c	2006-09-27 13:08:01.000000000 +0100
--- ./shared/misc.c	2006-09-17 16:55:56.000000000 +0100
***************
*** 37,52 ****
  #include <ctype.h>
  #include <errno.h>
  
! #include "shared/cfgparser.h"
! #include "shared/memory.h"
! #include "shared/output.h"
  
! #include "libclamav/clamav.h"
! #include "libclamav/cvd.h"
! 
! #ifndef	O_BINARY
! #define	O_BINARY	0
! #endif
  
  
  char *freshdbdir(void)
--- 37,48 ----
  #include <ctype.h>
  #include <errno.h>
  
! #include "clamav.h"
! #include "cfgparser.h"
! #include "memory.h"
! #include "output.h"
  
! #include "../libclamav/cvd.h"
  
  
  char *freshdbdir(void)
*** /home/njh/src/clamav-devel/./freshclam/manager.c	2006-09-15 13:11:55.000000000 +0100
--- ./freshclam/manager.c	2006-09-17 11:23:36.000000000 +0100
***************
*** 20,25 ****
--- 20,29 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 27,40 ****
--- 31,50 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <ctype.h>
+ #ifndef	C_WINDOWS
  #include <netinet/in.h>
  #include <netdb.h>
+ #endif
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
***************
*** 63,68 ****
--- 73,82 ----
  #define	O_BINARY	0
  #endif
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  
  static int wwwconnect(const char *server, const char *proxy, int pport, char *ip, const char *localip, int ctimeout)
  {
***************
*** 143,149 ****
--- 157,165 ----
  		else
  			port = 8080;
  
+ #ifndef	C_WINDOWS
  		endservent();
+ #endif
  #else
  		port = 8080;
  #endif
***************
*** 178,184 ****
  		break;
  	}
          logg("^Can't get information about %s: %s\n", hostpt, herr);
! 	close(socketfd);
  	return -1;
      }
  
--- 194,200 ----
  		break;
  	}
          logg("^Can't get information about %s: %s\n", hostpt, herr);
! 	closesocket(socketfd);
  	return -1;
      }
  
***************
*** 208,214 ****
  	}
      }
  
!     close(socketfd);
      return -2;
  }
  
--- 224,230 ----
  	}
      }
  
!     closesocket(socketfd);
      return -2;
  }
  
***************
*** 362,370 ****
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(write(sd, cmd, strlen(cmd)) < 0) {
  	logg("!remote_cvdhead: write failed\n");
! 	close(sd);
  	return NULL;
      }
  
--- 378,386 ----
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(send(sd, cmd, strlen(cmd), 0) < 0) {
  	logg("!remote_cvdhead: write failed\n");
! 	closesocket(sd);
  	return NULL;
      }
  
***************
*** 380,386 ****
  	if(cnt <= 0)
  	    break;
      }
!     close(sd);
  
      if(bread == -1) {
  	logg("!remote_cvdhead: Error while reading CVD header from %s\n", hostname);
--- 396,402 ----
  	if(cnt <= 0)
  	    break;
      }
!     closesocket(sd);
  
      if(bread == -1) {
  	logg("!remote_cvdhead: Error while reading CVD header from %s\n", hostname);
***************
*** 498,504 ****
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(write(sd, cmd, strlen(cmd)) < 0) {
  	logg("!getfile: Can't write to socket\n");
  	return 52;
      }
--- 514,520 ----
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(send(sd, cmd, strlen(cmd), 0) < 0) {
  	logg("!getfile: Can't write to socket\n");
  	return 52;
      }
***************
*** 536,542 ****
      /* check whether the resource actually existed or not */
      if((strstr(buffer, "HTTP/1.1 404")) != NULL || (strstr(buffer, "HTTP/1.0 404")) != NULL) { 
  	logg("!getfile: %s not found on remote server\n", srcfile);
! 	close(sd);
  	return 58;
      }
  
--- 552,558 ----
      /* check whether the resource actually existed or not */
      if((strstr(buffer, "HTTP/1.1 404")) != NULL || (strstr(buffer, "HTTP/1.0 404")) != NULL) { 
  	logg("!getfile: %s not found on remote server\n", srcfile);
! 	closesocket(sd);
  	return 58;
      }
  
***************
*** 565,571 ****
  	getcwd(currdir, sizeof(currdir));
  	logg("!getfile: Can't create new file %s in %s\n", destfile, currdir);
  	logg("Hint: The database directory must be writable for UID %d or GID %d\n", getuid(), getgid());
! 	close(sd);
  	return 57;
      }
  
--- 581,587 ----
  	getcwd(currdir, sizeof(currdir));
  	logg("!getfile: Can't create new file %s in %s\n", destfile, currdir);
  	logg("Hint: The database directory must be writable for UID %d or GID %d\n", getuid(), getgid());
! 	closesocket(sd);
  	return 57;
      }
  
***************
*** 578,584 ****
  	    logg("getfile: Can't write %d bytes to %s\n", bread, destfile);
  	    unlink(destfile);
  	    close(fd);
! 	    close(sd);
  	    return 57; /* FIXME */
  	}
  
--- 594,600 ----
  	    logg("getfile: Can't write %d bytes to %s\n", bread, destfile);
  	    unlink(destfile);
  	    close(fd);
! 	    closesocket(sd);
  	    return 57; /* FIXME */
  	}
  
***************
*** 595,601 ****
              fflush(stdout);
          }
      }
!     close(sd);
      close(fd);
  
      if(totalsize > 0)
--- 611,617 ----
              fflush(stdout);
          }
      }
!     closesocket(sd);
      close(fd);
  
      if(totalsize > 0)
***************
*** 722,728 ****
          return ret;
      }
  
!     if((fd = open(tempname, O_RDONLY)) == -1) {
  	logg("!getpatch: Can't open %s for reading\n", tempname);
          unlink(tempname);
          free(tempname);
--- 738,744 ----
          return ret;
      }
  
!     if((fd = open(tempname, O_RDONLY|O_BINARY)) == -1) {
  	logg("!getpatch: Can't open %s for reading\n", tempname);
          unlink(tempname);
          free(tempname);
***************
*** 971,979 ****
  	char ipaddr[16], *dnsreply = NULL, *pt, *localip = NULL, *newver = NULL;
  	const char *arg = NULL;
  	struct cfgstruct *cpt;
- #ifdef HAVE_RESOLV_H
  	const char *dnsdbinfo;
- #endif
  
      time(&currtime);
      logg("ClamAV update process started at %s", ctime(&currtime));
--- 987,993 ----
***************
*** 983,989 ****
      logg("See the FAQ at http://www.clamav.net/faq.html for an explanation.\n");
  #endif
  
- #ifdef HAVE_RESOLV_H
      dnsdbinfo = cfgopt(copt, "DNSDatabaseInfo")->strarg;
  
      if(opt_check(opt, "no-dns")) {
--- 997,1002 ----
***************
*** 1042,1052 ****
  	    }
  	}
  
! 	if(!dnsreply) {
  	    logg("^Invalid DNS reply. Falling back to HTTP mode.\n");
  	}
      }
- #endif /* HAVE_RESOLV_H */
  
      if(opt_check(opt, "local-address")) {
          localip = opt_arg(opt, "local-address");
--- 1055,1064 ----
  	    }
  	}
  
! 	if((!dnsreply) && (!ttl)) {
  	    logg("^Invalid DNS reply. Falling back to HTTP mode.\n");
  	}
      }
  
      if(opt_check(opt, "local-address")) {
          localip = opt_arg(opt, "local-address");
*** /home/njh/src/clamav-devel/./freshclam/nonblock.c	2006-09-15 13:11:55.000000000 +0100
--- ./freshclam/nonblock.c	2006-09-15 13:11:28.000000000 +0100
***************
*** 15,20 ****
--- 15,23 ----
   *  along with this program; if not, write to the Free Software
   *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   */
+ #ifdef	_MSC_VER
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,37 ****
  
  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <string.h>
  #include <ctype.h>
  #include <netinet/in.h>
  #include <netdb.h>
  #include <sys/types.h>
! #include <sys/socket.h>
  #include <sys/time.h>
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
--- 27,46 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <ctype.h>
+ #ifndef	C_WINDOWS
  #include <netinet/in.h>
  #include <netdb.h>
+ #endif
  #include <sys/types.h>
! /*#include <sys/socket.h>	/* in nonblock.h */
! #ifndef	C_WINDOWS
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
***************
*** 40,45 ****
--- 49,64 ----
  
  #include "shared/output.h"
  
+ #if	(!defined(EALREADY)) && (defined(WSAEALREADY))
+ #define EALREADY	WSAEALREADY
+ #endif
+ #if	(!defined(EINPROGRESS)) && (defined(WSAEINPROGRESS))
+ #define EINPROGRESS	WSAEINPROGRESS
+ #endif
+ #if	(!defined(EISCONN)) && (defined(WSAEISCONN))
+ #define EISCONN	WSAEISCONN
+ #endif
+ 
  #ifdef SO_ERROR
  
  #ifndef timercmp
***************
*** 229,234 ****
--- 248,254 ----
  
  static long nonblock_fcntl(int sock)
  {
+ #ifdef	F_GETFL
  	long fcntl_flags; /* Save fcntl() flags */
  
  	fcntl_flags = fcntl(sock, F_GETFL, 0);
***************
*** 242,257 ****
--- 262,282 ----
  	}
  
  	return fcntl_flags;
+ #else
+ 	return 0;
+ #endif
  }
  
  static void restore_fcntl(int sock, long fcntl_flags)
  {
+ #ifdef	F_SETFL
  	if (fcntl_flags != -1) {
  		if (fcntl(sock, F_SETFL, fcntl_flags)) {
  			logg("restore_fcntl: restoring: fcntl(%d, F_SETFL): errno=%d: %s\n",
  			     sock, errno, strerror(errno));
  		}
  	}
+ #endif
  }
  
  /*
*** /home/njh/src/clamav-devel/./freshclam/nonblock.h	2006-09-04 09:24:02.000000000 +0100
--- ./freshclam/nonblock.h	2006-09-04 09:35:10.000000000 +0100
***************
*** 24,30 ****
--- 24,32 ----
  #endif
  
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
+ #endif
  
  /*
  	wait_connect(): wrapper for connect(), with explicit 'secs' timeout
*** /home/njh/src/clamav-devel/./freshclam/execute.c	2006-08-31 08:38:17.000000000 +0100
--- ./freshclam/execute.c	2006-08-31 09:18:22.000000000 +0100
***************
*** 23,31 ****
--- 23,36 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <errno.h>
+ #ifdef	C_WINDOWS
+ #include <process.h>
+ #endif
  
  #include "shared/output.h"
  
***************
*** 35,40 ****
--- 40,55 ----
  
  void execute( const char *type, const char *text )
  {
+ #ifdef        C_WINDOWS
+ 	if(active_children < MAX_CHILDREN) {
+ 		if(spawnlp(P_NOWAIT, text, text, NULL) == -1) {
+ 			logg("^%s: couldn't execute \"%s\".\n", type, text);
+ 			return;
+ 		}
+ 			active_children++;
+ 	} else
+ 		logg("^%s: already %d processes active.\n", type, active_children);
+ #else
  	pid_t pid;
  
  	if ( active_children<MAX_CHILDREN )
***************
*** 55,58 ****
--- 70,74 ----
  	{
  		logg("^%s: already %d processes active.\n", type, active_children);
  	}
+ #endif
  }
*** /home/njh/src/clamav-devel/./freshclam/notify.c	2006-08-31 08:53:35.000000000 +0100
--- ./freshclam/notify.c	2006-08-31 09:26:34.000000000 +0100
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
+ 
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,45 ****
--- 29,60 ----
  #ifdef BUILD_CLAMD
  
  #include <stdio.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/un.h>
  #include <netinet/in.h>
  #include <arpa/inet.h>
  #include <netdb.h>
+ #endif
  #include <string.h>
  
  #include "shared/cfgparser.h"
  #include "shared/output.h"
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  int notify(const char *cfgfile)
  {
  	char buff[20];
+ #ifndef	C_WINDOWS
  	struct sockaddr_un server;
+ #endif
          struct sockaddr_in server2;
  	struct hostent *he;
  	struct cfgstruct *copt, *cpt;
***************
*** 52,57 ****
--- 67,73 ----
  	return 1;
      }
  
+ #ifndef	C_WINDOWS
      if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
  	socktype = "UNIX";
  	server.sun_family = AF_UNIX;
***************
*** 64,76 ****
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server, sizeof(struct sockaddr_un)) < 0) {
! 	    close(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd through %s\n", cpt->strarg);
  	    perror("connect()");
  	    return 1;
  	}
  
!     } else if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
  
  	socktype = "TCP";
  #ifdef PF_INET
--- 80,94 ----
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server, sizeof(struct sockaddr_un)) < 0) {
! 	    closesocket(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd through %s\n", cpt->strarg);
  	    perror("connect()");
  	    return 1;
  	}
  
!     } else
! #endif
!     if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
  
  	socktype = "TCP";
  #ifdef PF_INET
***************
*** 98,104 ****
  
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    close(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd on %s:%d\n",
  		    inet_ntoa(server2.sin_addr), ntohs(server2.sin_port));
  	    perror("connect()");
--- 116,122 ----
  
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    closesocket(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd on %s:%d\n",
  		    inet_ntoa(server2.sin_addr), ntohs(server2.sin_port));
  	    perror("connect()");
***************
*** 110,132 ****
  	return 1;
      }
  
!     if(write(sockd, "RELOAD", 6) < 0) {
  	logg("^Clamd was NOT notified: Could not write to %s socket\n", socktype);
  	perror("write()");
! 	close(sockd);
  	return 1;
      }
  
      /* TODO: Handle timeout */
      memset(buff, 0, sizeof(buff));
!     if((bread = read(sockd, buff, sizeof(buff))) > 0)
  	if(!strstr(buff, "RELOADING")) {
  	    logg("^Clamd was NOT notified: Unknown answer from clamd: '%s'\n", buff);
! 	    close(sockd);
  	    return 1;
  	}
  
!     close(sockd);
      logg("Clamd successfully notified about the update.\n");
      return 0;
  }
--- 128,150 ----
  	return 1;
      }
  
!     if(send(sockd, "RELOAD", 6, 0) < 0) {
  	logg("^Clamd was NOT notified: Could not write to %s socket\n", socktype);
  	perror("write()");
! 	closesocket(sockd);
  	return 1;
      }
  
      /* TODO: Handle timeout */
      memset(buff, 0, sizeof(buff));
!     if((bread = recv(sockd, buff, sizeof(buff), 0)) > 0)
  	if(!strstr(buff, "RELOADING")) {
  	    logg("^Clamd was NOT notified: Unknown answer from clamd: '%s'\n", buff);
! 	    closesocket(sockd);
  	    return 1;
  	}
  
!     closesocket(sockd);
      logg("Clamd successfully notified about the update.\n");
      return 0;
  }
*** /home/njh/src/clamav-devel/./clamd/clamd.c	2006-09-15 13:30:20.000000000 +0100
--- ./clamd/clamd.c	2006-09-15 13:29:56.000000000 +0100
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! 
  #ifdef	_MSC_VER
  #include <winsock.h>
  #endif
--- 16,22 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
!  
  #ifdef	_MSC_VER
  #include <winsock.h>
  #endif
*** /home/njh/src/clamav-devel/./clamd/localserver.c	2006-09-13 18:50:46.000000000 +0100
--- ./clamd/localserver.c	2006-09-13 20:15:20.000000000 +0100
***************
*** 24,32 ****
--- 24,36 ----
  #include <stdio.h>
  #include <string.h>
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
+ #endif
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <sys/un.h>
+ #endif
  #include <errno.h>
  
  #include "libclamav/clamav.h"
*** /home/njh/src/clamav-devel/./clamdscan/clamdscan.c	2006-05-15 19:30:18.000000000 +0100
--- ./clamdscan/clamdscan.c	2006-08-04 11:37:50.000000000 +0100
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+  
+ #ifdef	_MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,31 ****
--- 29,44 ----
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifdef	C_WINDOWS
+ #ifdef	CL_THREAD_SAFE
+ #include <pthread.h>
+ #endif
+ #else
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <signal.h>
  
***************
*** 49,62 ****
  {
  	int ds, dms, ret, infected;
  	struct timeval t1, t2;
  	struct timezone tz;
  	time_t starttime;
  	struct optstruct *opt;
  	char *clamdscan_accepted[] = { "help", "version", "verbose", "quiet",
  				  "stdout", "log", "move", "remove",
  				  "config-file", "no-summary",
  				  "disable-summary", NULL };
! 
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, clamdscan_accepted);
      if(!opt) {
--- 62,83 ----
  {
  	int ds, dms, ret, infected;
  	struct timeval t1, t2;
+ #ifndef	C_WINDOWS
  	struct timezone tz;
+ #endif
  	time_t starttime;
  	struct optstruct *opt;
  	char *clamdscan_accepted[] = { "help", "version", "verbose", "quiet",
  				  "stdout", "log", "move", "remove",
  				  "config-file", "no-summary",
  				  "disable-summary", NULL };
! 				  
! #ifdef	C_WINDOWS
! 	if(!pthread_win32_process_attach_np()) {
! 		mprintf("!Can't start the win32 pthreads layer\n");
! 		return 1;
! 	}
! #endif
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, clamdscan_accepted);
      if(!opt) {
***************
*** 105,117 ****
      time(&starttime);
      /* ctime() does \n, but I need it once more */
  
!     gettimeofday(&t1, &tz);
  
      ret = client(opt, &infected);
  
      /* TODO: Implement STATUS in clamd */
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
  	gettimeofday(&t2, &tz);
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
--- 126,146 ----
      time(&starttime);
      /* ctime() does \n, but I need it once more */
  
! #ifdef	C_WINDOWS
! 	gettimeofday(&t1, NULL);
! #else
! 	gettimeofday(&t1, &tz);
! #endif
  
      ret = client(opt, &infected);
  
      /* TODO: Implement STATUS in clamd */
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
+ #ifdef	C_WINDOWS
+ 	gettimeofday(&t2, NULL);
+ #else
  	gettimeofday(&t2, &tz);
+ #endif
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
***************
*** 128,133 ****
--- 157,171 ----
      }
  
      opt_free(opt);
+ 
+ #ifdef	C_WINDOWS
+ 	WSACleanup();
+ 	if(!pthread_win32_process_detach_np()) {
+ 		mprintf("!Can't stop the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
      exit(ret);
  }
  
*** /home/njh/src/clamav-devel/./clamdscan/client.c	2006-09-12 09:09:03.000000000 +0100
--- ./clamdscan/client.c	2006-09-12 10:37:54.000000000 +0100
***************
*** 16,37 ****
--- 16,44 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef	_MSC_VER
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
  #endif
  
  #include <stdio.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/un.h>
  #include <netinet/in.h>
  #include <arpa/inet.h>
  #include <netdb.h>
  #include <utime.h>
+ #endif
  #include <errno.h>
  
  #ifdef HAVE_SYS_UIO_H
***************
*** 54,65 ****
--- 61,140 ----
  # define SOCKET_INET	AF_INET
  #endif
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  /* #define ENABLE_FD_PASSING	    FIXME: Doesn't work yet */
  
  void move_infected(const char *filename, const struct optstruct *opt);
  int notremoved = 0, notmoved = 0;
  static int hwaccel = 0;
  
+ #ifdef	C_WINDOWS
+ static  int     get_a_line(int sockd, char *buf, size_t len);
+ 
+ static int
+ dsresult(int sockd, const struct optstruct *opt)
+ {
+ 	char buff[BUFSIZ], *pt;
+ 	int infected = 0, waserror = 0;
+ 
+ 	while(get_a_line(sockd, buff, sizeof(buff))) {
+ 		if(strstr(buff, "FOUND\n")) {
+ 			infected++;
+ 			logg("%s", buff);
+ 			if(opt_check(opt, "move")) {
+ 				/* filename: Virus FOUND */
+ 				if((pt = strrchr(buff, ':'))) {
+ 					*pt = 0;
+ 					move_infected(buff, opt);
+ 				} else
+ 					mprintf("@Broken data format. File not moved.\n");
+ 			} else if(opt_check(opt, "remove")) {
+ 				if(!(pt = strrchr(buff, ':')))
+ 					mprintf("@Broken data format. File not removed.\n");
+ 				else {
+ 					*pt = 0;
+ 					if(unlink(buff)) {
+ 						mprintf("%s: Can't remove.\n", buff);
+ 						logg("%s: Can't remove.\n", buff);
+ 						notremoved++;
+ 					} else {
+ 						mprintf("%s: Removed.\n", buff);
+ 						logg("%s: Removed.\n", buff);
+ 					}
+ 				}
+ 			}
+ 		}
+ 
+ 		if(strstr(buff, "ERROR\n")) {
+ 			logg("%s", buff);
+ 			waserror = 1;
+ 		}
+ 	}
+ 
+ 	return infected ? infected : (waserror ? -1 : 0);
+ }
+ 
+ static int
+ get_a_line(int sockd, char *buf, size_t len)
+ {
+ 	char *ptr;
+ 
+ 	for(ptr = buf; ptr < &buf[len]; ptr++) {
+ 		/* FIXME: very inefficient to call recv so many times */
+ 		if(recv(sockd, ptr, sizeof(char), 0) <= 0)
+ 			return 0;
+ 		if(*ptr == '\n') {
+ 			*++ptr = '\0';
+ 			return 1;
+ 		}
+ 	}
+ 	return 1;
+ }
+ 
+ #else
  static int dsresult(int sockd, const struct optstruct *opt)
  {
  	int infected = 0, waserror = 0;
***************
*** 67,76 ****
  	FILE *fd;
  
  
! #ifndef C_OS2
      if((fd = fdopen(dup(sockd), "r")) == NULL) {
! #else /* FIXME: accoriding to YD OS/2 does not support dup() for sockets */
!     if((fd = fdopen(sockd, "r")) == NULL) {
  #endif
  	logg("^Can't open descriptor for reading.\n");
  	return -1;
--- 142,151 ----
  	FILE *fd;
  
  
! #ifndef (C_OS2)
      if((fd = fdopen(dup(sockd), "r")) == NULL) {
! #else /* FIXME: according to YD OS/2 does not support dup() for sockets */
!     if((fd = fdopen(sockd, "rb")) == NULL) {
  #endif
  	logg("^Can't open descriptor for reading.\n");
  	return -1;
***************
*** 118,123 ****
--- 193,199 ----
  
      return infected ? infected : (waserror ? -1 : 0);
  }
+ #endif	/* C_WINDOWS */
  
  static int dsfile(int sockd, const char *scantype, const char *filename, const struct optstruct *opt)
  {
***************
*** 128,134 ****
      scancmd = mcalloc(strlen(filename) + 20, sizeof(char));
      sprintf(scancmd, "%s %s", scantype, filename);
  
!     if(write(sockd, scancmd, strlen(scancmd)) <= 0) {
  	logg("^Can't write to the socket.\n");
  	free(scancmd);
  	return -1;
--- 204,210 ----
      scancmd = mcalloc(strlen(filename) + 20, sizeof(char));
      sprintf(scancmd, "%s %s", scantype, filename);
  
!     if(send(sockd, scancmd, strlen(scancmd), 0) <= 0) {
  	logg("^Can't write to the socket.\n");
  	free(scancmd);
  	return -1;
***************
*** 202,208 ****
  	char buff[4096], *pt;
  
  
!     if(write(sockd, "STREAM", 6) <= 0) {
  	logg("^Can't write to the socket.\n");
  	return 2;
      }
--- 278,284 ----
  	char buff[4096], *pt;
  
  
!     if(send(sockd, "STREAM", 6, 0) <= 0) {
  	logg("^Can't write to the socket.\n");
  	return 2;
      }
***************
*** 312,318 ****
--- 388,396 ----
  
  static int dconnect(const struct optstruct *opt)
  {
+ #ifndef	C_WINDOWS
  	struct sockaddr_un server;
+ #endif
  	struct sockaddr_in server2;
  	struct hostent *he;
  	struct cfgstruct *copt, *cpt;
***************
*** 328,341 ****
  	return -1;
      }
  
      memset((char *) &server, 0, sizeof(server));
      memset((char *) &server2, 0, sizeof(server2));
  
      /* Set default address to connect to */
      server2.sin_addr.s_addr = inet_addr("127.0.0.1");    
  
-     if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
  
  	server.sun_family = AF_UNIX;
  	strncpy(server.sun_path, cpt->strarg, sizeof(server.sun_path));
  
--- 406,424 ----
  	return -1;
      }
  
+ #ifndef	C_WINDOWS
      memset((char *) &server, 0, sizeof(server));
+ #endif
      memset((char *) &server2, 0, sizeof(server2));
  
      /* Set default address to connect to */
      server2.sin_addr.s_addr = inet_addr("127.0.0.1");    
  
  
+     if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
+ #ifdef	C_WINDOWS
+ 	logg("^LocalSocket is not supported under Windows");
+ #else
  	server.sun_family = AF_UNIX;
  	strncpy(server.sun_path, cpt->strarg, sizeof(server.sun_path));
  
***************
*** 353,360 ****
--- 436,452 ----
  	    freecfg(copt);
  	    return -1;
  	}
+ #endif
  
      } else if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
+ #ifdef  C_WINDOWS
+                 WSADATA wsaData;
+ 
+                 if(WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR) {
+                         logg("!Error at WSAStartup(): %d\n", WSAGetLastError());
+                         return -1;
+                 }
+ #endif
  
  	if((sockd = socket(SOCKET_INET, SOCK_STREAM, 0)) < 0) {
  	    perror("socket()");
***************
*** 368,374 ****
  
  	if((cpt = cfgopt(copt, "TCPAddr"))->enabled) {
  	    if ((he = gethostbyname(cpt->strarg)) == 0) {
! 		close(sockd);
  		perror("gethostbyname()");
  		logg("^Can't lookup clamd hostname.\n");
  		freecfg(copt);
--- 460,466 ----
  
  	if((cpt = cfgopt(copt, "TCPAddr"))->enabled) {
  	    if ((he = gethostbyname(cpt->strarg)) == 0) {
! 		closesocket(sockd);
  		perror("gethostbyname()");
  		logg("^Can't lookup clamd hostname.\n");
  		freecfg(copt);
***************
*** 378,384 ****
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    close(sockd);
  	    perror("connect()");
  	    logg("^Can't connect to clamd.\n");
  	    freecfg(copt);
--- 470,476 ----
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    closesocket(sockd);
  	    perror("connect()");
  	    logg("^Can't connect to clamd.\n");
  	    freecfg(copt);
***************
*** 433,439 ****
  	else
  	    errors++;
  
! 	close(sockd);
  
  #if defined(ENABLE_FD_PASSING) && defined(HAVE_SENDMSG) && (defined(HAVE_ACCRIGHTS_IN_MSGHDR) || defined(HAVE_CONTROL_IN_MSGHDR)) && !defined(C_CYGWIN)
      } else if(!strcmp(opt->filename, "-")) { /* scan data from stdin */
--- 525,531 ----
  	else
  	    errors++;
  
! 	closesocket(sockd);
  
  #if defined(ENABLE_FD_PASSING) && defined(HAVE_SENDMSG) && (defined(HAVE_ACCRIGHTS_IN_MSGHDR) || defined(HAVE_CONTROL_IN_MSGHDR)) && !defined(C_CYGWIN)
      } else if(!strcmp(opt->filename, "-")) { /* scan data from stdin */
***************
*** 494,500 ****
  			else
  			    errors++;
  
! 			close(sockd);
  			break;
  
  		    default:
--- 586,592 ----
  			else
  			    errors++;
  
! 			closesocket(sockd);
  			break;
  
  		    default:
***************
*** 515,521 ****
--- 607,615 ----
  	char *movedir, *movefilename, *tmp, numext[4 + 1];
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
+ #ifndef	C_WINDOWS
  	struct utimbuf ubuf;
+ #endif
  
  
      if(!(movedir = opt_arg(opt, "move"))) {
***************
*** 600,608 ****
--- 694,704 ----
  	chmod(movefilename, fstat.st_mode);
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  
+ #ifndef	C_WINDOWS
  	ubuf.actime = fstat.st_atime;
  	ubuf.modtime = fstat.st_mtime;
  	utime(movefilename, &ubuf);
+ #endif
  
  	if(unlink(filename)) {
  	    logg("^cannot unlink '%s': %s\n", filename, strerror(errno));
*** /home/njh/src/clamav-devel/./clamconf/clamconf.c	2006-09-15 13:38:59.000000000 +0100
--- ./clamconf/clamconf.c	2006-09-15 13:38:42.000000000 +0100
***************
*** 26,32 ****
--- 26,34 ----
  #include <string.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "cfgparser.h"
  #define _GNU_SOURCE
*** /home/njh/src/clamav-devel/./sigtool/sigtool.c	2006-09-27 11:29:31.000000000 +0100
--- ./sigtool/sigtool.c	2006-09-13 17:48:54.000000000 +0100
***************
*** 270,276 ****
  	int i;
  	struct stat sb;
  	char file[32], *md5;
! 	char *extlist[] = { "db", "fp", "hdb", "mdb", "ndb", "pdb", "rmd", "zmd", "sdb", NULL };
  
  
      snprintf(file, sizeof(file), "%s.info", db);
--- 270,276 ----
  	int i;
  	struct stat sb;
  	char file[32], *md5;
! 	char *extlist[] = { "db", "fp", "hdb", "ndb", "rmd", "zmd", "sdb", NULL };
  
  
      snprintf(file, sizeof(file), "%s.info", db);
***************
*** 345,353 ****
  
      if(stat("main.db", &foo) == -1 && stat("daily.db", &foo) == -1 &&
         stat("main.hdb", &foo) == -1 && stat("daily.hdb", &foo) == -1 &&
-        stat("main.mdb", &foo) == -1 && stat("daily.mdb", &foo) == -1 &&
         stat("main.ndb", &foo) == -1 && stat("daily.ndb", &foo) == -1 &&
-        stat("main.pdb", &foo) == -1 && stat("daily.pdb", &foo) == -1 &&
         stat("main.sdb", &foo) == -1 && stat("daily.sdb", &foo) == -1 &&
         stat("main.zmd", &foo) == -1 && stat("daily.zmd", &foo) == -1 &&
         stat("main.rmd", &foo) == -1 && stat("daily.rmd", &foo) == -1)
--- 345,351 ----
***************
*** 368,374 ****
      } else {
  	lines = countlines("main.db") + countlines("daily.db") +
  		countlines("main.hdb") + countlines("daily.hdb") +
- 		countlines("main.mdb") + countlines("daily.mdb") +
  		countlines("main.ndb") + countlines("daily.ndb") +
  		countlines("main.sdb") + countlines("daily.sdb") +
  		countlines("main.zmd") + countlines("daily.zmd") +
--- 366,371 ----
***************
*** 484,493 ****
  				 "main.ndb", "daily.ndb", "main.sdb",
  				 "daily.sdb", "main.zmd", "daily.zmd",
  				 "main.rmd", "daily.rmd", "main.fp",
! 				 "daily.fp", "main.mdb", "daily.mdb",
! 				 "daily.info", "main.info", "main.wdb",
! 				 "daily.wdb", "main.pdb", "daily.pdb",
! 				 NULL };
  		args[2] = tarfile;
  		if(!opt_check(opt, "debug")) {
  		    if((dn = open("/dev/null", O_WRONLY)) == -1) {
--- 481,487 ----
  				 "main.ndb", "daily.ndb", "main.sdb",
  				 "daily.sdb", "main.zmd", "daily.zmd",
  				 "main.rmd", "daily.rmd", "main.fp",
! 				 "daily.fp", "daily.info", "main.info", NULL };
  		args[2] = tarfile;
  		if(!opt_check(opt, "debug")) {
  		    if((dn = open("/dev/null", O_WRONLY)) == -1) {
***************
*** 818,824 ****
  	    if(strcmp(dent->d_name, ".") && strcmp(dent->d_name, "..") &&
  	    (cli_strbcasestr(dent->d_name, ".db")  ||
  	     cli_strbcasestr(dent->d_name, ".hdb") ||
- 	     cli_strbcasestr(dent->d_name, ".mdb") ||
  	     cli_strbcasestr(dent->d_name, ".ndb") ||
  	     cli_strbcasestr(dent->d_name, ".sdb") ||
  	     cli_strbcasestr(dent->d_name, ".zmd") ||
--- 812,817 ----
***************
*** 946,952 ****
  	    mprintf("%s\n", start);
  	}
  
!     } else if(cli_strbcasestr(filename, ".hdb") || cli_strbcasestr(filename, ".mdb")) { /* hash database */
  
  	while(fgets(buffer, FILEBUFF, fd)) {
  	    line++;
--- 939,945 ----
  	    mprintf("%s\n", start);
  	}
  
!     } else if(cli_strbcasestr(filename, ".hdb")) { /* hash database */
  
  	while(fgets(buffer, FILEBUFF, fd)) {
  	    line++;
*** /home/njh/src/clamav-devel/./sigtool/vba.c	2006-04-09 20:59:28.000000000 +0100
--- ./sigtool/vba.c	2006-08-04 13:32:54.000000000 +0100
***************
*** 17,30 ****
--- 17,38 ----
   *  MA 02110-1301, USA.
   */
  
+ #if HAVE_CONFIG_H
+ #include "clamav-config.h"
+ #endif
+ 
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
+ #ifndef	C_WINDOWS
  #include <dirent.h>
+ #endif
  #include <clamav.h>
  #include <ctype.h>
  
***************
*** 963,969 ****
--- 971,981 ----
  
      if ((dd = opendir (dirname)) != NULL) {
  	while ((dent = readdir (dd))) {
+ #if  (!defined(C_CYGWIN)) && (!defined(C_WINDOWS))
  	    if (dent->d_ino) {
+ #else
+ 	 {
+ #endif
  		if (strcmp (dent->d_name, ".") && strcmp (dent->d_name, "..")) {
  		    /* build the full name */
  		    fname = (char *) cli_calloc (strlen (dirname) + strlen (dent->d_name) + 2, sizeof (char));
***************
*** 1120,1126 ****
--- 1132,1142 ----
  
      if ((dd = opendir (dirname)) != NULL) {
  	while ((dent = readdir (dd))) {
+ #if  (!defined(C_CYGWIN)) && (!defined(C_WINDOWS))
  	    if (dent->d_ino) {
+ #else
+ 	    {
+ #endif
  		if (strcmp (dent->d_name, ".") && strcmp (dent->d_name, "..")) {
  		    /* build the full name */
  		    fname = calloc (strlen (dirname) + strlen (dent->d_name) + 2, sizeof (char));
