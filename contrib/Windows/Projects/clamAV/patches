*** /home/njh/src/clamav-devel/./libclamav/htmlnorm.c	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/htmlnorm.c	2006-07-31 20:43:34.000000000 +0100
***************
*** 23,29 ****
--- 23,31 ----
   */
  
  #include <stdio.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
***************
*** 450,456 ****
  		}
  		
  		snprintf(filename, 1024, "%s/comment.html", dirname);
! 		file_buff_o1->fd = open(filename, O_WRONLY|O_CREAT|O_TRUNC, S_IWUSR|S_IRUSR);
  		if (!file_buff_o1->fd) {
  			cli_dbgmsg("open failed: %s\n", filename);
  			free(file_buff_o1);
--- 452,458 ----
  		}
  		
  		snprintf(filename, 1024, "%s/comment.html", dirname);
! 		file_buff_o1->fd = open(filename, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IWUSR|S_IRUSR);
  		if (!file_buff_o1->fd) {
  			cli_dbgmsg("open failed: %s\n", filename);
  			free(file_buff_o1);
***************
*** 461,467 ****
  		}
  
  		snprintf(filename, 1024, "%s/nocomment.html", dirname);
! 		file_buff_o2->fd = open(filename, O_WRONLY|O_CREAT|O_TRUNC, S_IWUSR|S_IRUSR);
  		if (!file_buff_o2->fd) {
  			cli_dbgmsg("open failed: %s\n", filename);
  			close(file_buff_o1->fd);
--- 463,469 ----
  		}
  
  		snprintf(filename, 1024, "%s/nocomment.html", dirname);
! 		file_buff_o2->fd = open(filename, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IWUSR|S_IRUSR);
  		if (!file_buff_o2->fd) {
  			cli_dbgmsg("open failed: %s\n", filename);
  			close(file_buff_o1->fd);
***************
*** 473,479 ****
  		}
  
  		snprintf(filename, 1024, "%s/script.html", dirname);
! 		file_buff_script->fd = open(filename, O_WRONLY|O_CREAT|O_TRUNC, S_IWUSR|S_IRUSR);
  		if (!file_buff_script->fd) {
  			cli_dbgmsg("open failed: %s\n", filename);
  			close(file_buff_o1->fd);
--- 475,481 ----
  		}
  
  		snprintf(filename, 1024, "%s/script.html", dirname);
! 		file_buff_script->fd = open(filename, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IWUSR|S_IRUSR);
  		if (!file_buff_script->fd) {
  			cli_dbgmsg("open failed: %s\n", filename);
  			close(file_buff_o1->fd);
***************
*** 1047,1053 ****
  				snprintf(filename, 1024, "%s/rfc2397", dirname);
  				tmp_file = cli_gentemp(filename);
  				cli_dbgmsg("RFC2397 data file: %s\n", tmp_file);
! 				file_tmp_o1->fd = open(tmp_file, O_WRONLY|O_CREAT|O_TRUNC, S_IWUSR|S_IRUSR);
  				free(tmp_file);
  				if (!file_tmp_o1->fd) {
  					cli_dbgmsg("open failed: %s\n", filename);
--- 1049,1055 ----
  				snprintf(filename, 1024, "%s/rfc2397", dirname);
  				tmp_file = cli_gentemp(filename);
  				cli_dbgmsg("RFC2397 data file: %s\n", tmp_file);
! 				file_tmp_o1->fd = open(tmp_file, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IWUSR|S_IRUSR);
  				free(tmp_file);
  				if (!file_tmp_o1->fd) {
  					cli_dbgmsg("open failed: %s\n", filename);
***************
*** 1244,1250 ****
  	}
  	
  	snprintf(filename, 1024, "%s/screnc.html", dirname);
! 	file_buff.fd = open(filename, O_WRONLY|O_CREAT|O_TRUNC, S_IWUSR|S_IRUSR);
  	file_buff.length = 0;
  	
  	if (!file_buff.fd) {
--- 1246,1252 ----
  	}
  	
  	snprintf(filename, 1024, "%s/screnc.html", dirname);
! 	file_buff.fd = open(filename, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IWUSR|S_IRUSR);
  	file_buff.length = 0;
  	
  	if (!file_buff.fd) {
*** /home/njh/src/clamav-devel/./libclamav/cvd.c	2006-07-25 17:52:00.000000000 +0100
--- ./libclamav/cvd.c	2006-09-02 21:10:50.000000000 +0100
***************
*** 29,36 ****
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <unistd.h>
! #include <zlib.h>
  #include <time.h>
  
  #include "clamav.h"
--- 29,38 ----
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
! #endif
! #include "zlib.h"
  #include <time.h>
  
  #include "clamav.h"
***************
*** 53,59 ****
      cli_dbgmsg("in cli_untgz()\n");
  
      if((infile = gzdopen(fd, "rb")) == NULL) {
! 	cli_errmsg("Can't gzdopen() descriptor %d\n", fd);
  	return -1;
      }
  
--- 55,61 ----
      cli_dbgmsg("in cli_untgz()\n");
  
      if((infile = gzdopen(fd, "rb")) == NULL) {
! 	cli_errmsg("Can't gzdopen() descriptor %d, errno = %d\n", fd, errno);
  	return -1;
      }
  
***************
*** 403,415 ****
      }
  
      if(cli_untgz(fd, dir)) {
  	cli_errmsg("cli_cvdload(): Can't unpack CVD file.\n");
  	free(dir);
  	return CL_ECVDEXTR;
      }
- 
      /* load extracted directory */
      ret = cl_load(dir, engine, signo, options);
  
      cli_rmdirs(dir);
      free(dir);
--- 405,419 ----
      }
  
      if(cli_untgz(fd, dir)) {
+ 		close(fd);
  	cli_errmsg("cli_cvdload(): Can't unpack CVD file.\n");
  	free(dir);
  	return CL_ECVDEXTR;
      }
      /* load extracted directory */
      ret = cl_load(dir, engine, signo, options);
+ 	if(ret != 0)
+ 		close(fd);
  
      cli_rmdirs(dir);
      free(dir);
*** /home/njh/src/clamav-devel/./libclamav/blob.c	2006-08-27 10:51:31.000000000 +0100
--- ./libclamav/blob.c	2006-08-28 11:55:52.000000000 +0100
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 16,22 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
*** /home/njh/src/clamav-devel/./libclamav/unrar/unrarfilter.c	2006-09-04 09:17:48.000000000 +0100
--- ./libclamav/unrar/unrarfilter.c	2006-09-04 09:19:02.000000000 +0100
***************
*** 20,27 ****
--- 20,33 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #if HAVE_CONFIG_H
+ #include "clamav-config.h"
+ #endif
  
+ 
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "unrar.h"
  #include "unrarfilter.h"
*** /home/njh/src/clamav-devel/./libclamav/unrar/unrar.h	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/unrar/unrar.h	2006-07-26 10:49:26.000000000 +0100
***************
*** 25,31 ****
--- 25,33 ----
  #define UNRAR_H 1
  
  #include <sys/types.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  /*	#define RAR_DEBUG */
  /*	#define RAR_HIGH_DEBUG */
***************
*** 107,112 ****
--- 109,122 ----
  	unsigned char mark[SIZEOF_MARKHEAD];
  } mark_header_t;
  
+ #ifndef HAVE_ATTRIB_PACKED
+ #define __attribute__(x)
+ #endif
+ 
+ #ifdef HAVE_PRAGMA_PACK
+ #pragma pack(1)
+ #endif
+ 
  typedef struct main_header_tag
  {
  	uint16_t head_crc __attribute__ ((packed));
*** /home/njh/src/clamav-devel/./libclamav/unrar/unrarvm.c	2006-09-05 09:36:01.000000000 +0100
--- ./libclamav/unrar/unrarvm.c	2006-09-05 09:36:24.000000000 +0100
***************
*** 319,325 ****
  {
  	int in_addr=bit_pos/8;
  	int in_bit=bit_pos&7;
! 	unsigned int bit_field=(uint)data[in_addr++];
  	bit_field|=(unsigned int)data[in_addr++] << 8;
  	bit_field|=(unsigned int)data[in_addr++] << 16;
  	bit_field|=(unsigned int)data[in_addr] << 24;
--- 319,325 ----
  {
  	int in_addr=bit_pos/8;
  	int in_bit=bit_pos&7;
! 	unsigned int bit_field=(unsigned int)data[in_addr++];
  	bit_field|=(unsigned int)data[in_addr++] << 8;
  	bit_field|=(unsigned int)data[in_addr++] << 16;
  	bit_field|=(unsigned int)data[in_addr] << 24;
*** /home/njh/src/clamav-devel/./libclamav/unrar/unrarppm.c	2006-09-01 08:52:58.000000000 +0100
--- ./libclamav/unrar/unrarppm.c	2006-09-01 08:53:54.000000000 +0100
***************
*** 41,50 ****
  
  const unsigned int UNIT_SIZE=sizeof(struct ppm_context);
  const unsigned int FIXED_UNIT_SIZE=12;
! const int INT_BITS=7, PERIOD_BITS=7, TOT_BITS=14, MAX_O=64;
  const int INTERVAL=1 << 7, BIN_SCALE=1 << 14, MAX_FREQ=124;
  const unsigned int TOP=1 << 24, BOT=1 << 15;
  
  /************* Start of Allocator code block ********************/
  
  static void sub_allocator_init(sub_allocator_t *sub_alloc)
--- 41,57 ----
  
  const unsigned int UNIT_SIZE=sizeof(struct ppm_context);
  const unsigned int FIXED_UNIT_SIZE=12;
! const int INT_BITS=7, PERIOD_BITS=7, TOT_BITS=14;
  const int INTERVAL=1 << 7, BIN_SCALE=1 << 14, MAX_FREQ=124;
  const unsigned int TOP=1 << 24, BOT=1 << 15;
  
+ #ifdef	_MSC_VER
+ #define	MAX_O	64
+ #else
+ const int	MAX_O = 64;
+ #endif
+ 
+ 
  /************* Start of Allocator code block ********************/
  
  static void sub_allocator_init(sub_allocator_t *sub_alloc)
*** /home/njh/src/clamav-devel/./libclamav/unrar/unrar.c	2006-09-04 09:20:04.000000000 +0100
--- ./libclamav/unrar/unrar.c	2006-09-04 09:20:32.000000000 +0100
***************
*** 29,35 ****
--- 29,37 ----
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <stdio.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <errno.h>
  #include <stdlib.h>
  #include <string.h>
***************
*** 44,50 ****
  #include "others.h"
  #include "cltypes.h"
  
! #define int64to32(x) ((uint)(x))
  #define rar_endian_convert_16(v)	le16_to_host(v)
  #define rar_endian_convert_32(v)	le32_to_host(v)
  
--- 46,52 ----
  #include "others.h"
  #include "cltypes.h"
  
! #define int64to32(x) ((unsigned int)(x))
  #define rar_endian_convert_16(v)	le16_to_host(v)
  #define rar_endian_convert_32(v)	le32_to_host(v)
  
*** /home/njh/src/clamav-devel/./libclamav/unrar/unrar15.c	2006-04-09 20:59:28.000000000 +0100
--- ./libclamav/unrar/unrar15.c	2006-07-26 18:41:24.000000000 +0100
***************
*** 503,506 ****
--- 503,507 ----
  		}
  	}
  	unp_write_buf_old(unpack_data);
+ 	return TRUE;
  }
*** /home/njh/src/clamav-devel/./libclamav/mspack/mspack.h	2006-04-09 20:59:28.000000000 +0100
--- ./libclamav/mspack/mspack.h	2006-07-25 17:42:28.000000000 +0100
***************
*** 127,133 ****
--- 127,135 ----
  #endif
  
  #include <sys/types.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  /**
   * System self-test function, to ensure both library and calling program
*** /home/njh/src/clamav-devel/./libclamav/mspack/system.h	2005-07-20 02:55:58.000000000 +0100
--- ./libclamav/mspack/system.h	2006-07-26 18:38:06.000000000 +0100
***************
*** 40,45 ****
--- 40,46 ----
  extern int mspack_valid_system(struct mspack_system *sys);
  
  /* inline memcmp() */
+ #ifndef	C_WINDOWS
  static inline int memcmp(const void *s1, const void *s2, size_t n) {
    unsigned char *c1 = (unsigned char *) s1;
    unsigned char *c2 = (unsigned char *) s2;
***************
*** 54,58 ****
--- 55,60 ----
    while (*e) e++;
    return e - s;
  }
+ #endif
  
  #endif
*** /home/njh/src/clamav-devel/./libclamav/others.h	2006-05-30 14:47:03.000000000 +0100
--- ./libclamav/others.h	2006-07-25 17:14:30.000000000 +0100
***************
*** 100,107 ****
--- 100,112 ----
  #define ROL(a,b) a = ( a << (b % (sizeof(a)<<3) ))  |  (a >> (  (sizeof(a)<<3)  -  (b % (sizeof(a)<<3 )) ) )
  #define ROR(a,b) a = ( a >> (b % (sizeof(a)<<3) ))  |  (a << (  (sizeof(a)<<3)  -  (b % (sizeof(a)<<3 )) ) )
  
+ #ifndef	FALSE
  #define FALSE (0)
+ #endif
+ 
+ #ifndef	TRUE
  #define TRUE (1)
+ #endif
  
  #ifndef MIN
  #define MIN(a, b)	(((a) < (b)) ? (a) : (b))
*** /home/njh/src/clamav-devel/./libclamav/readdb.c	2006-07-28 18:51:14.000000000 +0100
--- ./libclamav/readdb.c	2006-08-03 13:40:38.000000000 +0100
***************
*** 25,40 ****
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
  #include <unistd.h>
  #include <dirent.h>
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <sys/param.h>
  #include <fcntl.h>
  
  #include "clamav.h"
  #include "cvd.h"
! #include "strings.h"
  #include "matcher-ac.h"
  #include "matcher-bm.h"
  #include "others.h"
--- 25,48 ----
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifndef	C_WINDOWS
  #include <dirent.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_SYS_PARAM_H
  #include <sys/param.h>
+ #endif
  #include <fcntl.h>
  
  #include "clamav.h"
  #include "cvd.h"
! #ifdef	HAVE_STRINGS_H
! #include <strings.h>
! #endif
  #include "matcher-ac.h"
  #include "matcher-bm.h"
  #include "others.h"
***************
*** 1136,1142 ****
  #else
      while((dent = readdir(dd))) {
  #endif
! #ifndef C_INTERIX
  	if(dent->d_ino)
  #endif
  	{
--- 1144,1150 ----
  #else
      while((dent = readdir(dd))) {
  #endif
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	if(dent->d_ino)
  #endif
  	{
***************
*** 1252,1258 ****
  #else
      while((dent = readdir(dd))) {
  #endif
! #ifndef C_INTERIX
  	if(dent->d_ino)
  #endif
  	{
--- 1260,1266 ----
  #else
      while((dent = readdir(dd))) {
  #endif
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	if(dent->d_ino)
  #endif
  	{
***************
*** 1326,1332 ****
  #else
      while((dent = readdir(dd))) {
  #endif
! #ifndef C_INTERIX
  	if(dent->d_ino)
  #endif
  	{
--- 1334,1340 ----
  #else
      while((dent = readdir(dd))) {
  #endif
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	if(dent->d_ino)
  #endif
  	{
*** /home/njh/src/clamav-devel/./libclamav/elf.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/elf.c	2006-07-26 09:48:52.000000000 +0100
***************
*** 27,33 ****
--- 27,35 ----
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <time.h>
  
  #include "cltypes.h"
*** /home/njh/src/clamav-devel/./libclamav/matcher.c	2006-06-22 07:59:53.000000000 +0100
--- ./libclamav/matcher.c	2006-07-28 16:29:48.000000000 +0100
***************
*** 25,31 ****
--- 25,33 ----
  #include <ctype.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "clamav.h"
  #include "others.h"
***************
*** 396,402 ****
  	}
  
  	if(fileoff != (unsigned long int) off) {
! 	    cli_dbgmsg("Virus offset: %d, expected: %d (%s)\n", fileoff, off, virname);
  	    return 0;
  	}
      }
--- 398,404 ----
  	}
  
  	if(fileoff != (unsigned long int) off) {
! 	    cli_dbgmsg("Virus offset: %ld, expected: %ld (%s)\n", fileoff, off, virname);
  	    return 0;
  	}
      }
*** /home/njh/src/clamav-devel/./libclamav/matcher-ac.c	2006-07-28 18:51:14.000000000 +0100
--- ./libclamav/matcher-ac.c	2006-07-28 20:50:36.000000000 +0100
***************
*** 29,35 ****
--- 29,37 ----
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "clamav.h"
  #include "others.h"
*** /home/njh/src/clamav-devel/./libclamav/mbox.c	2006-08-25 11:10:13.000000000 +0100
--- ./libclamav/mbox.c	2006-08-25 12:14:46.000000000 +0100
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 16,22 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
*** /home/njh/src/clamav-devel/./libclamav/binhex.c	2006-07-31 10:19:52.000000000 +0100
--- ./libclamav/binhex.c	2006-08-11 21:05:12.000000000 +0100
***************
*** 18,25 ****
   *
   * Change History:
   * $Log: patches,v $
   * Revision 1.9  2006/09/05 12:45:22  njh
   * Fix to clamdscan crash and clamd nSCAN feature
   *
!  * Revision 1.22  2006/07/31 09:19:52  njh
!  * Use MAP_PRIVATE
   *
   * Revision 1.21  2006/07/01 16:17:35  njh
   * Added destroy flag
--- 18,25 ----
   *
   * Change History:
   * $Log: patches,v $
   * Revision 1.9  2006/09/05 12:45:22  njh
   * Fix to clamdscan crash and clamd nSCAN feature
   *
!  * Revision 1.1  2006/08/11 20:05:13  njh
!  * First Draft
   *
   * Revision 1.21  2006/07/01 16:17:35  njh
   * Added destroy flag
***************
*** 82,88 ****
   * First draft of binhex.c
   *
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #include "clamav.h"
  
--- 82,88 ----
   * First draft of binhex.c
   *
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #include "clamav.h"
  
*** /home/njh/src/clamav-devel/./libclamav/special.c	2006-04-09 20:59:28.000000000 +0100
--- ./libclamav/special.c	2006-07-26 12:18:00.000000000 +0100
***************
*** 17,29 ****
--- 17,37 ----
   *  MA 02110-1301, USA.
   */
  
+ #ifdef	_MSC_VER
+ #include <windows.h>
+ #endif
+ 
  #include "clamav-config.h"
  
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifndef	C_WINDOWS
  #include <netinet/in.h>
+ #endif
  #include <string.h>
  
  #include "clamav.h"
*** /home/njh/src/clamav-devel/./libclamav/filetypes.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/filetypes.c	2006-07-28 13:53:10.000000000 +0100
***************
*** 203,209 ****
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1   /* 0xfX */
  };
  
! cli_file_t cli_filetype(const char *buf, size_t buflen)
  {
  	int i, ascii = 1, len;
  
--- 203,209 ----
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1   /* 0xfX */
  };
  
! cli_file_t cli_filetype(const unsigned char *buf, size_t buflen)
  {
  	int i, ascii = 1, len;
  
*** /home/njh/src/clamav-devel/./libclamav/line.h	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/line.h	2006-08-11 21:05:12.000000000 +0100
***************
*** 17,22 ****
--- 17,25 ----
   *  MA 02110-1301, USA.
   *
   * $Log: patches,v $
   * Revision 1.9  2006/09/05 12:45:22  njh
   * Fix to clamdscan crash and clamd nSCAN feature
   *
+  * Revision 1.1  2006/08/11 20:05:13  njh
+  * First Draft
+  *
   * Revision 1.5  2006/04/09 19:59:27  kojm
   * update GPL headers with new address for FSF
   *
*** /home/njh/src/clamav-devel/./libclamav/text.h	2006-07-01 17:17:35.000000000 +0100
--- ./libclamav/text.h	2006-08-11 21:05:12.000000000 +0100
***************
*** 17,22 ****
--- 17,25 ----
   *  MA 02110-1301, USA.
   *
   * $Log: patches,v $
   * Revision 1.9  2006/09/05 12:45:22  njh
   * Fix to clamdscan crash and clamd nSCAN feature
   *
+  * Revision 1.1  2006/08/11 20:05:13  njh
+  * First Draft
+  *
   * Revision 1.9  2006/07/01 16:17:35  njh
   * Added destroy flag
   *
*** /home/njh/src/clamav-devel/./libclamav/filetypes.h	2006-04-24 17:28:05.000000000 +0100
--- ./libclamav/filetypes.h	2006-07-28 13:53:10.000000000 +0100
***************
*** 70,76 ****
      struct cli_matched_type *next;
  };
  
! cli_file_t cli_filetype(const char *buf, size_t buflen);
  cli_file_t cli_filetype2(int desc);
  int cli_addtypesigs(struct cl_engine *engine);
  
--- 70,76 ----
      struct cli_matched_type *next;
  };
  
! cli_file_t cli_filetype(const unsigned char *buf, size_t buflen);
  cli_file_t cli_filetype2(int desc);
  int cli_addtypesigs(struct cl_engine *engine);
  
*** /home/njh/src/clamav-devel/./libclamav/sis.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/sis.c	2006-07-31 09:45:28.000000000 +0100
***************
*** 29,35 ****
--- 29,37 ----
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <time.h>
  #include <zlib.h>
  
*** /home/njh/src/clamav-devel/./libclamav/is_tar.h	2005-03-22 21:26:25.000000000 +0000
--- ./libclamav/is_tar.h	2006-08-11 21:05:12.000000000 +0100
***************
*** 5,11 ****
   *
   * Created 25 August 1985 by John Gilmore, ihnp4!hoptoad!gnu.
   *
!  * $Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $ # checkin only
   */
  
  /*
--- 5,11 ----
   *
   * Created 25 August 1985 by John Gilmore, ihnp4!hoptoad!gnu.
   *
!  * $Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $ # checkin only
   */
  
  /*
*** /home/njh/src/clamav-devel/./libclamav/is_tar.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/is_tar.c	2006-08-11 21:05:12.000000000 +0100
***************
*** 5,11 ****
   * Public Domain version written 26 Aug 1985 John Gilmore (ihnp4!hoptoad!gnu).
   *
   * @(#)list.c 1.18 9/23/86 Public Domain - gnu
!  * $Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $
   *
   * Comments changed and some code/comments reformatted
   * for file command by Ian Darwin.
--- 5,11 ----
   * Public Domain version written 26 Aug 1985 John Gilmore (ihnp4!hoptoad!gnu).
   *
   * @(#)list.c 1.18 9/23/86 Public Domain - gnu
!  * $Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $
   *
   * Comments changed and some code/comments reformatted
   * for file command by Ian Darwin.
*** /home/njh/src/clamav-devel/./libclamav/clamav.h	2006-08-04 09:09:51.000000000 +0100
--- ./libclamav/clamav.h	2006-08-04 17:30:48.000000000 +0100
***************
*** 22,28 ****
--- 22,30 ----
  
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
   
  #ifdef __cplusplus
  extern "C"
*** /home/njh/src/clamav-devel/./libclamav/scanners.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/scanners.c	2006-07-31 20:42:08.000000000 +0100
***************
*** 26,36 ****
--- 26,42 ----
  #include <stdlib.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifdef	HAVE_SYS_PARAM_H
  #include <sys/param.h>
+ #endif
  #include <fcntl.h>
+ #ifndef	C_WINDOWS
  #include <dirent.h>
  #include <netinet/in.h>
+ #endif
  
  
  #if HAVE_MMAP
***************
*** 868,874 ****
  #else
  	while((dent = readdir(dd))) {
  #endif
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 874,880 ----
  #else
  	while((dent = readdir(dd))) {
  #endif
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 930,936 ****
  	for(i = 0; i < vba_project->count; i++) {
  	    fullname = (char *) cli_malloc(strlen(vba_project->dir) + strlen(vba_project->name[i]) + 2);
  	    sprintf(fullname, "%s/%s", vba_project->dir, vba_project->name[i]);
! 	    fd = open(fullname, O_RDONLY);
  	    if(fd == -1) {
  		cli_dbgmsg("VBADir: Can't open file %s\n", fullname);
  		free(fullname);
--- 936,942 ----
  	for(i = 0; i < vba_project->count; i++) {
  	    fullname = (char *) cli_malloc(strlen(vba_project->dir) + strlen(vba_project->name[i]) + 2);
  	    sprintf(fullname, "%s/%s", vba_project->dir, vba_project->name[i]);
! 	    fd = open(fullname, O_RDONLY|O_BINARY);
  	    if(fd == -1) {
  		cli_dbgmsg("VBADir: Can't open file %s\n", fullname);
  		free(fullname);
***************
*** 975,981 ****
      	for (i = 0; i < vba_project->count; i++) {
  		fullname = (char *) cli_malloc(strlen(vba_project->dir) + strlen(vba_project->name[i]) + 2);
  		sprintf(fullname, "%s/%s", vba_project->dir, vba_project->name[i]);
! 		fd = open(fullname, O_RDONLY);
  		if(fd == -1) {
  			cli_dbgmsg("VBADir: Can't open file %s\n", fullname);
  			free(fullname);
--- 981,987 ----
      	for (i = 0; i < vba_project->count; i++) {
  		fullname = (char *) cli_malloc(strlen(vba_project->dir) + strlen(vba_project->name[i]) + 2);
  		sprintf(fullname, "%s/%s", vba_project->dir, vba_project->name[i]);
! 		fd = open(fullname, O_RDONLY|O_BINARY);
  		if(fd == -1) {
  			cli_dbgmsg("VBADir: Can't open file %s\n", fullname);
  			free(fullname);
***************
*** 1019,1025 ****
      /* Check directory for embedded OLE objects */
      fullname = (char *) cli_malloc(strlen(dirname) + 16);
      sprintf(fullname, "%s/_1_Ole10Native", dirname);
!     fd = open(fullname, O_RDONLY);
      free(fullname);
      if (fd >= 0) {
      	ofd = cli_decode_ole_object(fd, dirname);
--- 1025,1031 ----
      /* Check directory for embedded OLE objects */
      fullname = (char *) cli_malloc(strlen(dirname) + 16);
      sprintf(fullname, "%s/_1_Ole10Native", dirname);
!     fd = open(fullname, O_RDONLY|O_BINARY);
      free(fullname);
      if (fd >= 0) {
      	ofd = cli_decode_ole_object(fd, dirname);
***************
*** 1040,1046 ****
  #else
  	while((dent = readdir(dd))) {
  #endif
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 1046,1052 ----
  #else
  	while((dent = readdir(dd))) {
  #endif
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 1088,1094 ****
  
      html_normalise_fd(desc, tempname, NULL);
      snprintf(fullname, 1024, "%s/comment.html", tempname);
!     fd = open(fullname, O_RDONLY);
      if (fd >= 0) {
          ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	close(fd);
--- 1094,1100 ----
  
      html_normalise_fd(desc, tempname, NULL);
      snprintf(fullname, 1024, "%s/comment.html", tempname);
!     fd = open(fullname, O_RDONLY|O_BINARY);
      if (fd >= 0) {
          ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	close(fd);
***************
*** 1103,1109 ****
  
      if (ret == CL_CLEAN) {
  	snprintf(fullname, 1024, "%s/nocomment.html", tempname);
! 	fd = open(fullname, O_RDONLY);
  	if (fd >= 0) {
  	    ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	    close(fd);
--- 1109,1115 ----
  
      if (ret == CL_CLEAN) {
  	snprintf(fullname, 1024, "%s/nocomment.html", tempname);
! 	fd = open(fullname, O_RDONLY|O_BINARY);
  	if (fd >= 0) {
  	    ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	    close(fd);
***************
*** 1119,1125 ****
  
      if (ret == CL_CLEAN) {
  	snprintf(fullname, 1024, "%s/script.html", tempname);
! 	fd = open(fullname, O_RDONLY);
  	if (fd >= 0) {
  	    ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	    close(fd);
--- 1125,1131 ----
  
      if (ret == CL_CLEAN) {
  	snprintf(fullname, 1024, "%s/script.html", tempname);
! 	fd = open(fullname, O_RDONLY|O_BINARY);
  	if (fd >= 0) {
  	    ret = cli_scandesc(fd, ctx, 0, CL_TYPE_HTML, NULL);
  	    close(fd);
***************
*** 1357,1363 ****
      free(src);
  
      tempfile = cli_gentemp(NULL);
!     if((ndesc = open(tempfile, O_RDWR|O_CREAT|O_TRUNC, S_IRWXU)) < 0) {
  	cli_errmsg("CryptFF: Can't create file %s\n", tempfile);
  	free(dest);
  	free(tempfile);
--- 1363,1369 ----
      free(src);
  
      tempfile = cli_gentemp(NULL);
!     if((ndesc = open(tempfile, O_RDWR|O_CREAT|O_TRUNC|O_BINARY, S_IRWXU)) < 0) {
  	cli_errmsg("CryptFF: Can't create file %s\n", tempfile);
  	free(dest);
  	free(tempfile);
***************
*** 1848,1854 ****
  	int fd, ret;
  
      /* internal version of cl_scanfile with arec/mrec preserved */
!     if((fd = open(filename, O_RDONLY)) == -1)
  	return CL_EOPEN;
  
      ret = cli_magic_scandesc(fd, ctx);
--- 1854,1860 ----
  	int fd, ret;
  
      /* internal version of cl_scanfile with arec/mrec preserved */
!     if((fd = open(filename, O_RDONLY|O_BINARY)) == -1)
  	return CL_EOPEN;
  
      ret = cli_magic_scandesc(fd, ctx);
***************
*** 1862,1868 ****
  	int fd, ret;
  
  
!     if((fd = open(filename, O_RDONLY)) == -1)
  	return CL_EOPEN;
  
      ret = cl_scandesc(fd, virname, scanned, engine, limits, options);
--- 1868,1874 ----
  	int fd, ret;
  
  
!     if((fd = open(filename, O_RDONLY|O_BINARY)) == -1)
  	return CL_EOPEN;
  
      ret = cl_scandesc(fd, virname, scanned, engine, limits, options);
*** /home/njh/src/clamav-devel/./libclamav/vba_extract.c	2006-08-11 20:39:24.000000000 +0100
--- ./libclamav/vba_extract.c	2006-08-07 19:05:26.000000000 +0100
***************
*** 23,29 ****
--- 23,31 ----
  
  #include <stdio.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
***************
*** 75,80 ****
--- 77,83 ----
  	{ { 0x5f, 0x00, 0x00, 0x01 }, "Office 97 SR1",          5, FALSE },
  	{ { 0x65, 0x00, 0x00, 0x01 }, "Office 2000 alpha?",     6, FALSE },
  	{ { 0x6b, 0x00, 0x00, 0x01 }, "Office 2000 beta?",      6, FALSE },
+ 	/*{ { 0x6c, 0x00, 0x00, 0x01 }, "Office 2000?",           6, FALSE },*/
  	{ { 0x6d, 0x00, 0x00, 0x01 }, "Office 2000",            6, FALSE },
  	{ { 0x6f, 0x00, 0x00, 0x01 }, "Office 2000",            6, FALSE },
  	{ { 0x70, 0x00, 0x00, 0x01 }, "Office XP beta 1/2",     6, FALSE },
***************
*** 264,270 ****
  		return NULL;
  	}
  	sprintf(fullname, "%s/_VBA_PROJECT", dir);
!         fd = open(fullname, O_RDONLY);
  
          if (fd == -1) {
                  cli_dbgmsg("Can't open %s\n", fullname);
--- 267,273 ----
  		return NULL;
  	}
  	sprintf(fullname, "%s/_VBA_PROJECT", dir);
!         fd = open(fullname, O_RDONLY|O_BINARY);
  
          if (fd == -1) {
                  cli_dbgmsg("Can't open %s\n", fullname);
***************
*** 744,750 ****
  	}
  	fullname = cli_malloc(strlen(dir) + 18);
  	sprintf(fullname, "%s/_clam_ole_object", dir);
! 	ofd = open(fullname, O_RDWR|O_CREAT|O_TRUNC, 0600);
  	free(fullname);
          if (ofd < 0) {
  		return -1;
--- 747,753 ----
  	}
  	fullname = cli_malloc(strlen(dir) + 18);
  	sprintf(fullname, "%s/_clam_ole_object", dir);
! 	ofd = open(fullname, O_RDWR|O_CREAT|O_TRUNC|O_BINARY, 0600);
  	free(fullname);
          if (ofd < 0) {
  		return -1;
***************
*** 814,820 ****
  	}
  	sprintf(fullname, "%s/ppt%.8lx.doc", dir, lseek(fd, 0, SEEK_CUR));
  	
! 	ofd = open(fullname, O_WRONLY|O_CREAT|O_TRUNC, 0600);
  	free(fullname);
          if (ofd == -1) {
                  cli_dbgmsg("ppt_unlzw Open outfile failed\n");
--- 817,823 ----
  	}
  	sprintf(fullname, "%s/ppt%.8lx.doc", dir, lseek(fd, 0, SEEK_CUR));
  	
! 	ofd = open(fullname, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, 0600);
  	free(fullname);
          if (ofd == -1) {
                  cli_dbgmsg("ppt_unlzw Open outfile failed\n");
***************
*** 946,952 ****
  		return NULL;
  	}
  	sprintf(fullname, "%s/PowerPoint Document", dir);
! 	fd = open(fullname, O_RDONLY);
  	free(fullname);
  	if (fd == -1) {
  		cli_dbgmsg("Open  PowerPoint Document failed\n");
--- 949,955 ----
  		return NULL;
  	}
  	sprintf(fullname, "%s/PowerPoint Document", dir);
! 	fd = open(fullname, O_RDONLY|O_BINARY);
  	free(fullname);
  	if (fd == -1) {
  		cli_dbgmsg("Open  PowerPoint Document failed\n");
***************
*** 1529,1535 ****
  		return NULL;
  	}
  	sprintf(fullname, "%s/WordDocument", dir);
! 	fd = open(fullname, O_RDONLY);
  	free(fullname);
  	if (fd == -1) {
  		cli_dbgmsg("Open WordDocument failed\n");
--- 1532,1538 ----
  		return NULL;
  	}
  	sprintf(fullname, "%s/WordDocument", dir);
! 	fd = open(fullname, O_RDONLY|O_BINARY);
  	free(fullname);
  	if (fd == -1) {
  		cli_dbgmsg("Open WordDocument failed\n");
*** /home/njh/src/clamav-devel/./libclamav/untar.c	2006-08-20 20:42:02.000000000 +0100
--- ./libclamav/untar.c	2006-08-20 20:47:28.000000000 +0100
***************
*** 22,27 ****
--- 22,30 ----
   *
   * Change History:
   * $Log: patches,v $
   * Revision 1.9  2006/09/05 12:45:22  njh
   * Fix to clamdscan crash and clamd nSCAN feature
   *
+  * Revision 1.2  2006/08/20 19:47:28  njh
+  * Fix error return
+  *
   * Revision 1.31  2006/08/20 19:42:02  njh
   * Fix error return
   *
***************
*** 116,122 ****
   * First draft
   *
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #include <stdio.h>
  #include <errno.h>
--- 119,125 ----
   * First draft
   *
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #include <stdio.h>
  #include <errno.h>
*** /home/njh/src/clamav-devel/./libclamav/msexpand.c	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/msexpand.c	2006-07-26 10:23:16.000000000 +0100
***************
*** 24,30 ****
--- 24,32 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  
  #if HAVE_CONFIG_H
*** /home/njh/src/clamav-devel/./libclamav/untar.h	2006-04-09 20:59:28.000000000 +0100
--- ./libclamav/untar.h	2006-08-11 21:05:12.000000000 +0100
***************
*** 18,23 ****
--- 18,26 ----
   *
   * Change History:
   * $Log: patches,v $
   * Revision 1.9  2006/09/05 12:45:22  njh
   * Fix to clamdscan crash and clamd nSCAN feature
   *
+  * Revision 1.1  2006/08/11 20:05:13  njh
+  * First Draft
+  *
   * Revision 1.4  2006/04/09 19:59:28  kojm
   * update GPL headers with new address for FSF
   *
*** /home/njh/src/clamav-devel/./libclamav/pst.c	2006-08-29 08:44:12.000000000 +0100
--- ./libclamav/pst.c	2006-08-29 08:44:40.000000000 +0100
***************
*** 36,42 ****
   * TODO: Remove the vcard handling
   * FIXME: The code does little error checking of OOM scenarios
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"	/* must come first */
--- 36,42 ----
   * TODO: Remove the vcard handling
   * FIXME: The code does little error checking of OOM scenarios
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"	/* must come first */
*** /home/njh/src/clamav-devel/./libclamav/matcher-ac.h	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/matcher-ac.h	2006-07-28 13:54:20.000000000 +0100
***************
*** 27,33 ****
  #define AC_DEFAULT_DEPTH 2
  
  int cli_ac_addpatt(struct cli_matcher *root, struct cli_ac_patt *pattern);
! int cli_ac_scanbuff(const char *buffer, unsigned int length, const char **virname, const struct cli_matcher *root, int *partcnt, unsigned short otfrec, unsigned long int offset, unsigned long int *partoff, unsigned short ftype, int fd, struct cli_matched_type **ftoffset);
  int cli_ac_buildtrie(struct cli_matcher *root);
  void cli_ac_free(struct cli_matcher *root);
  void cli_ac_setdepth(unsigned int depth);
--- 27,33 ----
  #define AC_DEFAULT_DEPTH 2
  
  int cli_ac_addpatt(struct cli_matcher *root, struct cli_ac_patt *pattern);
! int cli_ac_scanbuff(const unsigned char *buffer, unsigned int length, const char **virname, const struct cli_matcher *root, int *partcnt, unsigned short otfrec, unsigned long int offset, unsigned long int *partoff, unsigned short ftype, int fd, struct cli_matched_type **ftoffset);
  int cli_ac_buildtrie(struct cli_matcher *root);
  void cli_ac_free(struct cli_matcher *root);
  void cli_ac_setdepth(unsigned int depth);
*** /home/njh/src/clamav-devel/./libclamav/message.c	2006-08-29 08:41:59.000000000 +0100
--- ./libclamav/message.c	2006-08-29 08:44:40.000000000 +0100
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 16,22 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
*** /home/njh/src/clamav-devel/./libclamav/uuencode.c	2006-07-31 20:38:20.000000000 +0100
--- ./libclamav/uuencode.c	2006-08-11 21:05:12.000000000 +0100
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #include "clamav.h"
  
--- 16,22 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #include "clamav.h"
  
*** /home/njh/src/clamav-devel/./libclamav/line.c	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/line.c	2006-08-11 21:05:12.000000000 +0100
***************
*** 17,22 ****
--- 17,25 ----
   *  MA 02110-1301, USA.
   *
   * $Log: patches,v $
   * Revision 1.9  2006/09/05 12:45:22  njh
   * Fix to clamdscan crash and clamd nSCAN feature
   *
+  * Revision 1.1  2006/08/11 20:05:13  njh
+  * First Draft
+  *
   * Revision 1.10  2006/04/09 19:59:27  kojm
   * update GPL headers with new address for FSF
   *
***************
*** 49,55 ****
   *
   */
  
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 52,58 ----
   *
   */
  
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
*** /home/njh/src/clamav-devel/./libclamav/text.c	2006-07-14 13:13:08.000000000 +0100
--- ./libclamav/text.c	2006-08-11 21:05:12.000000000 +0100
***************
*** 17,22 ****
--- 17,25 ----
   *  MA 02110-1301, USA.
   *
   * $Log: patches,v $
   * Revision 1.9  2006/09/05 12:45:22  njh
   * Fix to clamdscan crash and clamd nSCAN feature
   *
+  * Revision 1.1  2006/08/11 20:05:13  njh
+  * First Draft
+  *
   * Revision 1.23  2006/07/14 12:13:08  njh
   * Typo
   *
***************
*** 79,85 ****
   *
   */
  
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 82,88 ----
   *
   */
  
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
*** /home/njh/src/clamav-devel/./libclamav/binhex.h	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/binhex.h	2006-08-11 21:05:12.000000000 +0100
***************
*** 18,23 ****
--- 18,26 ----
   *
   * Change History:
   * $Log: patches,v $
   * Revision 1.9  2006/09/05 12:45:22  njh
   * Fix to clamdscan crash and clamd nSCAN feature
   *
+  * Revision 1.1  2006/08/11 20:05:13  njh
+  * First Draft
+  *
   * Revision 1.4  2006/04/09 19:59:27  kojm
   * update GPL headers with new address for FSF
   *
*** /home/njh/src/clamav-devel/./libclamav/tnef.c	2006-07-22 14:31:22.000000000 +0100
--- ./libclamav/tnef.c	2006-08-11 21:05:12.000000000 +0100
***************
*** 25,31 ****
  #include "clamav-config.h"
  #endif
  
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #include <stdio.h>
  #include <fcntl.h>
--- 25,31 ----
  #include "clamav-config.h"
  #endif
  
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #include <stdio.h>
  #include <fcntl.h>
*** /home/njh/src/clamav-devel/./libclamav/ole2_extract.c	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/ole2_extract.c	2006-08-15 10:14:26.000000000 +0100
***************
*** 30,39 ****
  #include <fcntl.h>
  #include <stdio.h>
  #include <string.h>
  #include <unistd.h>
  #include <ctype.h>
  #include <stdlib.h>
! #include <clamav.h>
  
  #if HAVE_MMAP
  #if HAVE_SYS_MMAN_H
--- 30,41 ----
  #include <fcntl.h>
  #include <stdio.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <ctype.h>
  #include <stdlib.h>
! #include "clamav.h"
  
  #if HAVE_MMAP
  #if HAVE_SYS_MMAN_H
***************
*** 135,141 ****
  	j=0;
  	/* size-2 to ignore trailing NULL */
  	for (i=0 ; i < size-2; i+=2) {
! 		if (isprint(name[i])) {
  			newname[j++] = name[i];
  		} else {
  			if (name[i] < 10 && name[i] >= 0) {
--- 137,143 ----
  	j=0;
  	/* size-2 to ignore trailing NULL */
  	for (i=0 ; i < size-2; i+=2) {
! 		if((!(name[i]&0x80)) && isprint(name[i])) {
  			newname[j++] = name[i];
  		} else {
  			if (name[i] < 10 && name[i] >= 0) {
***************
*** 587,594 ****
  #ifdef  C_DARWIN
                          *newname &= '\177';
  #endif
! #if     defined(MSDOS) || defined(C_CYGWIN) || defined(WIN32) || defined(C_OS2)
!                         if(strchr("/*?<>|\"+=,;: ", *newname))
  #else
                          if(*newname == '/')
  #endif
--- 589,596 ----
  #ifdef  C_DARWIN
                          *newname &= '\177';
  #endif
! #if     defined(MSDOS) || defined(C_CYGWIN) || defined(WIN32) || defined(C_OS2) || defined(C_WINDOWS)
!                         if(strchr("/*?<>|\"+=,;:\\ ", *newname))
  #else
                          if(*newname == '/')
  #endif
***************
*** 602,611 ****
  		free(name);
  		return FALSE;
  	}
  	sprintf(newname, "%s/%s", dir, name);
  	free(name);
  
! 	ofd = open(newname, O_WRONLY|O_CREAT|O_TRUNC, S_IRWXU);
  	if (ofd < 0) {
  		cli_errmsg("ERROR: failed to create file: %s\n", newname);
  		free(newname);
--- 604,614 ----
  		free(name);
  		return FALSE;
  	}
+ 
  	sprintf(newname, "%s/%s", dir, name);
  	free(name);
  
! 	ofd = open(newname, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IRWXU);
  	if (ofd < 0) {
  		cli_errmsg("ERROR: failed to create file: %s\n", newname);
  		free(newname);
*** /home/njh/src/clamav-devel/./libclamav/pdf.c	2006-08-15 16:06:25.000000000 +0100
--- ./libclamav/pdf.c	2006-08-15 16:04:36.000000000 +0100
***************
*** 15,21 ****
   *  along with this program; if not, write to the Free Software
   *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 15,21 ----
   *  along with this program; if not, write to the Free Software
   *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.9 2006/09/05 12:45:22 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
*** /home/njh/src/clamav-devel/./libclamav/unzip.h	2006-05-30 14:00:04.000000000 +0100
--- ./libclamav/unzip.h	2006-08-17 17:35:12.000000000 +0100
***************
*** 34,39 ****
--- 34,46 ----
  
  #include "cltypes.h"
  
+ #ifndef HAVE_ATTRIB_PACKED
+ #define __attribute__(x)
+ #endif
+ 
+ #ifdef HAVE_PRAGMA_PACK
+ #pragma pack(1)
+ #endif
  
  /******** Zip format structures *********/
  
*** /home/njh/src/clamav-devel/./libclamav/chmunpack.c	2006-04-09 20:59:27.000000000 +0100
--- ./libclamav/chmunpack.c	2006-08-17 17:35:12.000000000 +0100
***************
*** 27,33 ****
--- 27,35 ----
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  
  #if defined(HAVE_ATTRIB_PACKED) || defined(HAVE_PRAGMA_PACK)
***************
*** 831,837 ****
  	mf_in.name = strdup("input");
  	
  	snprintf(filename, 1024, "%s/clamav-unchm.bin", dirname);
! 	mf_out.desc = open(filename, O_WRONLY|O_CREAT|O_TRUNC, S_IRWXU);
  	if (!mf_out.desc) {
  		cli_dbgmsg("open failed\n", filename);
  		free(mf_in.name);
--- 833,839 ----
  	mf_in.name = strdup("input");
  	
  	snprintf(filename, 1024, "%s/clamav-unchm.bin", dirname);
! 	mf_out.desc = open(filename, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IRWXU);
  	if (!mf_out.desc) {
  		cli_dbgmsg("open failed\n", filename);
  		free(mf_in.name);
***************
*** 920,926 ****
  	mf_out.fh = NULL;
  	
  	/* Reopen the file for reading */
! 	mf_out.desc = open(filename, O_RDONLY);
  	if (mf_out.desc < 0) {
  		cli_dbgmsg("re-open output failed\n");
  		goto abort;
--- 922,928 ----
  	mf_out.fh = NULL;
  	
  	/* Reopen the file for reading */
! 	mf_out.desc = open(filename, O_RDONLY|O_BINARY);
  	if (mf_out.desc < 0) {
  		cli_dbgmsg("re-open output failed\n");
  		goto abort;
***************
*** 942,948 ****
  		}
  		
  		snprintf(filename, 1024, "%s/%d-%llu.chm", dirname, count, entry->offset);
! 		ofd = open(filename, O_WRONLY|O_CREAT|O_TRUNC, S_IRWXU);
  		if (ofd < 0) {
  			entry = entry->next;
  			continue;
--- 944,950 ----
  		}
  		
  		snprintf(filename, 1024, "%s/%d-%llu.chm", dirname, count, entry->offset);
! 		ofd = open(filename, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IRWXU);
  		if (ofd < 0) {
  			entry = entry->next;
  			continue;
*** /home/njh/src/clamav-devel/./libclamav/unzip.c	2006-06-17 22:00:44.000000000 +0100
--- ./libclamav/unzip.c	2006-08-17 17:39:14.000000000 +0100
***************
*** 31,39 ****
  #include <zlib.h>
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <unistd.h>
  #include <fcntl.h>
- #include <unistd.h>
  
  #include "clamav.h"
  #include "others.h"
--- 31,40 ----
  #include <zlib.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <fcntl.h>
  
  #include "clamav.h"
  #include "others.h"
*** /home/njh/src/clamav-devel/./clamscan/clamscan.c	2006-05-15 19:30:18.000000000 +0100
--- ./clamscan/clamscan.c	2006-08-04 10:38:10.000000000 +0100
***************
*** 24,32 ****
--- 24,39 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifdef	C_WINDOWS
+ #include <fcntl.h>
+ #else
  #include <sys/time.h>
+ #endif
  #include <time.h>
+ #include <ctype.h>
  
  #include "clamscan_opt.h"
  #include "others.h"
***************
*** 53,62 ****
  	int ds, dms, ret;
  	double mb;
  	struct timeval t1, t2;
  	struct timezone tz;
  	struct optstruct *opt;
  	const char *pt;
! 
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, NULL);
      if(!opt) {
--- 60,77 ----
  	int ds, dms, ret;
  	double mb;
  	struct timeval t1, t2;
+ #ifndef	C_WINDOWS
  	struct timezone tz;
+ #endif
  	struct optstruct *opt;
  	const char *pt;
! 	
! #if	defined(C_WINDOWS) && defined(CL_THREAD_SAFE)
! 	if(!pthread_win32_process_attach_np()) {
! 		mprintf("!Can't start the win32 pthreads layer\n");
! 		return 1;
! 	}
! #endif
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, NULL);
      if(!opt) {
***************
*** 174,184 ****
  
      memset(&claminfo, 0, sizeof(struct s_info));
  
      gettimeofday(&t1, &tz);
      ret = scanmanager(opt);
  
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
! 	gettimeofday(&t2, &tz);
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
--- 189,210 ----
  
      memset(&claminfo, 0, sizeof(struct s_info));
  
+ #ifdef	C_WINDOWS
+ 	_set_fmode(_O_BINARY);
+ 
+ 	gettimeofday(&t1, NULL);
+ #else
      gettimeofday(&t1, &tz);
+ #endif
+ 
      ret = scanmanager(opt);
  
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
! #ifdef	C_WINDOWS
! 	gettimeofday(&t2, NULL);
! #else
!     gettimeofday(&t2, &tz);
! #endif
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
***************
*** 204,209 ****
--- 230,243 ----
      }
  
      opt_free(opt);
+     
+ #if	defined(C_WINDOWS) && defined(CL_THREAD_SAFE)
+ 	if(!pthread_win32_process_detach_np()) {
+ 		mprintf("!Can't stop the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
      return ret;
  }
  
*** /home/njh/src/clamav-devel/./clamscan/manager.h	2006-05-15 19:30:18.000000000 +0100
--- ./clamscan/manager.h	2006-07-26 14:31:40.000000000 +0100
***************
*** 21,27 ****
--- 21,29 ----
  #define __MANAGER_H
  
  #include <clamav.h>
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
  #include "options.h"
  
  int scanmanager(const struct optstruct *opt);
*** /home/njh/src/clamav-devel/./clamscan/treewalk.h	2006-06-08 21:00:50.000000000 +0100
--- ./clamscan/treewalk.h	2006-07-26 14:36:44.000000000 +0100
***************
*** 20,26 ****
--- 20,29 ----
  #ifndef __TREEWALK_H
  #define __TREEWALK_H
  
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
+ 
  #include <clamav.h>
  
  #include "options.h"
*** /home/njh/src/clamav-devel/./clamscan/others.c	2006-04-09 20:59:26.000000000 +0100
--- ./clamscan/others.c	2006-07-26 15:03:16.000000000 +0100
***************
*** 29,41 ****
--- 29,47 ----
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <errno.h>
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <sys/wait.h>
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <signal.h>
***************
*** 73,78 ****
--- 79,92 ----
      }
  }
  
+ #ifdef	C_WINDOWS
+ /* FIXME: Handle users correctly */
+ int
+ checkaccess(const char *path, const char *username, int mode)
+ {
+ 	return _access(path, mode);
+ }
+ #else
  int checkaccess(const char *path, const char *username, int mode)
  {
  	struct passwd *user;
***************
*** 117,122 ****
--- 131,137 ----
  
      return ret;
  }
+ #endif
  
  int match_regex(const char *filename, const char *pattern)
  {
*** /home/njh/src/clamav-devel/./clamscan/treewalk.c	2006-06-08 21:00:50.000000000 +0100
--- ./clamscan/treewalk.c	2006-07-26 18:40:58.000000000 +0100
***************
*** 24,35 ****
--- 24,43 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/stat.h>
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/wait.h>
+ #endif
+ #ifdef	HAVE_INITGROUPS
  #include <grp.h>
+ #endif
+ #ifndef	C_WINDOWS
  #include <dirent.h>
+ #endif
  #include <errno.h>
  
  #include "shared.h"
***************
*** 97,103 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 105,111 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 136,141 ****
--- 144,156 ----
  
  }
  
+ #ifdef	C_WINDOWS
+ int
+ clamav_rmdirs(const char *dir)
+ {
+ 	return rmdirs(dir);
+ }
+ #else
  int clamav_rmdirs(const char *dir)
  {
  #ifndef C_CYGWIN
***************
*** 182,189 ****
  	    else
  		return -2;
      }
- 
  }
  
  int fixperms(const char *dirname)
  {
--- 197,204 ----
  	    else
  		return -2;
      }
  }
+ #endif	/* C_WINDOWS*/
  
  int fixperms(const char *dirname)
  {
***************
*** 195,201 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 210,216 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 241,247 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 256,262 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	    if(dent->d_ino)
  #endif
  	    {
*** /home/njh/src/clamav-devel/./clamscan/manager.c	2006-06-21 18:04:28.000000000 +0100
--- ./clamscan/manager.c	2006-09-01 11:57:42.000000000 +0100
***************
*** 30,40 ****
--- 30,48 ----
  #include <ctype.h>
  #include <sys/stat.h>
  #include <sys/types.h>
+ #ifdef	C_WINDOWS
+ #include <sys/utime.h>
+ #else
  #include <sys/wait.h>
  #include <utime.h>
+ #endif
+ #ifdef	HAVE_INITGROUPS
  #include <grp.h>
+ #endif
  #include <fcntl.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
  #include <signal.h>
  #include <clamav.h>
***************
*** 57,62 ****
--- 65,75 ----
  dev_t procdev;
  #endif
  
+ #ifdef	C_WINDOWS
+ #undef	P_tmpdir
+ 
+ #define	P_tmpdir	"C:\\WINDOWS\\TEMP"
+ #endif
  
  int scanmanager(const struct optstruct *opt)
  {
***************
*** 69,77 ****
  	struct stat sb;
  	char *fullpath = NULL, cwd[1024];
  
- 
  /* njh@bandsman.co.uk: BeOS */
! #if !defined(C_CYGWIN) && !defined(C_OS2) && !defined(C_BEOS)
      if(!geteuid()) {
  	if((user = getpwnam(UNPUSER)) == NULL) {
  	    logg("^Can't get information about user "UNPUSER"\n");
--- 82,89 ----
  	struct stat sb;
  	char *fullpath = NULL, cwd[1024];
  
  /* njh@bandsman.co.uk: BeOS */
! #if !defined(C_CYGWIN) && !defined(C_OS2) && !defined(C_BEOS) && !defined(C_WINDOWS)
      if(!geteuid()) {
  	if((user = getpwnam(UNPUSER)) == NULL) {
  	    logg("^Can't get information about user "UNPUSER"\n");
***************
*** 353,364 ****
--- 365,378 ----
  	return 0;
      }
  
+ #ifndef	C_WINDOWS
      if(geteuid())
  	if(checkaccess(filename, NULL, R_OK) != 1) {
  	    if(!printinfected)
  		logg("%s: Access denied\n", filename);
  	    return 0;
  	}
+ #endif
  
      claminfo.files++;
  
***************
*** 469,475 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 483,489 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 488,494 ****
  	exit(63); /* critical */
      }
  
! #ifndef C_OS2
      if(user)
  	chown(gendir, user->pw_uid, user->pw_gid);
  #endif
--- 502,509 ----
  	exit(63); /* critical */
      }
  
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
! 	/* FIXME: do the correct native windows way */
      if(user)
  	chown(gendir, user->pw_uid, user->pw_gid);
  #endif
***************
*** 667,673 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 682,688 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 703,709 ****
  
      fixperms(gendir);
  
! #ifndef C_OS2
      if(user) {
  	chown(gendir, user->pw_uid, user->pw_gid);
  	chown(tmpfile, user->pw_uid, user->pw_gid);
--- 718,724 ----
  
      fixperms(gendir);
  
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
      if(user) {
  	chown(gendir, user->pw_uid, user->pw_gid);
  	chown(tmpfile, user->pw_uid, user->pw_gid);
***************
*** 746,752 ****
  
      logg("*Scanning %s\n", filename);
  
!     if((fd = open(filename, O_RDONLY)) == -1) {
  	logg("^Can't open file %s\n", filename);
  	return 54;
      }
--- 761,767 ----
  
      logg("*Scanning %s\n", filename);
  
!     if((fd = open(filename, O_RDONLY|O_BINARY)) == -1) {
  	logg("^Can't open file %s\n", filename);
  	return 54;
      }
***************
*** 781,787 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 796,802 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 799,804 ****
--- 814,826 ----
  	return 63;
      }
  
+ #ifdef	C_WINDOWS
+ 	if(setmode(fileno(stdin), O_BINARY) < 0) {
+ 		logg("^Can't set binary mode on stdin\n");
+ 		return 63;
+ 	}
+ #endif
+ 
      while((ret = fread(buff, 1, FILEBUFF, stdin)))
  	fwrite(buff, 1, ret, fs);
  
***************
*** 833,838 ****
--- 855,868 ----
   * 0 -> OK
   */
  
+ #ifdef	C_WINDOWS
+ int clamav_unpack(const char *prog, char **args, const char *tmpdir, const struct passwd *user, const struct optstruct *opt)
+ {
+ 	/* TODO: use spamvp(P_WAIT, prog, args); */
+ 	cli_errmsg("clamav_unpack is not supported under Windows yet\n");
+ 	return -1;
+ }
+ #else
  int clamav_unpack(const char *prog, char **args, const char *tmpdir, const struct passwd *user, const struct optstruct *opt)
  {
  	pid_t pid;
***************
*** 863,869 ****
  	case -1:
  	    return -1;
  	case 0:
! #ifndef C_CYGWIN
  	    if(!geteuid() && user) {
  
  #ifdef HAVE_SETGROUPS
--- 893,899 ----
  	case -1:
  	    return -1;
  	case 0:
! #if	(!defined(C_CYGWIN)) && (!defined(C_WINDOWS))
  	    if(!geteuid() && user) {
  
  #ifdef HAVE_SETGROUPS
***************
*** 939,951 ****
  
      return 0;
  }
  
  void move_infected(const char *filename, const struct optstruct *opt)
  {
  	char *movedir, *movefilename, *tmp, numext[4 + 1];
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
! 	struct utimbuf ubuf;
  
  
      if(!(movedir = opt_arg(opt, "move"))) {
--- 969,982 ----
  
      return 0;
  }
+ #endif
  
  void move_infected(const char *filename, const struct optstruct *opt)
  {
  	char *movedir, *movefilename, *tmp, numext[4 + 1];
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
! 	struct _utimbuf ubuf;
  
  
      if(!(movedir = opt_arg(opt, "move"))) {
***************
*** 1023,1029 ****
  	}
  
  	chmod(movefilename, fstat.st_mode);
! #ifndef C_OS2
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  #endif
  
--- 1054,1060 ----
  	}
  
  	chmod(movefilename, fstat.st_mode);
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  #endif
  
*** /home/njh/src/clamav-devel/./shared/memory.c	2006-04-09 20:59:28.000000000 +0100
--- ./shared/memory.c	2006-07-26 15:44:20.000000000 +0100
***************
*** 19,25 ****
--- 19,27 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  void *mmalloc(size_t size)
  {
*** /home/njh/src/clamav-devel/./shared/getopt.c	2004-03-29 01:00:58.000000000 +0100
--- ./shared/getopt.c	2006-07-26 15:49:38.000000000 +0100
***************
*** 41,47 ****
--- 41,49 ----
  
  #include <stdio.h>
  
+ #ifndef	C_WINDOWS
  int strncmp(const char *s1, const char *s2, size_t n);
+ #endif
  
  /* Comment out all this code if we are using the GNU C Library, and are not
     actually compiling the library itself.  This code is part of the GNU C
*** /home/njh/src/clamav-devel/./shared/cdiff.c	2006-08-14 10:17:45.000000000 +0100
--- ./shared/cdiff.c	2006-08-14 10:20:26.000000000 +0100
***************
*** 27,33 ****
--- 27,35 ----
  #include <ctype.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "shared/memory.h"
  #include "shared/misc.h"
***************
*** 352,358 ****
  
      if(del || xchg) {
  
! 	if(!(fh = fopen(ctx->open_db, "r"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for reading\n", ctx->open_db);
  	    return -1;
  	}
--- 354,360 ----
  
      if(del || xchg) {
  
! 	if(!(fh = fopen(ctx->open_db, "rb"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for reading\n", ctx->open_db);
  	    return -1;
  	}
***************
*** 363,369 ****
  	    return -1;
  	}
  
! 	if(!(tmpfh = fopen(tmp, "w"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for writing\n", tmp);
  	    fclose(fh);
  	    free(tmp);
--- 365,371 ----
  	    return -1;
  	}
  
! 	if(!(tmpfh = fopen(tmp, "wb"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for writing\n", tmp);
  	    fclose(fh);
  	    free(tmp);
***************
*** 448,454 ****
  
      if(add) {
  
! 	if(!(fh = fopen(ctx->open_db, "a"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for appending\n", ctx->open_db);
  	    return -1;
  	}
--- 450,456 ----
  
      if(add) {
  
! 	if(!(fh = fopen(ctx->open_db, "ab"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for appending\n", ctx->open_db);
  	    return -1;
  	}
***************
*** 519,525 ****
  	return -1;
      }
  
!     if(!(src = fopen(srcdb, "r"))) {
  	logg("!cdiff_cmd_move: Can't open %s for reading\n", srcdb);
  	free(start_str);
  	free(end_str);
--- 521,527 ----
  	return -1;
      }
  
!     if(!(src = fopen(srcdb, "rb"))) {
  	logg("!cdiff_cmd_move: Can't open %s for reading\n", srcdb);
  	free(start_str);
  	free(end_str);
***************
*** 536,542 ****
  	return -1;
      }
  
!     if(!(dst = fopen(dstdb, "a"))) {
  	logg("!cdiff_cmd_move: Can't open %s for appending\n", dstdb);
  	free(start_str);
  	free(end_str);
--- 538,544 ----
  	return -1;
      }
  
!     if(!(dst = fopen(dstdb, "ab"))) {
  	logg("!cdiff_cmd_move: Can't open %s for appending\n", dstdb);
  	free(start_str);
  	free(end_str);
***************
*** 557,563 ****
  	return -1;
      }
  
!     if(!(tmp = fopen(tmpdb, "w"))) {
  	logg("!cdiff_cmd_move: Can't open file %s for writing\n", tmpdb);
  	free(start_str);
  	free(end_str);
--- 559,565 ----
  	return -1;
      }
  
!     if(!(tmp = fopen(tmpdb, "wb"))) {
  	logg("!cdiff_cmd_move: Can't open file %s for writing\n", tmpdb);
  	free(start_str);
  	free(end_str);
***************
*** 686,692 ****
  	return -1;
      }
  
!     if(!(fh = fdopen(desc, "r"))) {
  	logg("!cdiff_apply: fdopen() failed for descriptor %d\n", desc);
  	close(desc);
  	return -1;
--- 688,694 ----
  	return -1;
      }
  
!     if(!(fh = fdopen(desc, "rb"))) {
  	logg("!cdiff_apply: fdopen() failed for descriptor %d\n", desc);
  	close(desc);
  	return -1;
*** /home/njh/src/clamav-devel/./shared/network.h	2006-04-09 20:59:28.000000000 +0100
--- ./shared/network.h	2006-07-31 14:59:30.000000000 +0100
***************
*** 21,28 ****
--- 21,33 ----
  #ifndef __NETWORK_H
  #define __NETWORK_H
  
+ #ifdef	HAVE_SYS_TYPES_H
  #include <sys/types.h>
+ #endif
+ 
+ #ifndef	C_WINDOWS
  #include <netdb.h>
+ #endif
  
  int r_gethostbyname(const char *hostname, struct hostent *hp, char *buf, size_t len);
  
*** /home/njh/src/clamav-devel/./shared/cfgparser.c	2006-08-31 08:57:48.000000000 +0100
--- ./shared/cfgparser.c	2006-08-31 08:58:04.000000000 +0100
***************
*** 134,140 ****
  	}
      }
  
!     if((fs = fopen(cfgfile, "r")) == NULL) {
  	/* do not print error message here! */
  	freecfg(copt);
  	return NULL;
--- 134,140 ----
  	}
      }
  
!     if((fs = fopen(cfgfile, "rb")) == NULL) {
  	/* do not print error message here! */
  	freecfg(copt);
  	return NULL;
*** /home/njh/src/clamav-devel/./shared/misc.c	2006-08-31 08:58:51.000000000 +0100
--- ./shared/misc.c	2006-08-31 09:21:20.000000000 +0100
***************
*** 23,34 ****
--- 23,38 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <time.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <dirent.h>
+ #endif
  #include <fcntl.h>
  #include <ctype.h>
  #include <errno.h>
***************
*** 136,145 ****
  	struct stat sb;
  
  
!     if((s = open(src, O_RDONLY)) == -1)
  	return -1;
  
!     if((d = open(dest, O_CREAT|O_WRONLY|O_TRUNC)) == -1) {
  	close(s);
  	return -1;
      }
--- 140,149 ----
  	struct stat sb;
  
  
!     if((s = open(src, O_RDONLY|O_BINARY)) == -1)
  	return -1;
  
!     if((d = open(dest, O_CREAT|O_WRONLY|O_TRUNC|O_BINARY)) == -1) {
  	close(s);
  	return -1;
      }
***************
*** 177,189 ****
  	    }
  
  	    while((dent = readdir(dd))) {
! #if   (!defined(C_CYGWIN)) && (!defined(C_INTERIX))
  		if(dent->d_ino)
  #endif
  		{
  		    if(strcmp(dent->d_name, ".") && strcmp(dent->d_name, "..")) {
  			fname = mcalloc(strlen(dirname) + strlen(dent->d_name) + 2, sizeof(char));
  			sprintf(fname, "%s/%s", dirname, dent->d_name);
  
  			/* stat the file */
  			if(lstat(fname, &statbuf) != -1) {
--- 181,197 ----
  	    }
  
  	    while((dent = readdir(dd))) {
! #if   (!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  		if(dent->d_ino)
  #endif
  		{
  		    if(strcmp(dent->d_name, ".") && strcmp(dent->d_name, "..")) {
  			fname = mcalloc(strlen(dirname) + strlen(dent->d_name) + 2, sizeof(char));
+ #ifdef	C_WINDOWS
+ 			sprintf(fname, "%s\\%s", dirname, dent->d_name);
+ #else
  			sprintf(fname, "%s/%s", dirname, dent->d_name);
+ #endif
  
  			/* stat the file */
  			if(lstat(fname, &statbuf) != -1) {
***************
*** 237,243 ****
      }
  
      while((dent = readdir(dd))) {
! #if   (!defined(C_CYGWIN)) && (!defined(C_INTERIX))
  	if(dent->d_ino)
  #endif
  	{
--- 245,251 ----
      }
  
      while((dent = readdir(dd))) {
! #if   (!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	if(dent->d_ino)
  #endif
  	{
***************
*** 276,282 ****
  	int fd;
  
  
!     if((fd = open(cvd, O_RDONLY)) == -1)
  	return -1;
  
      if(lseek(fd, 512, SEEK_SET) == -1) {
--- 284,290 ----
  	int fd;
  
  
!     if((fd = open(cvd, O_RDONLY|O_BINARY)) == -1)
  	return -1;
  
      if(lseek(fd, 512, SEEK_SET) == -1) {
***************
*** 294,300 ****
  {
  	int i;
  
! #ifdef C_OS2
      return;
  #else
  
--- 302,308 ----
  {
  	int i;
  
! #if	defined(C_OS2) || defined(C_WINDOWS)
      return;
  #else
  
*** /home/njh/src/clamav-devel/./shared/output.c	2006-08-31 09:03:18.000000000 +0100
--- ./shared/output.c	2006-08-31 09:23:58.000000000 +0100
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
+ 
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 30,42 ****
--- 35,51 ----
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <fcntl.h>
  #include <time.h>
  #include <sys/stat.h>
  #include <errno.h>
+ #ifndef	C_WINDOWS
  #include <sys/time.h>
  #include <sys/socket.h>
+ #endif
  #if HAVE_SYS_TYPES_H
  #include <sys/types.h>
  #endif
***************
*** 122,128 ****
--- 131,139 ----
  int logg(const char *str, ...)
  {
  	va_list args, argscpy, argsout;
+ #ifdef	F_WRLCK
  	struct flock fl;
+ #endif
  	char *pt, *timestr, vbuff[1025];
  	time_t currtime;
  	struct stat sb;
***************
*** 140,146 ****
      if(logg_file) {
  	if(!logg_fd) {
  	    old_umask = umask(0037);
! 	    if((logg_fd = fopen(logg_file, "a")) == NULL) {
  		umask(old_umask);
  #ifdef CL_THREAD_SAFE
  		pthread_mutex_unlock(&logg_mutex);
--- 151,157 ----
      if(logg_file) {
  	if(!logg_fd) {
  	    old_umask = umask(0037);
! 	    if((logg_fd = fopen(logg_file, "at")) == NULL) {
  		umask(old_umask);
  #ifdef CL_THREAD_SAFE
  		pthread_mutex_unlock(&logg_mutex);
***************
*** 149,154 ****
--- 160,166 ----
  		return -1;
  	    } else umask(old_umask);
  
+ #ifdef	F_WRLCK
  	    if(logg_lock) {
  		memset(&fl, 0, sizeof(fl));
  		fl.l_type = F_WRLCK;
***************
*** 159,164 ****
--- 171,177 ----
  		    return -1;
  		}
  	    }
+ #endif
  	}
  
  	if(logg_size) {
*** /home/njh/src/clamav-devel/./freshclam/manager.c	2006-08-31 08:48:37.000000000 +0100
--- ./freshclam/manager.c	2006-08-31 16:24:52.000000000 +0100
***************
*** 20,25 ****
--- 20,29 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 27,40 ****
--- 31,50 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <ctype.h>
+ #ifndef	C_WINDOWS
  #include <netinet/in.h>
  #include <netdb.h>
+ #endif
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
***************
*** 63,68 ****
--- 73,82 ----
  #define	O_BINARY	0
  #endif
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  
  static int wwwconnect(const char *server, const char *proxy, int pport, char *ip, const char *localip, int ctimeout)
  {
***************
*** 143,149 ****
--- 157,165 ----
  		else
  			port = 8080;
  
+ #ifndef	C_WINDOWS
  		endservent();
+ #endif
  #else
  		port = 8080;
  #endif
***************
*** 178,184 ****
  		break;
  	}
          logg("^Can't get information about %s: %s\n", hostpt, herr);
! 	close(socketfd);
  	return -1;
      }
  
--- 194,200 ----
  		break;
  	}
          logg("^Can't get information about %s: %s\n", hostpt, herr);
! 	closesocket(socketfd);
  	return -1;
      }
  
***************
*** 204,210 ****
  	}
      }
  
!     close(socketfd);
      return -2;
  }
  
--- 220,226 ----
  	}
      }
  
!     closesocket(socketfd);
      return -2;
  }
  
***************
*** 358,366 ****
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(write(sd, cmd, strlen(cmd)) < 0) {
  	logg("!remote_cvdhead: write failed\n");
! 	close(sd);
  	return NULL;
      }
  
--- 374,382 ----
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(send(sd, cmd, strlen(cmd), 0) < 0) {
  	logg("!remote_cvdhead: write failed\n");
! 	closesocket(sd);
  	return NULL;
      }
  
***************
*** 372,378 ****
  	if(cnt <= 0)
  	    break;
      }
!     close(sd);
  
      if(bread == -1) {
  	logg("!remote_cvdhead: Error while reading CVD header from %s\n", hostname);
--- 388,394 ----
  	if(cnt <= 0)
  	    break;
      }
!     closesocket(sd);
  
      if(bread == -1) {
  	logg("!remote_cvdhead: Error while reading CVD header from %s\n", hostname);
***************
*** 490,496 ****
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(write(sd, cmd, strlen(cmd)) < 0) {
  	logg("!getfile: Can't write to socket\n");
  	return 52;
      }
--- 506,512 ----
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(send(sd, cmd, strlen(cmd), 0) < 0) {
  	logg("!getfile: Can't write to socket\n");
  	return 52;
      }
***************
*** 524,530 ****
      /* check whether the resource actually existed or not */
      if((strstr(buffer, "HTTP/1.1 404")) != NULL || (strstr(buffer, "HTTP/1.0 404")) != NULL) { 
  	logg("!getfile: %s not found on remote server\n", srcfile);
! 	close(sd);
  	return 58;
      }
  
--- 540,546 ----
      /* check whether the resource actually existed or not */
      if((strstr(buffer, "HTTP/1.1 404")) != NULL || (strstr(buffer, "HTTP/1.0 404")) != NULL) { 
  	logg("!getfile: %s not found on remote server\n", srcfile);
! 	closesocket(sd);
  	return 58;
      }
  
***************
*** 553,559 ****
  	getcwd(currdir, sizeof(currdir));
  	logg("!getfile: Can't create new file %s in %s\n", destfile, currdir);
  	logg("Hint: The database directory must be writable for UID %d or GID %d\n", getuid(), getgid());
! 	close(sd);
  	return 57;
      }
  
--- 569,575 ----
  	getcwd(currdir, sizeof(currdir));
  	logg("!getfile: Can't create new file %s in %s\n", destfile, currdir);
  	logg("Hint: The database directory must be writable for UID %d or GID %d\n", getuid(), getgid());
! 	closesocket(sd);
  	return 57;
      }
  
***************
*** 562,568 ****
  	    logg("getfile: Can't write %d bytes to %s\n", bread, destfile);
  	    unlink(destfile);
  	    close(fd);
! 	    close(sd);
  	    return 57; /* FIXME */
  	}
  
--- 578,584 ----
  	    logg("getfile: Can't write %d bytes to %s\n", bread, destfile);
  	    unlink(destfile);
  	    close(fd);
! 	    closesocket(sd);
  	    return 57; /* FIXME */
  	}
  
***************
*** 579,585 ****
              fflush(stdout);
          }
      }
!     close(sd);
      close(fd);
  
      if(totalsize > 0)
--- 595,601 ----
              fflush(stdout);
          }
      }
!     closesocket(sd);
      close(fd);
  
      if(totalsize > 0)
***************
*** 706,712 ****
          return ret;
      }
  
!     if((fd = open(tempname, O_RDONLY)) == -1) {
  	logg("!getpatch: Can't open %s for reading\n", tempname);
          unlink(tempname);
          free(tempname);
--- 722,728 ----
          return ret;
      }
  
!     if((fd = open(tempname, O_RDONLY|O_BINARY)) == -1) {
  	logg("!getpatch: Can't open %s for reading\n", tempname);
          unlink(tempname);
          free(tempname);
*** /home/njh/src/clamav-devel/./freshclam/freshclam.c	2006-08-31 08:47:02.000000000 +0100
--- ./freshclam/freshclam.c	2006-08-31 16:25:48.000000000 +0100
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! 
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 16,24 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! #ifdef	_MSC_VER
! #include <winsock.h>
! #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,40 ****
--- 26,48 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <errno.h>
  #include <signal.h>
  #include <time.h>
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/wait.h>
+ #endif
  #include <sys/stat.h>
  #include <fcntl.h>
+ #ifndef	C_WINDOWS
  #include <pwd.h>
  #include <grp.h>
+ #endif
  
  #if defined(USE_SYSLOG) && !defined(C_AIX)
  #include <syslog.h>
***************
*** 53,76 ****
  static short terminate = 0;
  extern int active_children;
  
! static short foreground = 1;
  
  static void daemon_sighandler(int sig) {
  
      switch(sig) {
  	case SIGCHLD:
  	    waitpid(-1, NULL, WNOHANG);
  	    active_children--;
  	    break;
  
  	case SIGALRM:
  	case SIGUSR1:
! 	    terminate = -1;
  	    break;
  
  	case SIGHUP:
  	    terminate = -2;
  	    break;
  
  	default:
  	    terminate = 1;
--- 61,96 ----
  static short terminate = 0;
  extern int active_children;
  
! void	help(void);
! 
! short foreground = 1;
  
  static void daemon_sighandler(int sig) {
  
      switch(sig) {
+ #ifdef	SIGCHLD
  	case SIGCHLD:
  	    waitpid(-1, NULL, WNOHANG);
  	    active_children--;
  	    break;
+ #endif
  
+ #ifdef	SIGALRM
  	case SIGALRM:
+ 		terminate = -1;
+ 	    break;
+ #endif
+ #ifdef	SIGUSR1
  	case SIGUSR1:
! 		terminate = -1;
  	    break;
+ #endif
  
+ #ifdef	SIGHUP
  	case SIGHUP:
  	    terminate = -2;
  	    break;
+ #endif
  
  	default:
  	    terminate = 1;
***************
*** 80,90 ****
      return;
  }
  
! static void writepid(char *pidfile)
! {
  	FILE *fd;
  	int old_umask;
- 
      old_umask = umask(0006);
      if((fd = fopen(pidfile, "w")) == NULL) {
  	logg("!Can't save PID to file %s: %s\n", pidfile, strerror(errno));
--- 100,109 ----
      return;
  }
  
! 
! static void writepid(char *pidfile) {
  	FILE *fd;
  	int old_umask;
      old_umask = umask(0006);
      if((fd = fopen(pidfile, "w")) == NULL) {
  	logg("!Can't save PID to file %s: %s\n", pidfile, strerror(errno));
***************
*** 95,184 ****
      umask(old_umask);
  }
  
- void help(void)
- {
-     mprintf_stdout = 1;
- 
-     mprintf("\n");
-     mprintf("                   Clam AntiVirus: freshclam  "VERSION"\n");
-     mprintf("    (C) 2002 - 2005 ClamAV Team - http://www.clamav.net/team.html\n\n");
- 
-     mprintf("    --help               -h              show help\n");
-     mprintf("    --version            -V              print version number and exit\n");
-     mprintf("    --verbose            -v              be verbose\n");
-     mprintf("    --debug                              enable debug messages\n");
-     mprintf("    --quiet                              only output error messages\n");
-     mprintf("    --stdout                             write to stdout instead of stderr\n");
-     mprintf("\n");
-     mprintf("    --config-file=FILE                   read configuration from FILE.\n");
-     mprintf("    --log=FILE           -l FILE         log into FILE\n");
-     mprintf("    --daemon             -d              run in daemon mode\n");
-     mprintf("    --pid=FILE           -p FILE         save daemon's pid in FILE\n");
-     mprintf("    --user=USER          -u USER         run as USER\n");
-     mprintf("    --no-dns                             force old non-DNS verification method\n");
-     mprintf("    --checks=#n          -c #n           number of checks per day, 1 <= n <= 50\n");
-     mprintf("    --datadir=DIRECTORY                  download new databases into DIRECTORY\n");
- #ifdef BUILD_CLAMD
-     mprintf("    --daemon-notify[=/path/clamd.conf]   send RELOAD command to clamd\n");
- #endif
-     mprintf("    --local-address=IP   -a IP           bind to IP for HTTP downloads\n");
-     mprintf("    --on-update-execute=COMMAND          execute COMMAND after successful update\n");
-     mprintf("    --on-error-execute=COMMAND           execute COMMAND if errors occured\n");
-     mprintf("    --on-outdated-execute=COMMAND        execute COMMAND when software is outdated\n");
- 
-     mprintf("\n");
- }
- 
- int download(const struct cfgstruct *copt, const struct optstruct *opt)
- {
- 	int ret = 0, try = 0, maxattempts = 0;
- 	struct cfgstruct *cpt;
- 
- 
-     maxattempts = cfgopt(copt, "MaxAttempts")->numarg;
-     logg("*Max retries == %d\n", maxattempts);
- 
-     if(!(cpt = cfgopt(copt, "DatabaseMirror"))->enabled) {
- 	logg("^You must specify at least one database mirror.\n");
- 	return 56;
-     } else {
- 
- 	while(cpt) {
- 	    ret = downloadmanager(copt, opt, cpt->strarg);
- 	    alarm(0);
- 
- 	    if(ret == 52 || ret == 54 || ret == 58 || ret == 59) {
- 		if(try < maxattempts - 1) {
- 		    logg("Trying again in 5 secs...\n");
- 		    try++;
- 		    sleep(5);
- 		    continue;
- 		} else {
- 		    logg("Giving up on %s...\n", cpt->strarg);
- 		    cpt = (struct cfgstruct *) cpt->nextarg;
- 		    if(!cpt) {
- 			logg("^Update failed. Your network may be down or none of the mirrors listed in freshclam.conf is working.\n");
- 		    }
- 		    try = 0;
- 		}
- 
- 	    } else {
- 		return ret;
- 	    }
- 	}
-     }
- 
-     return ret;
- }
- 
  int main(int argc, char **argv)
  {
  	int ret = 52;
  	char *newdir, *cfgfile;
  	char *pidfile = NULL;
  	struct cfgstruct *copt, *cpt;
! 	struct sigaction sigact, oldact;
! #if !defined(C_CYGWIN)  && !defined(C_OS2)
  	char *unpuser;
  	struct passwd *user;
  #endif
--- 114,130 ----
      umask(old_umask);
  }
  
  int main(int argc, char **argv)
  {
  	int ret = 52;
  	char *newdir, *cfgfile;
  	char *pidfile = NULL;
  	struct cfgstruct *copt, *cpt;
! #ifndef	C_WINDOWS
! 	struct sigaction sigact;
! 	struct sigaction oldact;
! #endif
! #if !defined(C_CYGWIN)  && !defined(C_OS2) && !defined(C_WINDOWS)
  	char *unpuser;
  	struct passwd *user;
  #endif
***************
*** 219,233 ****
      }
  
      if(opt_check(opt, "help")) {
-     	help();
- 	opt_free(opt);
- 	return 0;
-     }
- 
-     if(opt_check(opt, "version")) {
- 	print_version();
  	opt_free(opt);
! 	return 0;
      }
  
      /* parse the config file */
--- 165,172 ----
      }
  
      if(opt_check(opt, "help")) {
  	opt_free(opt);
!     	help();
      }
  
      /* parse the config file */
***************
*** 244,249 ****
--- 183,195 ----
  	opt_free(opt);
  	return 56;
      }
+ #ifdef        C_WINDOWS
+ 	if(!pthread_win32_process_attach_np()) {
+ 		mprintf("!Can't start the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
  
      if(opt_check(opt, "http-proxy") || opt_check(opt, "proxy-user"))
  	logg("WARNING: Proxy settings are now only configurable in the config file.\n");
***************
*** 254,260 ****
  	    opt_free(opt);
  	    return 56;
  	}
! #ifndef C_CYGWIN
  	if(statbuf.st_mode & (S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH)) {
  	    logg("^Insecure permissions (for HTTPProxyPassword): %s must have no more than 0700 permissions.\n", cfgfile);
  	    opt_free(opt);
--- 200,206 ----
  	    opt_free(opt);
  	    return 56;
  	}
! #if	!defined(C_CYGWIN) && !defined(C_WINDOWS)
  	if(statbuf.st_mode & (S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH)) {
  	    logg("^Insecure permissions (for HTTPProxyPassword): %s must have no more than 0700 permissions.\n", cfgfile);
  	    opt_free(opt);
***************
*** 263,310 ****
  #endif
      }
  
! #if !defined(C_CYGWIN)  && !defined(C_OS2)
      /* freshclam shouldn't work with root privileges */
!     if(opt_check(opt, "user"))
  	unpuser = opt_arg(opt, "user");
!     else
! 	unpuser = cfgopt(copt, "DatabaseOwner")->strarg;
  
      if(!geteuid()) {
  	if((user = getpwnam(unpuser)) == NULL) {
  	    logg("^Can't get information about user %s.\n", unpuser);
! 	    opt_free(opt);
! 	    return 60;
  	}
  
  	if(cfgopt(copt, "AllowSupplementaryGroups")->enabled) {
  #ifdef HAVE_INITGROUPS
  	    if(initgroups(unpuser, user->pw_gid)) {
  		logg("^initgroups() failed.\n");
! 		opt_free(opt);
! 		return 61;
  	    }
  #endif
  	} else {
  #ifdef HAVE_SETGROUPS
  	    if(setgroups(1, &user->pw_gid)) {
  		logg("^setgroups() failed.\n");
! 		opt_free(opt);
! 		return 61;
  	    }
  #endif
  	}
  
  	if(setgid(user->pw_gid)) {
  	    logg("^setgid(%d) failed.\n", (int) user->pw_gid);
! 	    opt_free(opt);
! 	    return 61;
  	}
  
  	if(setuid(user->pw_uid)) {
  	    logg("^setuid(%d) failed.\n", (int) user->pw_uid);
! 	    opt_free(opt);
! 	    return 61;
  	}
      }
  #endif
--- 209,254 ----
  #endif
      }
  
! #if !defined(C_CYGWIN)  && !defined(C_OS2) && !defined(C_WINDOWS)
      /* freshclam shouldn't work with root privileges */
!     if(opt_check(opt, "user")) {
  	unpuser = opt_arg(opt, "user");
!     } else if((cpt = cfgopt(copt, "DatabaseOwner"))->enabled) {
! 	unpuser = cpt->strarg;
!     } else {
! 	unpuser = UNPUSER;
!     }
  
      if(!geteuid()) {
  	if((user = getpwnam(unpuser)) == NULL) {
  	    logg("^Can't get information about user %s.\n", unpuser);
! 	    exit(60); /* this is critical problem, so we just exit here */
  	}
  
  	if(cfgopt(copt, "AllowSupplementaryGroups")->enabled) {
  #ifdef HAVE_INITGROUPS
  	    if(initgroups(unpuser, user->pw_gid)) {
  		logg("^initgroups() failed.\n");
! 		exit(61);
  	    }
  #endif
  	} else {
  #ifdef HAVE_SETGROUPS
  	    if(setgroups(1, &user->pw_gid)) {
  		logg("^setgroups() failed.\n");
! 		exit(61);
  	    }
  #endif
  	}
  
  	if(setgid(user->pw_gid)) {
  	    logg("^setgid(%d) failed.\n", (int) user->pw_gid);
! 	    exit(61);
  	}
  
  	if(setuid(user->pw_uid)) {
  	    logg("^setuid(%d) failed.\n", (int) user->pw_uid);
! 	    exit(61);
  	}
      }
  #endif
***************
*** 323,328 ****
--- 267,277 ----
      if(opt_check(opt, "stdout"))
  	mprintf_stdout = 1;
  
+     if(opt_check(opt, "version")) {
+ 	print_version();
+ 	exit(0);
+     }
+ 
      /* initialize logger */
  
      if(cfgopt(copt, "LogVerbose")->enabled)
***************
*** 332,346 ****
  	logg_file = opt_arg(opt, "log");
  	if(logg("#--------------------------------------\n")) {
  	    mprintf("!Problem with internal logger (--log=%s).\n", logg_file);
! 	    opt_free(opt);
! 	    return 62;
  	}
      } else if((cpt = cfgopt(copt, "UpdateLogFile"))->enabled) {
  	logg_file = cpt->strarg; 
  	if(logg("#--------------------------------------\n")) {
  	    mprintf("!Problem with internal logger (UpdateLogFile = %s).\n", logg_file);
! 	    opt_free(opt);
! 	    return 62;
  	}
      } else
  	logg_file = NULL;
--- 281,293 ----
  	logg_file = opt_arg(opt, "log");
  	if(logg("#--------------------------------------\n")) {
  	    mprintf("!Problem with internal logger (--log=%s).\n", logg_file);
! 	    exit(62);
  	}
      } else if((cpt = cfgopt(copt, "UpdateLogFile"))->enabled) {
  	logg_file = cpt->strarg; 
  	if(logg("#--------------------------------------\n")) {
  	    mprintf("!Problem with internal logger (UpdateLogFile = %s).\n", logg_file);
! 	    exit(62);
  	}
      } else
  	logg_file = NULL;
***************
*** 352,359 ****
  	if((cpt = cfgopt(copt, "LogFacility"))->enabled) {
  	    if((fac = logg_facility(cpt->strarg)) == -1) {
  		mprintf("!LogFacility: %s: No such facility.\n", cpt->strarg);
! 		opt_free(opt);
! 		return 62;
  	    }
  	}
  
--- 299,305 ----
  	if((cpt = cfgopt(copt, "LogFacility"))->enabled) {
  	    if((fac = logg_facility(cpt->strarg)) == -1) {
  		mprintf("!LogFacility: %s: No such facility.\n", cpt->strarg);
! 		exit(62);
  	    }
  	}
  
***************
*** 370,380 ****
  
      if(chdir(newdir)) {
  	logg("Can't change dir to %s\n", newdir);
! 	opt_free(opt);
! 	return 50;
      } else
  	logg("*Current working dir is %s\n", newdir);
  
      if(opt_check(opt, "daemon")) {
  	    int bigsleep, checks;
  	    time_t now, wakeup;
--- 316,335 ----
  
      if(chdir(newdir)) {
  	logg("Can't change dir to %s\n", newdir);
! 	exit(50);
      } else
  	logg("*Current working dir is %s\n", newdir);
  
+ #ifdef	C_WINDOWS
+ 	{
+ 		WSADATA wsaData;
+ 
+ 		if(WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR) {
+ 			logg("!Error at WSAStartup(): %d\n", WSAGetLastError());
+ 			return 1;
+ 		}
+ 	}
+ #else
      if(opt_check(opt, "daemon")) {
  	    int bigsleep, checks;
  	    time_t now, wakeup;
***************
*** 389,403 ****
  
  	if(checks <= 0) {
  	    logg("^Number of checks must be a positive integer.\n");
! 	    opt_free(opt);
! 	    return 41;
  	}
  
  	if(!cfgopt(copt, "DNSDatabaseInfo")->enabled || opt_check(opt, "no-dns")) {
  	    if(checks > 50) {
  		logg("^Number of checks must be between 1 and 50.\n");
! 		opt_free(opt);
! 		return 41;
  	    }
  	}
  
--- 344,356 ----
  
  	if(checks <= 0) {
  	    logg("^Number of checks must be a positive integer.\n");
! 	    exit(41);
  	}
  
  	if(!cfgopt(copt, "DNSDatabaseInfo")->enabled || opt_check(opt, "no-dns")) {
  	    if(checks > 50) {
  		logg("^Number of checks must be between 1 and 50.\n");
! 		exit(41);
  	    }
  	}
  
***************
*** 406,412 ****
  	if(!cfgopt(copt, "Foreground")->enabled) {
              foreground = 0;
  	    daemonize();
- 	    mprintf_disabled = 1;
          }
  
  	if(opt_check(opt, "pid")) {
--- 359,364 ----
***************
*** 467,472 ****
--- 419,425 ----
  	}
  
      } else
+ #endif	/*C_WINDOWS*/
  	ret = download(copt, opt);
  
      if(opt_check(opt, "on-error-execute")) {
***************
*** 482,486 ****
--- 435,526 ----
      }
  
      opt_free(opt);
+ 
+ #ifdef        C_WINDOWS
+ 	WSACleanup();
+ 
+ 	if(!pthread_win32_process_detach_np()) {
+ 		mprintf("!Can't stop the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
      return(ret);
  }
+ 
+ int download(const struct cfgstruct *copt, const struct optstruct *opt)
+ {
+ 	int ret = 0, try = 0, maxattempts = 0;
+ 	struct cfgstruct *cpt;
+ 
+ 
+     maxattempts = cfgopt(copt, "MaxAttempts")->numarg;
+     logg("*Max retries == %d\n", maxattempts);
+ 
+     if(!(cpt = cfgopt(copt, "DatabaseMirror"))->enabled) {
+ 	logg("^You must specify at least one database mirror.\n");
+ 	return 56;
+     } else {
+ 
+ 	while(cpt) {
+ 	    ret = downloadmanager(copt, opt, cpt->strarg);
+ 	    alarm(0);
+ 
+ 	    if(ret == 52 || ret == 54 || ret == 58 || ret == 59) {
+ 		if(try < maxattempts - 1) {
+ 		    logg("Trying again in 5 secs...\n");
+ 		    try++;
+ 		    sleep(5);
+ 		    continue;
+ 		} else {
+ 		    logg("Giving up on %s...\n", cpt->strarg);
+ 		    cpt = (struct cfgstruct *) cpt->nextarg;
+ 		    if(!cpt) {
+ 			logg("^Update failed. Your network may be down or none of the mirrors listed in freshclam.conf is working.\n");
+ 		    }
+ 		    try = 0;
+ 		}
+ 
+ 	    } else {
+ 		return ret;
+ 	    }
+ 	}
+     }
+ 
+     return ret;
+ }
+ 
+ void help(void)
+ {
+     mprintf_stdout = 1;
+ 
+     mprintf("\n");
+     mprintf("                   Clam AntiVirus: freshclam  "VERSION"\n");
+     mprintf("    (C) 2002 - 2005 ClamAV Team - http://www.clamav.net/team.html\n\n");
+ 
+     mprintf("    --help               -h              show help\n");
+     mprintf("    --version            -V              print version number and exit\n");
+     mprintf("    --verbose            -v              be verbose\n");
+     mprintf("    --debug                              enable debug messages\n");
+     mprintf("    --quiet                              only output error messages\n");
+     mprintf("    --stdout                             write to stdout instead of stderr\n");
+     mprintf("\n");
+     mprintf("    --config-file=FILE                   read configuration from FILE.\n");
+     mprintf("    --log=FILE           -l FILE         log into FILE\n");
+     mprintf("    --daemon             -d              run in daemon mode\n");
+     mprintf("    --pid=FILE           -p FILE         save daemon's pid in FILE\n");
+     mprintf("    --user=USER          -u USER         run as USER\n");
+     mprintf("    --no-dns                             force old non-DNS verification method\n");
+     mprintf("    --checks=#n          -c #n           number of checks per day, 1 <= n <= 50\n");
+     mprintf("    --datadir=DIRECTORY                  download new databases into DIRECTORY\n");
+ #ifdef BUILD_CLAMD
+     mprintf("    --daemon-notify[=/path/clamd.conf]   send RELOAD command to clamd\n");
+ #endif
+     mprintf("    --local-address=IP   -a IP           bind to IP for HTTP downloads\n");
+     mprintf("    --on-update-execute=COMMAND          execute COMMAND after successful update\n");
+     mprintf("    --on-error-execute=COMMAND           execute COMMAND if errors occured\n");
+     mprintf("    --on-outdated-execute=COMMAND        execute COMMAND when software is outdated\n");
+ 
+     mprintf("\n");
+     exit(0);
+ }
*** /home/njh/src/clamav-devel/./freshclam/nonblock.c	2006-09-04 09:24:59.000000000 +0100
--- ./freshclam/nonblock.c	2006-09-04 10:29:12.000000000 +0100
***************
*** 15,20 ****
--- 15,23 ----
   *  along with this program; if not, write to the Free Software
   *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   */
+ #ifdef	_MSC_VER
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,37 ****
  
  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <string.h>
  #include <ctype.h>
  #include <netinet/in.h>
  #include <netdb.h>
  #include <sys/types.h>
! #include <sys/socket.h>
  #include <sys/time.h>
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
--- 27,46 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <ctype.h>
+ #ifndef	C_WINDOWS
  #include <netinet/in.h>
  #include <netdb.h>
+ #endif
  #include <sys/types.h>
! /*#include <sys/socket.h>	/* in nonblock.h */
! #ifndef	C_WINDOWS
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
***************
*** 40,45 ****
--- 49,64 ----
  
  #include "shared/output.h"
  
+ #if	(!defined(EALREADY)) && (defined(WSAEALREADY))
+ #define EALREADY	WSAEALREADY
+ #endif
+ #if	(!defined(EINPROGRESS)) && (defined(WSAEINPROGRESS))
+ #define EINPROGRESS	WSAEINPROGRESS
+ #endif
+ #if	(!defined(EISCONN)) && (defined(WSAEISCONN))
+ #define EISCONN	WSAEISCONN
+ #endif
+ 
  #ifndef timercmp
  # define timercmp(a, b, cmp)          \
    (((a)->tv_sec == (b)->tv_sec) ?     \
***************
*** 227,232 ****
--- 246,252 ----
  
  static long nonblock_fcntl(int sock)
  {
+ #ifdef	F_GETFL
  	long fcntl_flags; /* Save fcntl() flags */
  
  	fcntl_flags = fcntl(sock, F_GETFL, 0);
***************
*** 240,255 ****
--- 260,280 ----
  	}
  
  	return fcntl_flags;
+ #else
+ 	return 0;
+ #endif
  }
  
  static void restore_fcntl(int sock, long fcntl_flags)
  {
+ #ifdef	F_SETFL
  	if (fcntl_flags != -1) {
  		if (fcntl(sock, F_SETFL, fcntl_flags)) {
  			logg("restore_fcntl: restoring: fcntl(%d, F_SETFL): errno=%d: %s\n",
  			     sock, errno, strerror(errno));
  		}
  	}
+ #endif
  }
  
  /*
*** /home/njh/src/clamav-devel/./freshclam/nonblock.h	2006-09-04 09:24:02.000000000 +0100
--- ./freshclam/nonblock.h	2006-09-04 09:35:10.000000000 +0100
***************
*** 24,30 ****
--- 24,32 ----
  #endif
  
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
+ #endif
  
  /*
  	wait_connect(): wrapper for connect(), with explicit 'secs' timeout
*** /home/njh/src/clamav-devel/./freshclam/execute.c	2006-08-31 08:38:17.000000000 +0100
--- ./freshclam/execute.c	2006-08-31 09:18:22.000000000 +0100
***************
*** 23,31 ****
--- 23,36 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <errno.h>
+ #ifdef	C_WINDOWS
+ #include <process.h>
+ #endif
  
  #include "shared/output.h"
  
***************
*** 35,40 ****
--- 40,55 ----
  
  void execute( const char *type, const char *text )
  {
+ #ifdef        C_WINDOWS
+ 	if(active_children < MAX_CHILDREN) {
+ 		if(spawnlp(P_NOWAIT, text, text, NULL) == -1) {
+ 			logg("^%s: couldn't execute \"%s\".\n", type, text);
+ 			return;
+ 		}
+ 			active_children++;
+ 	} else
+ 		logg("^%s: already %d processes active.\n", type, active_children);
+ #else
  	pid_t pid;
  
  	if ( active_children<MAX_CHILDREN )
***************
*** 55,58 ****
--- 70,74 ----
  	{
  		logg("^%s: already %d processes active.\n", type, active_children);
  	}
+ #endif
  }
*** /home/njh/src/clamav-devel/./freshclam/notify.c	2006-08-31 08:53:35.000000000 +0100
--- ./freshclam/notify.c	2006-08-31 09:26:34.000000000 +0100
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
+ 
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,45 ****
--- 29,60 ----
  #ifdef BUILD_CLAMD
  
  #include <stdio.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/un.h>
  #include <netinet/in.h>
  #include <arpa/inet.h>
  #include <netdb.h>
+ #endif
  #include <string.h>
  
  #include "shared/cfgparser.h"
  #include "shared/output.h"
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  int notify(const char *cfgfile)
  {
  	char buff[20];
+ #ifndef	C_WINDOWS
  	struct sockaddr_un server;
+ #endif
          struct sockaddr_in server2;
  	struct hostent *he;
  	struct cfgstruct *copt, *cpt;
***************
*** 52,57 ****
--- 67,73 ----
  	return 1;
      }
  
+ #ifndef	C_WINDOWS
      if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
  	socktype = "UNIX";
  	server.sun_family = AF_UNIX;
***************
*** 64,76 ****
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server, sizeof(struct sockaddr_un)) < 0) {
! 	    close(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd through %s\n", cpt->strarg);
  	    perror("connect()");
  	    return 1;
  	}
  
!     } else if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
  
  	socktype = "TCP";
  #ifdef PF_INET
--- 80,94 ----
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server, sizeof(struct sockaddr_un)) < 0) {
! 	    closesocket(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd through %s\n", cpt->strarg);
  	    perror("connect()");
  	    return 1;
  	}
  
!     } else
! #endif
!     if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
  
  	socktype = "TCP";
  #ifdef PF_INET
***************
*** 98,104 ****
  
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    close(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd on %s:%d\n",
  		    inet_ntoa(server2.sin_addr), ntohs(server2.sin_port));
  	    perror("connect()");
--- 116,122 ----
  
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    closesocket(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd on %s:%d\n",
  		    inet_ntoa(server2.sin_addr), ntohs(server2.sin_port));
  	    perror("connect()");
***************
*** 110,132 ****
  	return 1;
      }
  
!     if(write(sockd, "RELOAD", 6) < 0) {
  	logg("^Clamd was NOT notified: Could not write to %s socket\n", socktype);
  	perror("write()");
! 	close(sockd);
  	return 1;
      }
  
      /* TODO: Handle timeout */
      memset(buff, 0, sizeof(buff));
!     if((bread = read(sockd, buff, sizeof(buff))) > 0)
  	if(!strstr(buff, "RELOADING")) {
  	    logg("^Clamd was NOT notified: Unknown answer from clamd: '%s'\n", buff);
! 	    close(sockd);
  	    return 1;
  	}
  
!     close(sockd);
      logg("Clamd successfully notified about the update.\n");
      return 0;
  }
--- 128,150 ----
  	return 1;
      }
  
!     if(send(sockd, "RELOAD", 6, 0) < 0) {
  	logg("^Clamd was NOT notified: Could not write to %s socket\n", socktype);
  	perror("write()");
! 	closesocket(sockd);
  	return 1;
      }
  
      /* TODO: Handle timeout */
      memset(buff, 0, sizeof(buff));
!     if((bread = recv(sockd, buff, sizeof(buff), 0)) > 0)
  	if(!strstr(buff, "RELOADING")) {
  	    logg("^Clamd was NOT notified: Unknown answer from clamd: '%s'\n", buff);
! 	    closesocket(sockd);
  	    return 1;
  	}
  
!     closesocket(sockd);
      logg("Clamd successfully notified about the update.\n");
      return 0;
  }
*** /home/njh/src/clamav-devel/./clamd/server.h	2006-04-09 20:59:26.000000000 +0100
--- ./clamd/server.h	2006-08-04 10:25:18.000000000 +0100
***************
*** 22,28 ****
  
  #include <time.h>
  #include <clamav.h>
- #include <pthread.h>
  
  struct thrarg {
      int sid;
--- 22,27 ----
***************
*** 31,37 ****
      const struct cl_node *root;
      const struct cl_limits *limits;
  };
! 
  struct thrsession {
      pthread_mutex_t mutex;
      short int active;
--- 30,36 ----
      const struct cl_node *root;
      const struct cl_limits *limits;
  };
! /*
  struct thrsession {
      pthread_mutex_t mutex;
      short int active;
***************
*** 39,44 ****
--- 38,44 ----
      time_t start;
      int desc;
  } *ths;
+ */
  
  /* thread watcher arguments */
  struct thrwarg {
*** /home/njh/src/clamav-devel/./clamd/thrmgr.c	2006-08-04 17:48:25.000000000 +0100
--- ./clamd/thrmgr.c	2006-08-04 10:39:30.000000000 +0100
***************
*** 16,21 ****
--- 16,24 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #if HAVE_CONFIG_H
+ #include "clamav-config.h"
+ #endif
  
  #include <pthread.h>
  #include <time.h>
***************
*** 126,132 ****
  		return NULL;
  	}
  	
! 	threadpool = (threadpool_t *) mmalloc(sizeof(threadpool_t));
  
  	threadpool->queue = work_queue_new();
  	if (!threadpool->queue) {
--- 129,135 ----
  		return NULL;
  	}
  	
! 	threadpool = (threadpool_t *) mcalloc(1, sizeof(threadpool_t));
  
  	threadpool->queue = work_queue_new();
  	if (!threadpool->queue) {
***************
*** 134,144 ****
  		return NULL;
  	}	
  	threadpool->thr_max = max_threads;
- 	threadpool->thr_alive = 0;
- 	threadpool->thr_idle = 0;
  	threadpool->idle_timeout = idle_timeout;
  	threadpool->handler = handler;
  	
  	pthread_mutex_init(&(threadpool->pool_mutex), NULL);
  	if (pthread_cond_init(&(threadpool->pool_cond), NULL) != 0) {
  		free(threadpool);
--- 137,150 ----
  		return NULL;
  	}	
  	threadpool->thr_max = max_threads;
  	threadpool->idle_timeout = idle_timeout;
  	threadpool->handler = handler;
  	
+ #ifdef	C_WINDOWS
+ 	threadpool->pool_mutex = PTHREAD_MUTEX_INITIALIZER;
+ 	threadpool->pool_cond = PTHREAD_COND_INITIALIZER;
+ #endif
+ 	
  	pthread_mutex_init(&(threadpool->pool_mutex), NULL);
  	if (pthread_cond_init(&(threadpool->pool_cond), NULL) != 0) {
  		free(threadpool);
*** /home/njh/src/clamav-devel/./clamd/localserver.c	2006-04-09 20:59:26.000000000 +0100
--- ./clamd/localserver.c	2006-08-01 09:19:14.000000000 +0100
***************
*** 16,26 ****
--- 16,38 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+  
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
  #endif
  
+ #ifdef	C_WINDOWS	/* TODO */
+ 
+ int
+ localserver(const struct cfgstruct *copt, struct cl_node *root)
+ {
+ 	logg("!Localserver is not supported on this platform");
+ 	return -1;
+ }
+ 
+ #else
+ 
  #include <stdio.h>
  #include <string.h>
  #include <sys/types.h>
***************
*** 103,105 ****
--- 115,119 ----
  
      return sockfd;
  }
+ 
+ #endif	/* C_WINDOWS */
\ No newline at end of file
*** /home/njh/src/clamav-devel/./clamd/tcpserver.c	2006-04-09 20:59:26.000000000 +0100
--- ./clamd/tcpserver.c	2006-08-03 11:39:54.000000000 +0100
***************
*** 16,21 ****
--- 16,25 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef	_MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,35 ****
--- 28,44 ----
  #include <stdio.h>
  #include <string.h>
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <netinet/in.h>
  #include <arpa/inet.h>
+ #endif
  #include <clamav.h>
  #include <errno.h>
+ #ifndef	C_WINDOWS
  #include <netdb.h>
+ #endif
+ #include <pthread.h>
  
  #include "options.h"
  #include "cfgparser.h"
***************
*** 47,52 ****
--- 56,62 ----
  	char *estr, buf[1024];
  	int true = 1;
  
+ 
      memset((char *) &server, 0, sizeof(server));
      server.sin_family = AF_INET;
      server.sin_port = htons(cfgopt(copt, "TCPSocket")->numarg);
*** /home/njh/src/clamav-devel/./clamd/thrmgr.h	2006-08-04 17:48:25.000000000 +0100
--- ./clamd/thrmgr.h	2006-07-31 17:03:38.000000000 +0100
***************
*** 21,27 ****
--- 21,29 ----
  #define __THRMGR_H__
  
  #include <pthread.h>
+ #ifndef	C_WINDOWS
  #include <sys/time.h>
+ #endif
  
  typedef struct work_item_tag {
  	struct work_item_tag *next;
*** /home/njh/src/clamav-devel/./clamd/server-th.c	2006-05-12 19:07:19.000000000 +0100
--- ./clamd/server-th.c	2006-08-11 12:17:46.000000000 +0100
***************
*** 17,22 ****
--- 17,27 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+  
+ #ifdef	_MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 29,36 ****
--- 34,45 ----
  #include <string.h>
  #include <time.h>
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
+ #endif
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <clamav.h>
  
  #include "server.h"
***************
*** 43,56 ****
  #include "output.h"
  
  #define BUFFSIZE 1024
  #define FALSE (0)
  #define TRUE (1)
  
  int progexit = 0;
! pthread_mutex_t exit_mutex;
  int reload = 0;
  time_t reloaded_time = 0;
! pthread_mutex_t reload_mutex;
  int sighup = 0;
  
  typedef struct client_conn_tag {
--- 52,69 ----
  #include "output.h"
  
  #define BUFFSIZE 1024
+ #ifndef	FALSE
  #define FALSE (0)
+ #endif
+ #ifndef	TRUE
  #define TRUE (1)
+ #endif
  
  int progexit = 0;
! pthread_mutex_t exit_mutex = PTHREAD_MUTEX_INITIALIZER;
  int reload = 0;
  time_t reloaded_time = 0;
! pthread_mutex_t reload_mutex = PTHREAD_MUTEX_INITIALIZER;
  int sighup = 0;
  
  typedef struct client_conn_tag {
***************
*** 67,80 ****
--- 80,97 ----
  void scanner_thread(void *arg)
  {
  	client_conn_t *conn = (client_conn_t *) arg;
+ #ifndef	C_WINDOWS
  	sigset_t sigset;
+ #endif
  	int ret, timeout, i, session=FALSE;
  	struct cfgstruct *cpt;
  
  
+ #ifndef	C_WINDOWS
      /* ignore all signals */
      sigfillset(&sigset);
      pthread_sigmask(SIG_SETMASK, &sigset, NULL);
+ #endif
  
      timeout = cfgopt(conn->copt, "ReadTimeout")->numarg;
      if(!timeout)
***************
*** 92,98 ****
--- 109,119 ----
  		progexit = 1;
  		for(i = 0; i < conn->nsockets; i++) {
  		    shutdown(conn->socketds[i], 2);
+ #ifdef	C_WINDOWS
+ 		    closesocket(conn->socketds[i]);
+ #else
  		    close(conn->socketds[i]);
+ #endif
  		}
  		pthread_mutex_unlock(&exit_mutex);
  		break;
***************
*** 125,131 ****
--- 146,156 ----
  	}
      } while (session);
  
+ #ifdef	C_WINDOWS
+     closesocket(conn->sd);
+ #else
      close(conn->sd);
+ #endif
      cl_free(conn->root);
      free(conn);
      return;
***************
*** 143,156 ****
  	    logg("Segmentation fault :-( Bye..\n");
  	    _exit(11); /* probably not reached at all */
  	    break; /* not reached */
! 
  	case SIGHUP:
  	    sighup = 1;
  	    break;
! 
  	case SIGUSR2:
  	    reload = 1;
  	    break;
  
  	default:
  	    break; /* Take no action on other signals - e.g. SIGPIPE */
--- 168,183 ----
  	    logg("Segmentation fault :-( Bye..\n");
  	    _exit(11); /* probably not reached at all */
  	    break; /* not reached */
! #ifdef	SIGHUP
  	case SIGHUP:
  	    sighup = 1;
  	    break;
! #endif
! #ifdef	SIGUSR2
  	case SIGUSR2:
  	    reload = 1;
  	    break;
+ #endif
  
  	default:
  	    break; /* Take no action on other signals - e.g. SIGPIPE */
***************
*** 228,238 ****
--- 255,269 ----
  	int new_sd, max_threads, i;
  	unsigned int options = 0;
  	threadpool_t *thr_pool;
+ #ifndef	C_WINDOWS
  	struct sigaction sigact;
+ #endif
  	mode_t old_umask;
  	struct cl_limits limits;
  	pthread_attr_t thattr;
+ #ifndef	C_WINDOWS
  	sigset_t sigset;
+ #endif
  	client_conn_t *client_conn;
  	struct cfgstruct *cpt;
  #ifdef HAVE_STRERROR_R
***************
*** 252,265 ****
  	pthread_attr_t clamuko_attr;
  	struct thrarg *tharg = NULL; /* shut up gcc */
  #endif
  	memset(&sigact, 0, sizeof(struct sigaction));
  
      /* save the PID */
      mainpid = getpid();
      if((cpt = cfgopt(copt, "PidFile"))->enabled) {
  	    FILE *fd;
  	old_umask = umask(0006);
! 	if((fd = fopen(cpt->strarg, "w")) == NULL) {
  	    logg("!Can't save PID in file %s\n", cpt->strarg);
  	} else {
  	    fprintf(fd, "%d", (int) mainpid);
--- 283,299 ----
  	pthread_attr_t clamuko_attr;
  	struct thrarg *tharg = NULL; /* shut up gcc */
  #endif
+ 
+ #ifndef	C_WINDOWS
  	memset(&sigact, 0, sizeof(struct sigaction));
+ #endif
  
      /* save the PID */
      mainpid = getpid();
      if((cpt = cfgopt(copt, "PidFile"))->enabled) {
  	    FILE *fd;
  	old_umask = umask(0006);
! 	if((fd = fopen(cpt->strarg, "wb")) == NULL) {
  	    logg("!Can't save PID in file %s\n", cpt->strarg);
  	} else {
  	    fprintf(fd, "%d", (int) mainpid);
***************
*** 401,406 ****
--- 435,441 ----
  	logg("Clamuko is not available.\n");
  #endif
  
+ #ifndef	C_WINDOWS
      /* set up signal handling */
      sigfillset(&sigset);
      sigdelset(&sigset, SIGINT);
***************
*** 429,434 ****
--- 464,470 ----
  	sigaddset(&sigact.sa_mask, SIGHUP);
  	sigaction(SIGSEGV, &sigact, NULL);
      }
+ #endif
  
  #if defined(C_BIGSTACK) || defined(C_BSD)
      /*
***************
*** 564,570 ****
--- 600,610 ----
  	shutdown(socketds[i], 2);
      logg("*Closing the main socket%s.\n", (nsockets > 1) ? "s" : "");
      for (i = 0; i < nsockets; i++)
+ #ifdef	C_WINDOWS
+ 	closesocket(socketds[i]);
+ #else
  	close(socketds[i]);
+ #endif
  #ifndef C_OS2
      if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
  	if(unlink(cpt->strarg) == -1)
*** /home/njh/src/clamav-devel/./clamd/clamd.c	2006-08-31 08:29:09.000000000 +0100
--- ./clamd/clamd.c	2006-08-31 10:04:52.000000000 +0100
***************
*** 16,21 ****
--- 16,25 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef	_MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,37 ****
--- 28,47 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifndef	C_WINDOWS
  #include <sys/time.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <time.h>
+ #ifndef	C_WINDOWS
  #include <pwd.h>
  #include <grp.h>
+ #endif
  #include <clamav.h>
  
  #if defined(USE_SYSLOG) && !defined(C_AIX)
***************
*** 86,91 ****
--- 96,109 ----
  	    {0, 0, 0, 0}
      	};
  
+ #ifdef	C_WINDOWS
+ 	if(!pthread_win32_process_attach_np()) {
+ 		mprintf("!Can't start the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
+ 
  
      opt = opt_parse(argc, argv, short_options, long_options, NULL);
      if(!opt) {
***************
*** 129,135 ****
      umask(0);
  
      /* drop privileges */
! #ifndef C_OS2
      if(geteuid() == 0 && (cpt = cfgopt(copt, "User"))->enabled) {
  	if((user = getpwnam(cpt->strarg)) == NULL) {
  	    fprintf(stderr, "ERROR: Can't get information about user %s.\n", cpt->strarg);
--- 147,153 ----
      umask(0);
  
      /* drop privileges */
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
      if(geteuid() == 0 && (cpt = cfgopt(copt, "User"))->enabled) {
  	if((user = getpwnam(cpt->strarg)) == NULL) {
  	    fprintf(stderr, "ERROR: Can't get information about user %s.\n", cpt->strarg);
***************
*** 285,292 ****
      } else
          foreground = 1;
  
!     if(tcpsock)
! 	lsockets[nlsockets++] = tcpserver(copt, root);
  
      if(localsock)
  	lsockets[nlsockets++] = localserver(copt, root);
--- 303,319 ----
      } else
          foreground = 1;
  
! 	if(tcpsock) {
! #ifdef	C_WINDOWS
! 		WSADATA wsaData;
! 
! 		if(WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR) {
! 			logg("!Error at WSAStartup(): %d\n", WSAGetLastError());
! 			return -1;
! 		}
! #endif
!                lsockets[nlsockets++] = tcpserver(copt, root);
!        }
  
      if(localsock)
  	lsockets[nlsockets++] = localserver(copt, root);
***************
*** 295,300 ****
--- 322,337 ----
  
      logg_close();
      freecfg(copt);
+ 
+ #ifdef        C_WINDOWS
+ 	if(tcpsock)
+ 		WSACleanup();
+ 	if(!pthread_win32_process_detach_np()) {
+ 		mprintf("!Can't stop the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
      return ret;
  }
  
*** /home/njh/src/clamav-devel/./clamd/others.c	2006-09-05 11:00:19.000000000 +0100
--- ./clamd/others.c	2006-09-05 12:15:32.000000000 +0100
***************
*** 16,21 ****
--- 16,25 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef	_MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 25,45 ****
--- 29,55 ----
  #include <stdarg.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <fcntl.h>
  #include <time.h>
  #include <sys/stat.h>
  #include <errno.h>
+ #ifndef	C_WINDOWS
  #include <sys/time.h>
  #include <sys/wait.h>
+ #endif
  
  
  #if HAVE_SYS_PARAM_H
  #include <sys/param.h>
  #endif
  
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/ioctl.h>
+ #endif
  
  #if HAVE_SYS_TYPES_H
  #include <sys/types.h>
***************
*** 77,82 ****
--- 87,100 ----
  #define ENV_FILE  "CLAM_VIRUSEVENT_FILENAME"
  #define ENV_VIRUS "CLAM_VIRUSEVENT_VIRUSNAME"
  
+ #ifdef	C_WINDOWS
+ void
+ virusaction(const char *filename, const char *virname, const struct cfgstruct *copt)
+ {
+ 	if(cfgopt(copt, "VirusEvent")->enabled)
+ 		logg("^VirusAction is not supported on this platform.\n");
+ }
+ #else
  void virusaction(const char *filename, const char *virname, const struct cfgstruct *copt)
  {
  	pid_t pid;
***************
*** 130,135 ****
--- 148,154 ----
  	logg("!VirusAction: fork failed.\n");
      }
  }
+ #endif
  
  int poll_fds(int *fds, int nfds, int timeout_sec)
  {
***************
*** 303,308 ****
--- 322,338 ----
      return count;
  }
  
+ #ifdef	C_WINDOWS
+ /*
+  * Too many dependancies on Unix style for this to be portable.
+  * TODO: investigate other non *nix operating systems that this code also doesn't support
+  */
+ int
+ readsock(int sockfd, char *buf, size_t size, unsigned char delim, int timeout_sec, int force_delim, int read_command)
+ {
+ 	return recv(sockfd, buf, size, 0);
+ }
+ #else
  /* FD Support Submitted by Richard Lyons <frob-clamav*webcentral.com.au> */
  /*
     This procedure does timed clamd command and delimited input processing.  
***************
*** 450,452 ****
--- 480,483 ----
      }
      return n;
  }
+ #endif
*** /home/njh/src/clamav-devel/./clamd/session.c	2006-09-05 11:02:11.000000000 +0100
--- ./clamd/session.c	2006-09-05 12:16:22.000000000 +0100
***************
*** 24,33 ****
--- 24,37 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/time.h>
+ #endif
  #include <pthread.h>
  #include <time.h>
  #include <signal.h>
*** /home/njh/src/clamav-devel/./clamd/scanner.c	2006-09-05 11:01:24.000000000 +0100
--- ./clamd/scanner.c	2006-09-05 13:07:56.000000000 +0100
***************
*** 16,21 ****
--- 16,24 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef	_MSC_VER
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,33 ****
--- 27,39 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <errno.h>
  #include <sys/stat.h>
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/time.h>
  #include <sys/wait.h>
  #include <sys/param.h>
***************
*** 36,41 ****
--- 42,48 ----
  #include <netinet/in.h>
  #include <arpa/inet.h>
  #include <netdb.h>
+ #endif
  #include <clamav.h>
  #include <pthread.h>
  
***************
*** 124,130 ****
  		closedir(dd);
  		return 1;
  	    }
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 131,137 ----
  		closedir(dd);
  		return 1;
  	    }
! #if	(!defined(C_INTERIX)) && (!defined(C_WINDOWS))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 213,222 ****
--- 220,231 ----
      }
  
      switch(sb.st_mode & S_IFMT) {
+ #ifdef	S_IFLNK
  	case S_IFLNK:
  	    if(!cfgopt(copt, "FollowFileSymlinks")->enabled)
  		break;
  	    /* else go to the next case */
+ #endif
  	case S_IFREG: 
  	    if(sb.st_size == 0) { /* empty file */
  		mdprintf(odesc, "%s: Empty file\n", filename);
*** /home/njh/src/clamav-devel/./clamdscan/clamdscan.c	2006-05-15 19:30:18.000000000 +0100
--- ./clamdscan/clamdscan.c	2006-08-04 11:37:50.000000000 +0100
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+  
+ #ifdef	_MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,31 ****
--- 29,44 ----
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifdef	C_WINDOWS
+ #ifdef	CL_THREAD_SAFE
+ #include <pthread.h>
+ #endif
+ #else
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <signal.h>
  
***************
*** 49,62 ****
  {
  	int ds, dms, ret, infected;
  	struct timeval t1, t2;
  	struct timezone tz;
  	time_t starttime;
  	struct optstruct *opt;
  	char *clamdscan_accepted[] = { "help", "version", "verbose", "quiet",
  				  "stdout", "log", "move", "remove",
  				  "config-file", "no-summary",
  				  "disable-summary", NULL };
! 
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, clamdscan_accepted);
      if(!opt) {
--- 62,83 ----
  {
  	int ds, dms, ret, infected;
  	struct timeval t1, t2;
+ #ifndef	C_WINDOWS
  	struct timezone tz;
+ #endif
  	time_t starttime;
  	struct optstruct *opt;
  	char *clamdscan_accepted[] = { "help", "version", "verbose", "quiet",
  				  "stdout", "log", "move", "remove",
  				  "config-file", "no-summary",
  				  "disable-summary", NULL };
! 				  
! #ifdef	C_WINDOWS
! 	if(!pthread_win32_process_attach_np()) {
! 		mprintf("!Can't start the win32 pthreads layer\n");
! 		return 1;
! 	}
! #endif
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, clamdscan_accepted);
      if(!opt) {
***************
*** 105,117 ****
      time(&starttime);
      /* ctime() does \n, but I need it once more */
  
!     gettimeofday(&t1, &tz);
  
      ret = client(opt, &infected);
  
      /* TODO: Implement STATUS in clamd */
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
  	gettimeofday(&t2, &tz);
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
--- 126,146 ----
      time(&starttime);
      /* ctime() does \n, but I need it once more */
  
! #ifdef	C_WINDOWS
! 	gettimeofday(&t1, NULL);
! #else
! 	gettimeofday(&t1, &tz);
! #endif
  
      ret = client(opt, &infected);
  
      /* TODO: Implement STATUS in clamd */
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
+ #ifdef	C_WINDOWS
+ 	gettimeofday(&t2, NULL);
+ #else
  	gettimeofday(&t2, &tz);
+ #endif
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
***************
*** 128,133 ****
--- 157,171 ----
      }
  
      opt_free(opt);
+ 
+ #ifdef	C_WINDOWS
+ 	WSACleanup();
+ 	if(!pthread_win32_process_detach_np()) {
+ 		mprintf("!Can't stop the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
      exit(ret);
  }
  
*** /home/njh/src/clamav-devel/./clamdscan/client.c	2006-06-22 08:37:14.000000000 +0100
--- ./clamdscan/client.c	2006-09-05 13:21:20.000000000 +0100
***************
*** 16,37 ****
--- 16,46 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+  
+ #ifdef	_MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
  #endif
  
  #include <stdio.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/un.h>
  #include <netinet/in.h>
  #include <arpa/inet.h>
  #include <netdb.h>
  #include <utime.h>
+ #endif
  #include <errno.h>
  
  #ifdef HAVE_SYS_UIO_H
***************
*** 48,53 ****
--- 57,66 ----
  #include "misc.h"
  #include "str.h"
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  #ifdef PF_INET
  # define SOCKET_INET	PF_INET
  #else
***************
*** 59,64 ****
--- 72,141 ----
  void move_infected(const char *filename, const struct optstruct *opt);
  int notremoved = 0, notmoved = 0;
  
+ #ifdef	C_WINDOWS
+ 
+ static	int	get_a_line(int sockd, char *buf, size_t len);
+ 
+ static int
+ dsresult(int sockd, const struct optstruct *opt)
+ {
+ 	char buff[BUFSIZ], *pt;
+ 	int infected = 0, waserror = 0;
+ 	
+ 	while(get_a_line(sockd, buff, sizeof(buff))) {
+ 		if(strstr(buff, "FOUND\n")) {
+ 			infected++;
+ 			logg("%s", buff);
+ 			if(opt_check(opt, "move")) {
+ 				/* filename: Virus FOUND */
+ 				if((pt = strrchr(buff, ':'))) {
+ 					*pt = 0;
+ 					move_infected(buff, opt);
+ 				} else
+ 					mprintf("@Broken data format. File not moved.\n");
+ 			} else if(opt_check(opt, "remove")) {
+ 				if(!(pt = strrchr(buff, ':')))
+ 					mprintf("@Broken data format. File not removed.\n");
+ 				else {
+ 					*pt = 0;
+ 					if(unlink(buff)) {
+ 						mprintf("%s: Can't remove.\n", buff);
+ 						logg("%s: Can't remove.\n", buff);
+ 						notremoved++;
+ 					} else {
+ 						mprintf("%s: Removed.\n", buff);
+ 						logg("%s: Removed.\n", buff);
+ 					}
+ 				}
+ 			}
+ 		}
+ 
+ 		if(strstr(buff, "ERROR\n")) {
+ 			logg("%s", buff);
+ 			waserror = 1;
+ 		}
+ 	}
+ 	
+ 	return infected ? infected : (waserror ? -1 : 0);
+ }
+ 
+ static int
+ get_a_line(int sockd, char *buf, size_t len)
+ {
+ 	char *ptr;
+ 	
+ 	for(ptr = buf; ptr < &buf[len]; ptr++) {
+ 		/* FIXME: very inefficient to call recv so many times */
+ 		if(recv(sockd, ptr, sizeof(char), 0) <= 0)
+ 			return 0;
+ 		if(*ptr == '\n') {
+ 			*++ptr = '\0';
+ 			return 1;
+ 		}
+ 	}
+ 	return 1;	
+ }
+ #else
  static int dsresult(int sockd, const struct optstruct *opt)
  {
  	int infected = 0, waserror = 0;
***************
*** 66,75 ****
  	FILE *fd;
  
  
! #ifndef C_OS2
      if((fd = fdopen(dup(sockd), "r")) == NULL) {
  #else /* FIXME: accoriding to YD OS/2 does not support dup() for sockets */
!     if((fd = fdopen(sockd, "r")) == NULL) {
  #endif
  	logg("^Can't open descriptor for reading.\n");
  	return -1;
--- 143,152 ----
  	FILE *fd;
  
  
! #ifndef	(C_OS2)
      if((fd = fdopen(dup(sockd), "r")) == NULL) {
  #else /* FIXME: accoriding to YD OS/2 does not support dup() for sockets */
!     if((fd = fdopen(sockd, "rb")) == NULL) {
  #endif
  	logg("^Can't open descriptor for reading.\n");
  	return -1;
***************
*** 111,122 ****
  	}
      }
  
! #ifndef C_OS2 /* Small memory leak under OS/2 (see above) */
      fclose(fd);
  #endif
  
      return infected ? infected : (waserror ? -1 : 0);
  }
  
  static int dsfile(int sockd, const char *filename, const struct optstruct *opt)
  {
--- 188,200 ----
  	}
      }
  
! #ifndef	(C_OS2)
      fclose(fd);
  #endif
  
      return infected ? infected : (waserror ? -1 : 0);
  }
+ #endif
  
  static int dsfile(int sockd, const char *filename, const struct optstruct *opt)
  {
***************
*** 127,133 ****
      scancmd = mcalloc(strlen(filename) + 20, sizeof(char));
      sprintf(scancmd, "CONTSCAN %s", filename);
  
!     if(write(sockd, scancmd, strlen(scancmd)) <= 0) {
  	logg("^Can't write to the socket.\n");
  	free(scancmd);
  	return -1;
--- 205,211 ----
      scancmd = mcalloc(strlen(filename) + 20, sizeof(char));
      sprintf(scancmd, "CONTSCAN %s", filename);
  
!     if(send(sockd, scancmd, strlen(scancmd), 0) <= 0) {
  	logg("^Can't write to the socket.\n");
  	free(scancmd);
  	return -1;
***************
*** 311,317 ****
--- 389,397 ----
  
  static int dconnect(const struct optstruct *opt)
  {
+ #ifndef	C_WINDOWS
  	struct sockaddr_un server;
+ #endif
  	struct sockaddr_in server2;
  	struct hostent *he;
  	struct cfgstruct *copt, *cpt;
***************
*** 327,338 ****
--- 407,421 ----
  	return -1;
      }
  
+ #ifndef	C_WINDOWS
      memset((char *) &server, 0, sizeof(server));
+ #endif
      memset((char *) &server2, 0, sizeof(server2));
  
      /* Set default address to connect to */
      server2.sin_addr.s_addr = inet_addr("127.0.0.1");    
  
+ #ifndef	C_WINDOWS
      if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
  
  	server.sun_family = AF_UNIX;
***************
*** 351,357 ****
  	    return -1;
  	}
  
!     } else if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
  
  	if((sockd = socket(SOCKET_INET, SOCK_STREAM, 0)) < 0) {
  	    perror("socket()");
--- 434,450 ----
  	    return -1;
  	}
  
!     } else
! #endif
!        if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
! #ifdef	C_WINDOWS
! 		WSADATA wsaData;
! 		
! 		if(WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR) {
! 			logg("!Error at WSAStartup(): %d\n", WSAGetLastError());
! 			return -1;
! 		}
! #endif
  
  	if((sockd = socket(SOCKET_INET, SOCK_STREAM, 0)) < 0) {
  	    perror("socket()");
***************
*** 373,379 ****
--- 466,476 ----
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
+ #ifdef	C_WINDOWS
+ 		closesocket(sockd);
+ #else
  	    close(sockd);
+ #endif
  	    perror("connect()");
  	    logg("^Can't connect to clamd.\n");
  	    return -1;
***************
*** 413,419 ****
  	else
  	    errors++;
  
! 	close(sockd);
  
  #if defined(ENABLE_FD_PASSING) && defined(HAVE_SENDMSG) && (defined(HAVE_ACCRIGHTS_IN_MSGHDR) || defined(HAVE_CONTROL_IN_MSGHDR)) && !defined(C_CYGWIN)
      } else if(!strcmp(opt->filename, "-")) { /* scan data from stdin */
--- 510,516 ----
  	else
  	    errors++;
  
! 	closesocket(sockd);
  
  #if defined(ENABLE_FD_PASSING) && defined(HAVE_SENDMSG) && (defined(HAVE_ACCRIGHTS_IN_MSGHDR) || defined(HAVE_CONTROL_IN_MSGHDR)) && !defined(C_CYGWIN)
      } else if(!strcmp(opt->filename, "-")) { /* scan data from stdin */
***************
*** 471,477 ****
--- 568,579 ----
  			else
  			    errors++;
  
+ 
+ #ifdef	C_WINDOWS
+ 			closesocket(sockd);
+ #else
  			close(sockd);
+ #endif
  			break;
  
  		    default:
***************
*** 492,498 ****
--- 594,602 ----
  	char *movedir, *movefilename, *tmp, numext[4 + 1];
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
+ #ifndef	C_WINDOWS
  	struct utimbuf ubuf;
+ #endif
  
  
      if(!(movedir = opt_arg(opt, "move"))) {
***************
*** 577,585 ****
--- 681,691 ----
  	chmod(movefilename, fstat.st_mode);
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  
+ #ifndef	C_WINDOWS
  	ubuf.actime = fstat.st_atime;
  	ubuf.modtime = fstat.st_mtime;
  	utime(movefilename, &ubuf);
+ #endif
  
  	if(unlink(filename)) {
  	    logg("^cannot unlink '%s': %s\n", filename, strerror(errno));
*** /home/njh/src/clamav-devel/./clamconf/clamconf.c	2006-05-15 19:30:18.000000000 +0100
--- ./clamconf/clamconf.c	2006-08-04 13:06:46.000000000 +0100
***************
*** 26,32 ****
--- 26,34 ----
  #include <string.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "cfgparser.h"
  #define _GNU_SOURCE
*** /home/njh/src/clamav-devel/./sigtool/vba.c	2006-04-09 20:59:28.000000000 +0100
--- ./sigtool/vba.c	2006-08-04 13:32:54.000000000 +0100
***************
*** 17,30 ****
--- 17,38 ----
   *  MA 02110-1301, USA.
   */
  
+ #if HAVE_CONFIG_H
+ #include "clamav-config.h"
+ #endif
+ 
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
+ #ifndef	C_WINDOWS
  #include <dirent.h>
+ #endif
  #include <clamav.h>
  #include <ctype.h>
  
***************
*** 963,969 ****
--- 971,981 ----
  
      if ((dd = opendir (dirname)) != NULL) {
  	while ((dent = readdir (dd))) {
+ #if  (!defined(C_CYGWIN)) && (!defined(C_WINDOWS))
  	    if (dent->d_ino) {
+ #else
+ 	 {
+ #endif
  		if (strcmp (dent->d_name, ".") && strcmp (dent->d_name, "..")) {
  		    /* build the full name */
  		    fname = (char *) cli_calloc (strlen (dirname) + strlen (dent->d_name) + 2, sizeof (char));
***************
*** 1120,1126 ****
--- 1132,1142 ----
  
      if ((dd = opendir (dirname)) != NULL) {
  	while ((dent = readdir (dd))) {
+ #if  (!defined(C_CYGWIN)) && (!defined(C_WINDOWS))
  	    if (dent->d_ino) {
+ #else
+ 	    {
+ #endif
  		if (strcmp (dent->d_name, ".") && strcmp (dent->d_name, "..")) {
  		    /* build the full name */
  		    fname = calloc (strlen (dirname) + strlen (dent->d_name) + 2, sizeof (char));
*** /home/njh/src/clamav-devel/./sigtool/sigtool.c	2006-08-13 17:01:45.000000000 +0100
--- ./sigtool/sigtool.c	2006-08-04 13:50:52.000000000 +0100
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! 
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
--- 16,25 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! #ifdef	_MSC_VER
! #include <windows.h>
! #include <winsock.h>
! #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 25,44 ****
--- 28,53 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <zlib.h>
  #include <time.h>
  #include <locale.h>
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/un.h>
  #include <netinet/in.h>
  #include <arpa/inet.h>
+ #endif
  #include <clamav.h>
+ #ifndef	C_WINDOWS
  #include <sys/wait.h>
  #include <dirent.h>
+ #endif
  
  #ifdef HAVE_TERMIOS_H
  #include <termios.h>
***************
*** 319,325 ****
  
  static int build(struct optstruct *opt)
  {
! 	int ret, inc = 1, dn;
  	size_t bytes;
  	unsigned int sigs = 0, oldsigs = 0, lines = 0, version, real_header;
  	struct stat foo;
--- 328,334 ----
  
  static int build(struct optstruct *opt)
  {
! 	int ret, inc = 1;
  	size_t bytes;
  	unsigned int sigs = 0, oldsigs = 0, lines = 0, version, real_header;
  	struct stat foo;
***************
*** 484,498 ****
  				 "daily.fp", "daily.info", "main.info", NULL };
  		args[2] = tarfile;
  		if(!opt_check(opt, "debug")) {
! 		    if((dn = open("/dev/null", O_WRONLY)) == -1) {
! 			mprintf("^Cannot open /dev/null\n");
! 			close(1);
! 			close(2);
! 		    } else {
! 			dup2(dn, 1);
! 			dup2(dn, 2);
! 			close(dn);
! 		    }
  		}
  		execv("/bin/tar", args);
  		mprintf("!build: Can't execute tar\n");
--- 493,500 ----
  				 "daily.fp", "daily.info", "main.info", NULL };
  		args[2] = tarfile;
  		if(!opt_check(opt, "debug")) {
! 		    close(1);
! 		    close(2);
  		}
  		execv("/bin/tar", args);
  		mprintf("!build: Can't execute tar\n");
***************
*** 805,811 ****
      }
  
      while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	if(dent->d_ino)
  #endif
  	{
--- 807,813 ----
      }
  
      while((dent = readdir(dd))) {
! #if	((!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS)))
  	if(dent->d_ino)
  #endif
  	{
***************
*** 816,822 ****
  	     cli_strbcasestr(dent->d_name, ".sdb") ||
  	     cli_strbcasestr(dent->d_name, ".zmd") ||
  	     cli_strbcasestr(dent->d_name, ".rmd") ||
- 	     cli_strbcasestr(dent->d_name, ".inc") ||
  	     cli_strbcasestr(dent->d_name, ".cvd"))) {
  
  		dbfile = (char *) mcalloc(strlen(dent->d_name) + strlen(dirname) + 2, sizeof(char));
--- 818,823 ----
***************
*** 851,864 ****
  	const char *tmpdir;
  
  
-     if(cli_strbcasestr(filename, ".inc")) { /* incremental directory */
- 	if(listdir(filename) == -1) {
- 	    mprintf("!listdb: Can't list incremental directory %s\n", filename);
- 	    return -1;
- 	}
- 	return 0;
-     }
- 
      if((fd = fopen(filename, "rb")) == NULL) {
  	mprintf("!listdb: Can't open file %s\n", filename);
  	return -1;
--- 852,857 ----
***************
*** 906,912 ****
  
  	/* list extracted directory */
  	if(listdir(dir) == -1) {
! 	    mprintf("!listdb: Can't list directory %s\n", filename);
  	    rmdirs(dir);
  	    free(dir);
  	    return -1;
--- 899,905 ----
  
  	/* list extracted directory */
  	if(listdir(dir) == -1) {
! 	    mprintf("!listdb: Can't unpack CVD file %s\n", filename);
  	    rmdirs(dir);
  	    free(dir);
  	    return -1;
***************
*** 1315,1321 ****
      }
  
      while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	if(dent->d_ino)
  #endif
  	{
--- 1308,1314 ----
      }
  
      while((dent = readdir(dd))) {
! #if	((!defined(C_CYGWIN)) && (!defined(C_INTERIX)) && (!defined(C_WINDOWS)))
  	if(dent->d_ino)
  #endif
  	{
***************
*** 1483,1489 ****
  {
  	int ret = 1;
          struct optstruct *opt;
- 	struct stat sb;
  	const char *short_options = "hvVb:i:u:l::r:d:";
  	static struct option long_options[] = {
  	    {"help", 0, 0, 'h'},
--- 1476,1481 ----
***************
*** 1564,1578 ****
  	    mprintf("!--verify-cdiff requires two arguments\n");
  	    ret = -1;
  	} else {
! 	    if(stat(opt->filename, &sb) == -1) {
! 		mprintf("--verify-cdiff: Can't get status of %s\n", opt->filename);
! 		ret = -1;
! 	    } else {
! 		if(S_ISDIR(sb.st_mode))
! 		    ret = verifycdiff(opt_arg(opt, "verify-cdiff"), NULL, opt->filename);
! 		else
! 		    ret = verifycdiff(opt_arg(opt, "verify-cdiff"), opt->filename, NULL);
! 	    }
  	}
      } else
  	help();
--- 1556,1565 ----
  	    mprintf("!--verify-cdiff requires two arguments\n");
  	    ret = -1;
  	} else {
! 	    if(cli_strbcasestr(opt->filename, ".cvd"))
! 		ret = verifycdiff(opt_arg(opt, "verify-cdiff"), opt->filename, NULL);
! 	    else
! 		ret = verifycdiff(opt_arg(opt, "verify-cdiff"), NULL, opt->filename);
  	}
      } else
  	help();
