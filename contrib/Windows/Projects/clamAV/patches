*** /home/njh/src/clamav-devel/./libclamav/mbox.c	2006-11-03 20:30:03.000000000 +0000
--- ./libclamav/mbox.c	2006-10-29 13:57:36.000000000 +0000
***************
*** 16,22 ****
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $";
  
  #ifdef	_MSC_VER
  #include <winsock.h>	/* only needed in CL_EXPERIMENTAL */
--- 16,22 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $";
  
  #ifdef	_MSC_VER
  #include <winsock.h>	/* only needed in CL_EXPERIMENTAL */
***************
*** 1673,1686 ****
  						continue;
  				}
  
- 				/*
- 				 * Handle broken headers, where the next
- 				 * line isn't indented by whitespace
- 				 */
- 				if(fullline[fulllinelength - 2] == ';')
- 					/* Add arguments to this line */
- 					continue;
- 
  				if(line && (count_quotes(fullline) & 1))
  					continue;
  
--- 1673,1678 ----
*** /home/njh/src/clamav-devel/./libclamav/js/alloc.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/alloc.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 22,36 ****
   * MA 02111-1307, USA
   */
  
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
- 
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "js/jsint.h"
--- 22,30 ----
   * MA 02111-1307, USA
   */
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "js/jsint.h"
***************
*** 315,318 ****
  }
  
  #endif /* not JS_DEBUG_MEMORY_LEAKS */
- #endif	/*CL_EXPERIMENTAL*/
--- 309,311 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_array.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_array.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,30 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
--- 24,30 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
***************
*** 47,58 ****
   *   length
   */
  
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
- 
  #include "jsint.h"
  #include "mrgsort.h"
  
--- 47,52 ----
***************
*** 654,657 ****
    n = &vm->globals[js_vm_intern (vm, "Array")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 648,650 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_bool.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_bool.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,38 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
- 
  #include "jsint.h"
  
  /*
--- 24,32 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
  /*
***************
*** 157,160 ****
    n = &vm->globals[js_vm_intern (vm, "Boolean")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 151,153 ----
*** /home/njh/src/clamav-devel/./libclamav/js/bc.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/bc.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 227,230 ****
    js_free (bc->sects);
    js_free (bc);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 222,224 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_core.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_core.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,30 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
--- 24,30 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
***************
*** 44,54 ****
   *  isInt (any)
   *  print (any[,...])
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 44,49 ----
***************
*** 662,665 ****
        js_vm_builtin_create (vm, n, info, NULL);
      }
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 657,659 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_date.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_date.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  #include "rentrant.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  #include "rentrant.h"
***************
*** 795,798 ****
        js_vm_builtin_create (vm, n, info, NULL);
      }
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 790,792 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_dir.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_dir.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 322,325 ****
    n = &vm->globals[js_vm_intern (vm, "Directory")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 317,319 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_file.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_file.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,30 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
--- 24,30 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
***************
*** 63,73 ****
   *   autoFlush	boolean		mutable
   *   bufferSize	integer		mutable
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 63,68 ----
***************
*** 1015,1018 ****
    /* Create the builtin. */
    js_vm_builtin_create (vm, result_return, n->u.vbuiltin->info, ictx);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 1010,1012 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_func.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_func.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 81,84 ****
    n = &vm->globals[js_vm_intern (vm, "Function")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 76,78 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_math.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_math.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  #include "rentrant.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  #include "rentrant.h"
***************
*** 514,517 ****
    n = &vm->globals[js_vm_intern (vm, "Math")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 509,511 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_number.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_number.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,40 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
   * Standard: ECMAScript-2.0.draft-22-Apr-98
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,35 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
   * Standard: ECMAScript-2.0.draft-22-Apr-98
   */
  
  #include "jsint.h"
  
***************
*** 323,326 ****
    n = &vm->globals[js_vm_intern (vm, "Number")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 318,320 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_object.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_object.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 198,201 ****
    n = &vm->globals[js_vm_intern (vm, "Object")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 193,195 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_regexp.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_regexp.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  #include "regex.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  #include "regex.h"
***************
*** 1139,1142 ****
    if (regs.end)
      free (regs.end);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 1134,1136 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_string.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_string.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,38 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /* TODO: global method: String (obj) => string */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,33 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /* TODO: global method: String (obj) => string */
  
  #include "jsint.h"
  
***************
*** 940,943 ****
    n = &vm->globals[js_vm_intern (vm, "RegExp")];
    ctx->regexp_info = n->u.vbuiltin->info;
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 935,937 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_system.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_system.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,30 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
--- 24,30 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
***************
*** 55,65 ****
   *   stdin			file
   *   stdout			file
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 55,60 ----
***************
*** 524,527 ****
    js_builtin_File_new (vm, &ctx->pstdin, "stdin", vm->s_stdin, 1);
    js_builtin_File_new (vm, &ctx->pstdout, "stdout", vm->s_stdout, 1);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 519,521 ----
*** /home/njh/src/clamav-devel/./libclamav/js/b_vm.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/b_vm.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,30 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
--- 24,30 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  /*
***************
*** 56,66 ****
   *   VM.versionPatch		integer
   *   VM.warnUndef		boolean		yes
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 56,61 ----
***************
*** 448,451 ****
    n = &vm->globals[js_vm_intern (vm, "VM")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 443,445 ----
*** /home/njh/src/clamav-devel/./libclamav/js/compiler.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/compiler.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 1,8 ****
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  const unsigned char js_compiler_bytecode[] = {
    0xc0, 0x01, 0x4a, 0x53, 0x00, 0x00, 0x00, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0x54,
--- 1,3 ----
***************
*** 11201,11204 ****
  };
  unsigned int js_compiler_bytecode_len = 89552;
  #define JS_COMPILER_BYTECODE_LEN 89552
- #endif	/*CL_EXPERIMENTAL*/
--- 11196,11198 ----
*** /home/njh/src/clamav-devel/./libclamav/js/heap.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/heap.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 589,592 ****
    /* Just sweep without marking. */
    sweep (vm);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 584,586 ----
*** /home/njh/src/clamav-devel/./libclamav/js/iostream.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/iostream.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 476,479 ****
    if (stream->data_in_buf == 0)
      stream->at_eof = 1;
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 471,473 ----
*** /home/njh/src/clamav-devel/./libclamav/js/js.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/js.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "js/js.h"
  #include "js/jsint.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "js/js.h"
  #include "js/jsint.h"
***************
*** 1687,1690 ****
  
    return stream;
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 1682,1684 ----
*** /home/njh/src/clamav-devel/./libclamav/js/main.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/main.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 1,9 ****
  #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
- #if HAVE_CONFIG_H
  #include "js/jsconfig.h"
  #endif
  
--- 1,4 ----
***************
*** 162,165 ****
  	return interp;
  }
  
- #endif	/*CL_EXPERIMENTAL*/
--- 157,159 ----
*** /home/njh/src/clamav-devel/./libclamav/js/object.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/object.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 538,541 ****
  
    return -1;
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 533,535 ----
*** /home/njh/src/clamav-devel/./libclamav/js/r_pthrs.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/r_pthrs.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  #include "rentrant.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  #include "rentrant.h"
***************
*** 132,135 ****
  }
  
  #endif /* not DRAND48_R_WITH_DRAND48D */
- #endif	/*CL_EXPERIMENTAL*/
--- 127,129 ----
*** /home/njh/src/clamav-devel/./libclamav/js/utils.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/utils.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 442,445 ****
  
    return result;
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 437,439 ----
*** /home/njh/src/clamav-devel/./libclamav/js/vm.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/vm.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 971,974 ****
    js_builtin_Object (vm);
    js_builtin_String (vm);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 966,968 ----
*** /home/njh/src/clamav-devel/./libclamav/js/vmjumps.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/vmjumps.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 586,589 ****
    return NULL;
  #endif /* not (__GNUC__ && !DISABLE_JUMPS) */
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 581,583 ----
*** /home/njh/src/clamav-devel/./libclamav/js/vmswitch.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/vmswitch.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "jsint.h"
  
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "jsint.h"
  
***************
*** 557,560 ****
  
    JS_COPY (&vm->exec_result, JS_SP1);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 552,554 ----
*** /home/njh/src/clamav-devel/./libclamav/js/xjs.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/xjs.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,36 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
- 
- #ifdef	CL_EXPERIMENTAL
  
  #include "js/js.h"
  #include "js/jsint.h"
--- 24,31 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
  #include "js/js.h"
  #include "js/jsint.h"
***************
*** 463,466 ****
  
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 458,460 ----
*** /home/njh/src/clamav-devel/./libclamav/js/xmd5.c	2006-10-28 12:33:45.000000000 +0100
--- ./libclamav/js/xmd5.c	2006-10-21 14:58:34.000000000 +0100
***************
*** 24,39 ****
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
- #if HAVE_CONFIG_H
- #include "clamav-config.h"
- #endif
  
! #ifdef	CL_EXPERIMENTAL
! 
! #include "jsint.h"
! #include "md5.h"
  
  /*
   * Types and definitions.
--- 24,34 ----
  
  /*
   * $Source: /tmp/cvsroot-15-2-2007/clamav-devel/contrib/Windows/Projects/clamAV/patches,v $
!  * $Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $
   */
  
! #include "js/jsint.h"
! #include "js/md5.h"
  
  /*
   * Types and definitions.
***************
*** 225,228 ****
    n = &vm->globals[js_vm_intern (vm, "MD5")];
    js_vm_builtin_create (vm, n, info, NULL);
  }
- #endif	/*CL_EXPERIMENTAL*/
--- 220,222 ----
*** /home/njh/src/clamav-devel/./libclamav/js/jsconfig.h	2006-10-19 18:27:28.000000000 +0100
--- ./libclamav/js/jsconfig.h	2006-10-21 16:12:36.000000000 +0100
***************
*** 165,168 ****
  #define HAVE_STRING_H 1
  
  /* Define if you have the <unistd.h> header file.  */
! #define HAVE_UNISTD_H 1
--- 165,168 ----
  #define HAVE_STRING_H 1
  
  /* Define if you have the <unistd.h> header file.  */
! /* #undef HAVE_UNISTD_H 1 */
*** /home/njh/src/clamav-devel/./libclamav/jscript.c	2006-10-27 15:06:35.000000000 +0100
--- ./libclamav/jscript.c	2006-10-21 16:11:38.000000000 +0100
***************
*** 19,32 ****
   * Save the JavaScript embedded in an HTML file, then run the script, saving
   * the output in a file that is to be scanned, then remove the script file
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
  #endif
  
  #include "clamav.h"
- #include "others.h"
  
  #ifdef	CL_EXPERIMENTAL
  
--- 19,31 ----
   * Save the JavaScript embedded in an HTML file, then run the script, saving
   * the output in a file that is to be scanned, then remove the script file
   */
! static	char	const	rcsid[] = "$Id: patches,v 1.14 2006/11/05 10:18:34 njh Exp $";
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
  #endif
  
  #include "clamav.h"
  
  #ifdef	CL_EXPERIMENTAL
  
***************
*** 42,48 ****
  #include <unistd.h>
  #endif
  
! #include "jscript.h"
  
  #if HAVE_SYS_MMAN_H
  #include <sys/mman.h>
--- 41,48 ----
  #include <unistd.h>
  #endif
  
! #include "others.h"
! #include "js.h"
  
  #if HAVE_SYS_MMAN_H
  #include <sys/mman.h>
***************
*** 288,295 ****
  #include "js/iostream.c"
  #include "js/js.c"
  #include "js/main.c"
- #include "js/debug.c"
- #include "js/crc32.c"
  
  /* Copied from pdf.c :-( */
  /*
--- 288,293 ----
*** /home/njh/src/clamav-devel/./clamscan/manager.c	2006-10-29 14:49:55.000000000 +0000
--- ./clamscan/manager.c	2006-10-29 16:59:48.000000000 +0000
***************
*** 30,40 ****
--- 30,48 ----
  #include <ctype.h>
  #include <sys/stat.h>
  #include <sys/types.h>
+ #ifdef	C_WINDOWS
+ #include <sys/utime.h>
+ #else
  #include <sys/wait.h>
  #include <utime.h>
+ #endif
+ #ifdef	HAVE_INITGROUPS
  #include <grp.h>
+ #endif
  #include <fcntl.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
  #include <signal.h>
  #include <clamav.h>
***************
*** 57,62 ****
--- 65,75 ----
  dev_t procdev;
  #endif
  
+ #ifdef	C_WINDOWS
+ #undef	P_tmpdir
+ 
+ #define	P_tmpdir	"C:\\WINDOWS\\TEMP"
+ #endif
  
  int scanmanager(const struct optstruct *opt)
  {
***************
*** 69,77 ****
  	struct stat sb;
  	char *fullpath = NULL, cwd[1024];
  
- 
  /* njh@bandsman.co.uk: BeOS */
! #if !defined(C_CYGWIN) && !defined(C_OS2) && !defined(C_BEOS)
      if(!geteuid()) {
  	if((user = getpwnam(UNPUSER)) == NULL) {
  	    logg("!Can't get information about user "UNPUSER"\n");
--- 82,89 ----
  	struct stat sb;
  	char *fullpath = NULL, cwd[1024];
  
  /* njh@bandsman.co.uk: BeOS */
! #if !defined(C_CYGWIN) && !defined(C_OS2) && !defined(C_BEOS) && !defined(C_WINDOWS)
      if(!geteuid()) {
  	if((user = getpwnam(UNPUSER)) == NULL) {
  	    logg("!Can't get information about user "UNPUSER"\n");
***************
*** 365,376 ****
--- 377,390 ----
  	return 0;
      }
  
+ #ifndef	C_WINDOWS
      if(geteuid())
  	if(checkaccess(filename, NULL, R_OK) != 1) {
  	    if(!printinfected)
  		logg("%s: Access denied\n", filename);
  	    return 0;
  	}
+ #endif
  
      claminfo.files++;
  
***************
*** 481,487 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 495,501 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 500,506 ****
  	exit(63); /* critical */
      }
  
! #ifndef C_OS2
      if(user)
  	chown(gendir, user->pw_uid, user->pw_gid);
  #endif
--- 514,521 ----
  	exit(63); /* critical */
      }
  
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
! 	/* FIXME: do the correct native windows way */
      if(user)
  	chown(gendir, user->pw_uid, user->pw_gid);
  #endif
***************
*** 652,658 ****
  		} else {
  		    logg("%s: Removed\n", filename);
  		}
! 	    } else if (opt_check(opt, "move") || opt_check(opt, "copy"))
  		move_infected(filename, opt);
  
  	    return 1;
--- 667,673 ----
  		} else {
  		    logg("%s: Removed\n", filename);
  		}
! 	    } else if (opt_check(opt, "move"))
  		move_infected(filename, opt);
  
  	    return 1;
***************
*** 679,685 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 694,700 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 715,721 ****
  
      fixperms(gendir);
  
! #ifndef C_OS2
      if(user) {
  	chown(gendir, user->pw_uid, user->pw_gid);
  	chown(tmpfile, user->pw_uid, user->pw_gid);
--- 730,736 ----
  
      fixperms(gendir);
  
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
      if(user) {
  	chown(gendir, user->pw_uid, user->pw_gid);
  	chown(tmpfile, user->pw_uid, user->pw_gid);
***************
*** 758,764 ****
  
      logg("*Scanning %s\n", filename);
  
!     if((fd = open(filename, O_RDONLY)) == -1) {
  	logg("^Can't open file %s\n", filename);
  	return 54;
      }
--- 773,779 ----
  
      logg("*Scanning %s\n", filename);
  
!     if((fd = open(filename, O_RDONLY|O_BINARY)) == -1) {
  	logg("^Can't open file %s\n", filename);
  	return 54;
      }
***************
*** 793,799 ****
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
--- 808,814 ----
      tmpdir = getenv("TMPDIR");
  
      if(tmpdir == NULL)
! #ifdef	P_tmpdir
  	tmpdir = P_tmpdir;
  #else
  	tmpdir = "/tmp";
***************
*** 811,816 ****
--- 826,838 ----
  	return 63;
      }
  
+ #ifdef	C_WINDOWS
+ 	if(setmode(fileno(stdin), O_BINARY) < 0) {
+ 		logg("^Can't set binary mode on stdin\n");
+ 		return 63;
+ 	}
+ #endif
+ 
      while((ret = fread(buff, 1, FILEBUFF, stdin)))
  	fwrite(buff, 1, ret, fs);
  
***************
*** 845,850 ****
--- 867,880 ----
   * 0 -> OK
   */
  
+ #ifdef	C_WINDOWS
+ int clamav_unpack(const char *prog, char **args, const char *tmpdir, const struct passwd *user, const struct optstruct *opt)
+ {
+ 	/* TODO: use spamvp(P_WAIT, prog, args); */
+ 	cli_errmsg("clamav_unpack is not supported under Windows yet\n");
+ 	return -1;
+ }
+ #else
  int clamav_unpack(const char *prog, char **args, const char *tmpdir, const struct passwd *user, const struct optstruct *opt)
  {
  	pid_t pid;
***************
*** 875,881 ****
  	case -1:
  	    return -1;
  	case 0:
! #ifndef C_CYGWIN
  	    if(!geteuid() && user) {
  
  #ifdef HAVE_SETGROUPS
--- 905,911 ----
  	case -1:
  	    return -1;
  	case 0:
! #if	(!defined(C_CYGWIN)) && (!defined(C_WINDOWS))
  	    if(!geteuid() && user) {
  
  #ifdef HAVE_SETGROUPS
***************
*** 951,956 ****
--- 981,987 ----
  
      return 0;
  }
+ #endif
  
  void move_infected(const char *filename, const struct optstruct *opt)
  {
***************
*** 958,968 ****
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
  	int moveflag = opt_check(opt, "move");
! 	struct utimbuf ubuf;
  
  
      if((moveflag && !(movedir = opt_arg(opt, "move"))) ||
! 	(!moveflag && !(movedir = opt_arg(opt, "copy")))) {
          /* Should never reach here */
          logg("!opt_arg() returned NULL\n", filename);
          claminfo.notmoved++;
--- 989,999 ----
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
  	int moveflag = opt_check(opt, "move");
! 	struct _utimbuf ubuf;
  
  
      if((moveflag && !(movedir = opt_arg(opt, "move"))) ||
!        (!moveflag && !(movedir = opt_arg(opt, "copy")))) {
          /* Should never reach here */
          logg("!opt_arg() returned NULL\n", filename);
          claminfo.notmoved++;
***************
*** 970,976 ****
      }
  
      if(access(movedir, W_OK|X_OK) == -1) {
! 	logg("!Can't %s file '%s': cannot write to '%s': %s\n", (moveflag) ? "move" : "copy", filename, movedir, strerror(errno));
          claminfo.notmoved++;
          return;
      }
--- 1001,1007 ----
      }
  
      if(access(movedir, W_OK|X_OK) == -1) {
!         logg("!Can't %s file '%s': cannot write to '%s': %s\n", (moveflag) ? "move" : "copy", filename, movedir, strerror(errno));
          claminfo.notmoved++;
          return;
      }
***************
*** 1037,1043 ****
  	}
  
  	chmod(movefilename, fstat.st_mode);
! #ifndef C_OS2
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  #endif
  
--- 1068,1074 ----
  	}
  
  	chmod(movefilename, fstat.st_mode);
! #if	(!defined(C_OS2)) && (!defined(C_WINDOWS))
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  #endif
  
*** /home/njh/src/clamav-devel/./clamscan/clamscan.c	2006-10-29 17:02:07.000000000 +0000
--- ./clamscan/clamscan.c	2006-10-29 17:01:52.000000000 +0000
***************
*** 24,32 ****
--- 24,39 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifdef	C_WINDOWS
+ #include <fcntl.h>
+ #else
  #include <sys/time.h>
+ #endif
  #include <time.h>
+ #include <ctype.h>
  
  #include "clamscan_opt.h"
  #include "others.h"
***************
*** 45,50 ****
--- 52,61 ----
  
  void help(void);
  
+ #if	defined(C_WINDOWS) && defined(_DEBUG)
+ #include <crtdbg.h>
+ #endif
+ 
  struct s_info claminfo;
  short recursion = 0, printinfected = 0, bell = 0;
  
***************
*** 53,61 ****
--- 64,81 ----
  	int ds, dms, ret;
  	double mb;
  	struct timeval t1, t2;
+ #ifndef	C_WINDOWS
  	struct timezone tz;
+ #endif
  	struct optstruct *opt;
  	const char *pt;
+ 	
+ #if	defined(C_WINDOWS) && defined(CL_THREAD_SAFE)
+ 	if(!pthread_win32_process_attach_np()) {
+ 		mprintf("!Can't start the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
  
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, NULL);
***************
*** 174,184 ****
--- 194,221 ----
  
      memset(&claminfo, 0, sizeof(struct s_info));
  
+ #ifdef	C_WINDOWS
+ 	_set_fmode(_O_BINARY);
+ #ifdef	_DEBUG
+ 	{
+ 		_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);
+ 		_CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);
+ 	}
+ #endif	
+ 
+ 	gettimeofday(&t1, NULL);
+ #else
      gettimeofday(&t1, &tz);
+ #endif
+ 
      ret = scanmanager(opt);
  
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
+ #ifdef	C_WINDOWS
+ 	gettimeofday(&t2, NULL);
+ #else
  	gettimeofday(&t2, &tz);
+ #endif
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
***************
*** 204,209 ****
--- 241,254 ----
      }
  
      opt_free(opt);
+     
+ #if	defined(C_WINDOWS) && defined(CL_THREAD_SAFE)
+ 	if(!pthread_win32_process_detach_np()) {
+ 		mprintf("!Can't stop the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
      return ret;
  }
  
*** /home/njh/src/clamav-devel/./clamscan/treewalk.c	2006-10-29 14:49:55.000000000 +0000
--- ./clamscan/treewalk.c	2006-10-29 14:49:40.000000000 +0000
***************
*** 24,35 ****
--- 24,43 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/stat.h>
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/wait.h>
+ #endif
+ #ifdef	HAVE_INITGROUPS
  #include <grp.h>
+ #endif
+ #ifndef	C_WINDOWS
  #include <dirent.h>
+ #endif
  #include <errno.h>
  
  #include "shared.h"
***************
*** 97,103 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 105,111 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_INTERIX)) && (!defined(C_WINDOWS)) && (!defined(C_CYGWIN))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 136,141 ****
--- 144,156 ----
  
  }
  
+ #ifdef	C_WINDOWS
+ int
+ clamav_rmdirs(const char *dir)
+ {
+ 	return rmdirs(dir);
+ }
+ #else
  int clamav_rmdirs(const char *dir)
  {
  #ifndef C_CYGWIN
***************
*** 184,189 ****
--- 199,205 ----
      }
  
  }
+ #endif
  
  int fixperms(const char *dirname)
  {
***************
*** 195,201 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 211,217 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_INTERIX)) && (!defined(C_WINDOWS)) && (!defined(C_CYGWIN))
  	    if(dent->d_ino)
  #endif
  	    {
***************
*** 241,247 ****
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #ifndef C_INTERIX
  	    if(dent->d_ino)
  #endif
  	    {
--- 257,263 ----
  
      if((dd = opendir(dirname)) != NULL) {
  	while((dent = readdir(dd))) {
! #if	(!defined(C_INTERIX)) && (!defined(C_WINDOWS)) && (!defined(C_CYGWIN))
  	    if(dent->d_ino)
  #endif
  	    {
*** /home/njh/src/clamav-devel/./clamscan/treewalk.h	2006-06-08 21:00:50.000000000 +0100
--- ./clamscan/treewalk.h	2006-07-26 15:36:44.000000000 +0100
***************
*** 20,26 ****
--- 20,29 ----
  #ifndef __TREEWALK_H
  #define __TREEWALK_H
  
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
+ 
  #include <clamav.h>
  
  #include "options.h"
*** /home/njh/src/clamav-devel/./clamscan/others.c	2006-04-09 20:59:26.000000000 +0100
--- ./clamscan/others.c	2006-07-26 16:03:16.000000000 +0100
***************
*** 29,41 ****
--- 29,47 ----
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <errno.h>
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <sys/wait.h>
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <signal.h>
***************
*** 73,78 ****
--- 79,92 ----
      }
  }
  
+ #ifdef	C_WINDOWS
+ /* FIXME: Handle users correctly */
+ int
+ checkaccess(const char *path, const char *username, int mode)
+ {
+ 	return _access(path, mode);
+ }
+ #else
  int checkaccess(const char *path, const char *username, int mode)
  {
  	struct passwd *user;
***************
*** 117,122 ****
--- 131,137 ----
  
      return ret;
  }
+ #endif
  
  int match_regex(const char *filename, const char *pattern)
  {
*** /home/njh/src/clamav-devel/./clamscan/manager.h	2006-05-15 19:30:18.000000000 +0100
--- ./clamscan/manager.h	2006-10-10 11:12:40.000000000 +0100
***************
*** 21,27 ****
--- 21,29 ----
  #define __MANAGER_H
  
  #include <clamav.h>
+ #ifndef	C_WINDOWS
  #include <pwd.h>
+ #endif
  #include "options.h"
  
  int scanmanager(const struct optstruct *opt);
***************
*** 42,45 ****
--- 44,52 ----
  
  void move_infected(const char *filename, const struct optstruct *opt);
  
+ #ifdef	_DEBUG
+ /* breaks mspack/qtmd.c :-( */
+ #define	free(p)	_free_dbg(p, _NORMAL_BLOCK)
+ #endif
+ 
  #endif
*** /home/njh/src/clamav-devel/./shared/cdiff.c	2006-10-29 16:49:30.000000000 +0000
--- ./shared/cdiff.c	2006-10-29 16:50:40.000000000 +0000
***************
*** 27,33 ****
--- 27,35 ----
  #include <ctype.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "shared/memory.h"
  #include "shared/misc.h"
***************
*** 363,369 ****
  
      if(del || xchg) {
  
! 	if(!(fh = fopen(ctx->open_db, "r"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for reading\n", ctx->open_db);
  	    return -1;
  	}
--- 365,371 ----
  
      if(del || xchg) {
  
! 	if(!(fh = fopen(ctx->open_db, "rb"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for reading\n", ctx->open_db);
  	    return -1;
  	}
***************
*** 374,380 ****
  	    return -1;
  	}
  
! 	if(!(tmpfh = fopen(tmp, "w"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for writing\n", tmp);
  	    fclose(fh);
  	    free(tmp);
--- 376,382 ----
  	    return -1;
  	}
  
! 	if(!(tmpfh = fopen(tmp, "wb"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for writing\n", tmp);
  	    fclose(fh);
  	    free(tmp);
***************
*** 459,465 ****
  
      if(add) {
  
! 	if(!(fh = fopen(ctx->open_db, "a"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for appending\n", ctx->open_db);
  	    return -1;
  	}
--- 461,467 ----
  
      if(add) {
  
! 	if(!(fh = fopen(ctx->open_db, "ab"))) {
  	    logg("!cdiff_cmd_close: Can't open file %s for appending\n", ctx->open_db);
  	    return -1;
  	}
***************
*** 530,536 ****
  	return -1;
      }
  
!     if(!(src = fopen(srcdb, "r"))) {
  	logg("!cdiff_cmd_move: Can't open %s for reading\n", srcdb);
  	free(start_str);
  	free(end_str);
--- 532,538 ----
  	return -1;
      }
  
!     if(!(src = fopen(srcdb, "rb"))) {
  	logg("!cdiff_cmd_move: Can't open %s for reading\n", srcdb);
  	free(start_str);
  	free(end_str);
***************
*** 547,553 ****
  	return -1;
      }
  
!     if(!(dst = fopen(dstdb, "a"))) {
  	logg("!cdiff_cmd_move: Can't open %s for appending\n", dstdb);
  	free(start_str);
  	free(end_str);
--- 549,555 ----
  	return -1;
      }
  
!     if(!(dst = fopen(dstdb, "ab"))) {
  	logg("!cdiff_cmd_move: Can't open %s for appending\n", dstdb);
  	free(start_str);
  	free(end_str);
***************
*** 568,574 ****
  	return -1;
      }
  
!     if(!(tmp = fopen(tmpdb, "w"))) {
  	logg("!cdiff_cmd_move: Can't open file %s for writing\n", tmpdb);
  	free(start_str);
  	free(end_str);
--- 570,576 ----
  	return -1;
      }
  
!     if(!(tmp = fopen(tmpdb, "wb"))) {
  	logg("!cdiff_cmd_move: Can't open file %s for writing\n", tmpdb);
  	free(start_str);
  	free(end_str);
***************
*** 910,916 ****
  
      } else { /* .script */
  
! 	if(!(fh = fdopen(desc, "r"))) {
  	    logg("!cdiff_apply: fdopen() failed for descriptor %d\n", desc);
  	    close(desc);
  	    return -1;
--- 912,918 ----
  
      } else { /* .script */
  
! 	if(!(fh = fdopen(desc, "rb"))) {
  	    logg("!cdiff_apply: fdopen() failed for descriptor %d\n", desc);
  	    close(desc);
  	    return -1;
*** /home/njh/src/clamav-devel/./shared/misc.c	2006-10-29 20:48:42.000000000 +0000
--- ./shared/misc.c	2006-10-29 20:48:10.000000000 +0000
***************
*** 37,52 ****
  #include <ctype.h>
  #include <errno.h>
  
! #include "shared/cfgparser.h"
! #include "shared/memory.h"
! #include "shared/output.h"
  
! #include "libclamav/clamav.h"
! #include "libclamav/cvd.h"
! 
! #ifndef	O_BINARY
! #define	O_BINARY	0
! #endif
  
  char *freshdbdir(void)
  {
--- 37,48 ----
  #include <ctype.h>
  #include <errno.h>
  
! #include "clamav.h"
! #include "cfgparser.h"
! #include "memory.h"
! #include "output.h"
  
! #include "../libclamav/cvd.h"
  
  char *freshdbdir(void)
  {
*** /home/njh/src/clamav-devel/./shared/getopt.c	2004-03-29 01:00:58.000000000 +0100
--- ./shared/getopt.c	2006-07-26 16:49:38.000000000 +0100
***************
*** 41,47 ****
--- 41,49 ----
  
  #include <stdio.h>
  
+ #ifndef	C_WINDOWS
  int strncmp(const char *s1, const char *s2, size_t n);
+ #endif
  
  /* Comment out all this code if we are using the GNU C Library, and are not
     actually compiling the library itself.  This code is part of the GNU C
*** /home/njh/src/clamav-devel/./shared/network.h	2006-04-09 20:59:28.000000000 +0100
--- ./shared/network.h	2006-07-31 15:59:30.000000000 +0100
***************
*** 21,28 ****
--- 21,33 ----
  #ifndef __NETWORK_H
  #define __NETWORK_H
  
+ #ifdef	HAVE_SYS_TYPES_H
  #include <sys/types.h>
+ #endif
+ 
+ #ifndef	C_WINDOWS
  #include <netdb.h>
+ #endif
  
  int r_gethostbyname(const char *hostname, struct hostent *hp, char *buf, size_t len);
  
*** /home/njh/src/clamav-devel/./shared/output.c	2006-08-31 09:03:18.000000000 +0100
--- ./shared/output.c	2006-08-31 10:23:58.000000000 +0100
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
+ 
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 30,42 ****
--- 35,51 ----
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <fcntl.h>
  #include <time.h>
  #include <sys/stat.h>
  #include <errno.h>
+ #ifndef	C_WINDOWS
  #include <sys/time.h>
  #include <sys/socket.h>
+ #endif
  #if HAVE_SYS_TYPES_H
  #include <sys/types.h>
  #endif
***************
*** 122,128 ****
--- 131,139 ----
  int logg(const char *str, ...)
  {
  	va_list args, argscpy, argsout;
+ #ifdef	F_WRLCK
  	struct flock fl;
+ #endif
  	char *pt, *timestr, vbuff[1025];
  	time_t currtime;
  	struct stat sb;
***************
*** 140,146 ****
      if(logg_file) {
  	if(!logg_fd) {
  	    old_umask = umask(0037);
! 	    if((logg_fd = fopen(logg_file, "a")) == NULL) {
  		umask(old_umask);
  #ifdef CL_THREAD_SAFE
  		pthread_mutex_unlock(&logg_mutex);
--- 151,157 ----
      if(logg_file) {
  	if(!logg_fd) {
  	    old_umask = umask(0037);
! 	    if((logg_fd = fopen(logg_file, "at")) == NULL) {
  		umask(old_umask);
  #ifdef CL_THREAD_SAFE
  		pthread_mutex_unlock(&logg_mutex);
***************
*** 149,154 ****
--- 160,166 ----
  		return -1;
  	    } else umask(old_umask);
  
+ #ifdef	F_WRLCK
  	    if(logg_lock) {
  		memset(&fl, 0, sizeof(fl));
  		fl.l_type = F_WRLCK;
***************
*** 159,164 ****
--- 171,177 ----
  		    return -1;
  		}
  	    }
+ #endif
  	}
  
  	if(logg_size) {
*** /home/njh/src/clamav-devel/./shared/memory.h	2006-04-09 20:59:28.000000000 +0100
--- ./shared/memory.h	2006-10-10 11:16:24.000000000 +0100
***************
*** 25,28 ****
--- 25,33 ----
  void *mmalloc(size_t size);
  void *mcalloc(size_t nmemb, size_t size);
  
+ #ifdef	_DEBUG
+ #include <crtdbg.h>
+ #define	free(p)	_free_dbg(p, _NORMAL_BLOCK)
+ #endif
+ 
  #endif
*** /home/njh/src/clamav-devel/./shared/memory.c	2006-04-09 20:59:28.000000000 +0100
--- ./shared/memory.c	2006-10-10 22:08:26.000000000 +0100
***************
*** 19,31 ****
--- 19,41 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ 
+ #if	defined(_MSC_VER) && defined(_DEBUG)
+ #include <crtdbg.h>
+ #endif
  
  void *mmalloc(size_t size)
  {
  	void *alloc;
  
+ #if defined(_MSC_VER) && defined(_DEBUG)
+     alloc = _malloc_dbg(size, _NORMAL_BLOCK, __FILE__, __LINE__);
+ #else
      alloc = malloc(size);
+ #endif
  
      if(!alloc) {
  	fprintf(stderr, "CRITICAL: Can't allocate memory (%ld bytes).\n", (long int) size);
***************
*** 38,44 ****
--- 48,58 ----
  {
  	void *alloc;
  
+ #if defined(_MSC_VER) && defined(_DEBUG)
+     alloc = _calloc_dbg(nmemb, size, _NORMAL_BLOCK, __FILE__, __LINE__);
+ #else
      alloc = calloc(nmemb, size);
+ #endif
  
      if(!alloc) {
  	fprintf(stderr, "CRITICAL: Can't allocate memory (%ld bytes).\n", (long int) nmemb * size);
*** /home/njh/src/clamav-devel/./freshclam/manager.c	2006-11-03 21:07:35.000000000 +0000
--- ./freshclam/manager.c	2006-11-03 20:05:46.000000000 +0000
***************
*** 20,25 ****
--- 20,29 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 27,40 ****
--- 31,50 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <ctype.h>
+ #ifndef	C_WINDOWS
  #include <netinet/in.h>
  #include <netdb.h>
+ #endif
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
***************
*** 63,68 ****
--- 73,82 ----
  #define	O_BINARY	0
  #endif
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  
  static int wwwconnect(const char *server, const char *proxy, int pport, char *ip, const char *localip, int ctimeout)
  {
***************
*** 143,149 ****
--- 157,165 ----
  		else
  			port = 8080;
  
+ #ifndef	C_WINDOWS
  		endservent();
+ #endif
  #else
  		port = 8080;
  #endif
***************
*** 178,184 ****
  		break;
  	}
          logg("^Can't get information about %s: %s\n", hostpt, herr);
! 	close(socketfd);
  	return -1;
      }
  
--- 194,200 ----
  		break;
  	}
          logg("^Can't get information about %s: %s\n", hostpt, herr);
! 	closesocket(socketfd);
  	return -1;
      }
  
***************
*** 208,214 ****
  	}
      }
  
!     close(socketfd);
      return -2;
  }
  
--- 224,230 ----
  	}
      }
  
!     closesocket(socketfd);
      return -2;
  }
  
***************
*** 362,370 ****
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(write(sd, cmd, strlen(cmd)) < 0) {
  	logg("!remote_cvdhead: write failed\n");
! 	close(sd);
  	return NULL;
      }
  
--- 378,386 ----
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(send(sd, cmd, strlen(cmd), 0) < 0) {
  	logg("!remote_cvdhead: write failed\n");
! 	closesocket(sd);
  	return NULL;
      }
  
***************
*** 380,386 ****
  	if(cnt <= 0)
  	    break;
      }
!     close(sd);
  
      if(bread == -1) {
  	logg("!remote_cvdhead: Error while reading CVD header from %s\n", hostname);
--- 396,402 ----
  	if(cnt <= 0)
  	    break;
      }
!     closesocket(sd);
  
      if(bread == -1) {
  	logg("!remote_cvdhead: Error while reading CVD header from %s\n", hostname);
***************
*** 498,504 ****
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(write(sd, cmd, strlen(cmd)) < 0) {
  	logg("!getfile: Can't write to socket\n");
  	return 52;
      }
--- 514,520 ----
      if(!ip[0])
  	strcpy(ip, ipaddr);
  
!     if(send(sd, cmd, strlen(cmd), 0) < 0) {
  	logg("!getfile: Can't write to socket\n");
  	return 52;
      }
***************
*** 536,542 ****
      /* check whether the resource actually existed or not */
      if((strstr(buffer, "HTTP/1.1 404")) != NULL || (strstr(buffer, "HTTP/1.0 404")) != NULL) { 
  	logg("!getfile: %s not found on remote server\n", srcfile);
! 	close(sd);
  	return 58;
      }
  
--- 552,558 ----
      /* check whether the resource actually existed or not */
      if((strstr(buffer, "HTTP/1.1 404")) != NULL || (strstr(buffer, "HTTP/1.0 404")) != NULL) { 
  	logg("!getfile: %s not found on remote server\n", srcfile);
! 	closesocket(sd);
  	return 58;
      }
  
***************
*** 565,571 ****
  	getcwd(currdir, sizeof(currdir));
  	logg("!getfile: Can't create new file %s in %s\n", destfile, currdir);
  	logg("Hint: The database directory must be writable for UID %d or GID %d\n", getuid(), getgid());
! 	close(sd);
  	return 57;
      }
  
--- 581,587 ----
  	getcwd(currdir, sizeof(currdir));
  	logg("!getfile: Can't create new file %s in %s\n", destfile, currdir);
  	logg("Hint: The database directory must be writable for UID %d or GID %d\n", getuid(), getgid());
! 	closesocket(sd);
  	return 57;
      }
  
***************
*** 578,584 ****
  	    logg("getfile: Can't write %d bytes to %s\n", bread, destfile);
  	    unlink(destfile);
  	    close(fd);
! 	    close(sd);
  	    return 57; /* FIXME */
  	}
  
--- 594,600 ----
  	    logg("getfile: Can't write %d bytes to %s\n", bread, destfile);
  	    unlink(destfile);
  	    close(fd);
! 	    closesocket(sd);
  	    return 57; /* FIXME */
  	}
  
***************
*** 595,601 ****
              fflush(stdout);
          }
      }
!     close(sd);
      close(fd);
  
      if(totalsize > 0)
--- 611,617 ----
              fflush(stdout);
          }
      }
!     closesocket(sd);
      close(fd);
  
      if(totalsize > 0)
***************
*** 722,728 ****
          return ret;
      }
  
!     if((fd = open(tempname, O_RDONLY)) == -1) {
  	logg("!getpatch: Can't open %s for reading\n", tempname);
          unlink(tempname);
          free(tempname);
--- 738,744 ----
          return ret;
      }
  
!     if((fd = open(tempname, O_RDONLY|O_BINARY)) == -1) {
  	logg("!getpatch: Can't open %s for reading\n", tempname);
          unlink(tempname);
          free(tempname);
***************
*** 927,936 ****
  	ret = 0;
  
  	for(i = currver + 1; i <= newver; i++) {
- 	    /*
- 	     * !!! FIXME !!!: Redesign this code to make more than one attempt
- 	     *		      to download a single cdiff.
- 	     */
  	    ret = getpatch(dbname, i, hostname, ip, localip, proxy, port, user, pass, uas, ctimeout, rtimeout);
  	    if(ret) {
  		logg("^Removing incremental directory %s\n", dbinc);
--- 943,948 ----
***************
*** 977,985 ****
  	char ipaddr[16], *dnsreply = NULL, *pt, *localip = NULL, *newver = NULL;
  	const char *arg = NULL;
  	struct cfgstruct *cpt;
- #ifdef HAVE_RESOLV_H
  	const char *dnsdbinfo;
- #endif
  
      time(&currtime);
      logg("ClamAV update process started at %s", ctime(&currtime));
--- 989,995 ----
***************
*** 989,995 ****
      logg("See the FAQ at http://www.clamav.net/faq.html for an explanation.\n");
  #endif
  
- #ifdef HAVE_RESOLV_H
      dnsdbinfo = cfgopt(copt, "DNSDatabaseInfo")->strarg;
  
      if(opt_check(opt, "no-dns")) {
--- 999,1004 ----
***************
*** 1052,1058 ****
  	    logg("^Invalid DNS reply. Falling back to HTTP mode.\n");
  	}
      }
- #endif /* HAVE_RESOLV_H */
  
      if(opt_check(opt, "local-address")) {
          localip = opt_arg(opt, "local-address");
--- 1061,1066 ----
*** /home/njh/src/clamav-devel/./freshclam/execute.c	2006-08-31 08:38:17.000000000 +0100
--- ./freshclam/execute.c	2006-10-07 00:03:52.000000000 +0100
***************
*** 1,5 ****
  /*
!  *  By Per Jessen <per@computer.org>
   *
   *  This program is free software; you can redistribute it and/or modify
   *  it under the terms of the GNU General Public License as published by
--- 1,5 ----
  /*
!  *  By Per Jessen <per@computer.org> with changes by the ClamAV team
   *
   *  This program is free software; you can redistribute it and/or modify
   *  it under the terms of the GNU General Public License as published by
***************
*** 23,31 ****
--- 23,36 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <errno.h>
+ #ifdef	C_WINDOWS
+ #include <process.h>
+ #endif
  
  #include "shared/output.h"
  
***************
*** 35,40 ****
--- 40,55 ----
  
  void execute( const char *type, const char *text )
  {
+ #ifdef        C_WINDOWS
+ 	if(active_children < MAX_CHILDREN) {
+ 		if(spawnlp(P_DETACH, text, text, NULL) == -1) {
+ 			logg("^%s: couldn't execute \"%s\".\n", type, text);
+ 			return;
+ 		}
+ 		active_children++;	/* FIXME: this is never reduced */
+ 	} else
+ 		logg("^%s: already %d processes active.\n", type, active_children);
+ #else
  	pid_t pid;
  
  	if ( active_children<MAX_CHILDREN )
***************
*** 55,58 ****
--- 70,74 ----
  	{
  		logg("^%s: already %d processes active.\n", type, active_children);
  	}
+ #endif
  }
*** /home/njh/src/clamav-devel/./freshclam/nonblock.c	2006-09-15 13:11:55.000000000 +0100
--- ./freshclam/nonblock.c	2006-09-15 14:11:28.000000000 +0100
***************
*** 15,20 ****
--- 15,23 ----
   *  along with this program; if not, write to the Free Software
   *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   */
+ #ifdef	_MSC_VER
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,37 ****
  
  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <string.h>
  #include <ctype.h>
  #include <netinet/in.h>
  #include <netdb.h>
  #include <sys/types.h>
! #include <sys/socket.h>
  #include <sys/time.h>
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
--- 27,46 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <ctype.h>
+ #ifndef	C_WINDOWS
  #include <netinet/in.h>
  #include <netdb.h>
+ #endif
  #include <sys/types.h>
! /*#include <sys/socket.h>	/* in nonblock.h */
! #ifndef	C_WINDOWS
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <fcntl.h>
  #include <sys/stat.h>
***************
*** 40,45 ****
--- 49,64 ----
  
  #include "shared/output.h"
  
+ #if	(!defined(EALREADY)) && (defined(WSAEALREADY))
+ #define EALREADY	WSAEALREADY
+ #endif
+ #if	(!defined(EINPROGRESS)) && (defined(WSAEINPROGRESS))
+ #define EINPROGRESS	WSAEINPROGRESS
+ #endif
+ #if	(!defined(EISCONN)) && (defined(WSAEISCONN))
+ #define EISCONN	WSAEISCONN
+ #endif
+ 
  #ifdef SO_ERROR
  
  #ifndef timercmp
***************
*** 229,234 ****
--- 248,254 ----
  
  static long nonblock_fcntl(int sock)
  {
+ #ifdef	F_GETFL
  	long fcntl_flags; /* Save fcntl() flags */
  
  	fcntl_flags = fcntl(sock, F_GETFL, 0);
***************
*** 242,257 ****
--- 262,282 ----
  	}
  
  	return fcntl_flags;
+ #else
+ 	return 0;
+ #endif
  }
  
  static void restore_fcntl(int sock, long fcntl_flags)
  {
+ #ifdef	F_SETFL
  	if (fcntl_flags != -1) {
  		if (fcntl(sock, F_SETFL, fcntl_flags)) {
  			logg("restore_fcntl: restoring: fcntl(%d, F_SETFL): errno=%d: %s\n",
  			     sock, errno, strerror(errno));
  		}
  	}
+ #endif
  }
  
  /*
*** /home/njh/src/clamav-devel/./freshclam/nonblock.h	2006-09-04 09:24:02.000000000 +0100
--- ./freshclam/nonblock.h	2006-09-04 10:35:10.000000000 +0100
***************
*** 24,30 ****
--- 24,32 ----
  #endif
  
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
+ #endif
  
  /*
  	wait_connect(): wrapper for connect(), with explicit 'secs' timeout
*** /home/njh/src/clamav-devel/./freshclam/notify.c	2006-08-31 08:53:35.000000000 +0100
--- ./freshclam/notify.c	2006-08-31 10:26:34.000000000 +0100
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef        _MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
+ 
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,45 ****
--- 29,60 ----
  #ifdef BUILD_CLAMD
  
  #include <stdio.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/un.h>
  #include <netinet/in.h>
  #include <arpa/inet.h>
  #include <netdb.h>
+ #endif
  #include <string.h>
  
  #include "shared/cfgparser.h"
  #include "shared/output.h"
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  int notify(const char *cfgfile)
  {
  	char buff[20];
+ #ifndef	C_WINDOWS
  	struct sockaddr_un server;
+ #endif
          struct sockaddr_in server2;
  	struct hostent *he;
  	struct cfgstruct *copt, *cpt;
***************
*** 52,57 ****
--- 67,73 ----
  	return 1;
      }
  
+ #ifndef	C_WINDOWS
      if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
  	socktype = "UNIX";
  	server.sun_family = AF_UNIX;
***************
*** 64,76 ****
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server, sizeof(struct sockaddr_un)) < 0) {
! 	    close(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd through %s\n", cpt->strarg);
  	    perror("connect()");
  	    return 1;
  	}
  
!     } else if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
  
  	socktype = "TCP";
  #ifdef PF_INET
--- 80,94 ----
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server, sizeof(struct sockaddr_un)) < 0) {
! 	    closesocket(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd through %s\n", cpt->strarg);
  	    perror("connect()");
  	    return 1;
  	}
  
!     } else
! #endif
!     if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
  
  	socktype = "TCP";
  #ifdef PF_INET
***************
*** 98,104 ****
  
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    close(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd on %s:%d\n",
  		    inet_ntoa(server2.sin_addr), ntohs(server2.sin_port));
  	    perror("connect()");
--- 116,122 ----
  
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    closesocket(sockd);
  	    logg("^Clamd was NOT notified: Can't connect to clamd on %s:%d\n",
  		    inet_ntoa(server2.sin_addr), ntohs(server2.sin_port));
  	    perror("connect()");
***************
*** 110,132 ****
  	return 1;
      }
  
!     if(write(sockd, "RELOAD", 6) < 0) {
  	logg("^Clamd was NOT notified: Could not write to %s socket\n", socktype);
  	perror("write()");
! 	close(sockd);
  	return 1;
      }
  
      /* TODO: Handle timeout */
      memset(buff, 0, sizeof(buff));
!     if((bread = read(sockd, buff, sizeof(buff))) > 0)
  	if(!strstr(buff, "RELOADING")) {
  	    logg("^Clamd was NOT notified: Unknown answer from clamd: '%s'\n", buff);
! 	    close(sockd);
  	    return 1;
  	}
  
!     close(sockd);
      logg("Clamd successfully notified about the update.\n");
      return 0;
  }
--- 128,150 ----
  	return 1;
      }
  
!     if(send(sockd, "RELOAD", 6, 0) < 0) {
  	logg("^Clamd was NOT notified: Could not write to %s socket\n", socktype);
  	perror("write()");
! 	closesocket(sockd);
  	return 1;
      }
  
      /* TODO: Handle timeout */
      memset(buff, 0, sizeof(buff));
!     if((bread = recv(sockd, buff, sizeof(buff), 0)) > 0)
  	if(!strstr(buff, "RELOADING")) {
  	    logg("^Clamd was NOT notified: Unknown answer from clamd: '%s'\n", buff);
! 	    closesocket(sockd);
  	    return 1;
  	}
  
!     closesocket(sockd);
      logg("Clamd successfully notified about the update.\n");
      return 0;
  }
*** /home/njh/src/clamav-devel/./clamd/localserver.c	2006-09-13 18:50:46.000000000 +0100
--- ./clamd/localserver.c	2006-09-13 21:15:20.000000000 +0100
***************
*** 24,32 ****
--- 24,36 ----
  #include <stdio.h>
  #include <string.h>
  #include <sys/types.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
+ #endif
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <sys/un.h>
+ #endif
  #include <errno.h>
  
  #include "libclamav/clamav.h"
*** /home/njh/src/clamav-devel/./clamdscan/clamdscan.c	2006-10-29 17:09:34.000000000 +0000
--- ./clamdscan/clamdscan.c	2006-10-29 14:50:54.000000000 +0000
***************
*** 16,21 ****
--- 16,26 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+  
+ #ifdef	_MSC_VER
+ #include <windows.h>
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
***************
*** 24,31 ****
--- 29,44 ----
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
+ #ifdef	C_WINDOWS
+ #ifdef	CL_THREAD_SAFE
+ #include <pthread.h>
+ #endif
+ #else
  #include <sys/time.h>
+ #endif
  #include <time.h>
  #include <signal.h>
  
***************
*** 49,62 ****
  {
  	int ds, dms, ret, infected;
  	struct timeval t1, t2;
  	struct timezone tz;
  	time_t starttime;
  	struct optstruct *opt;
  	char *clamdscan_accepted[] = { "help", "version", "verbose", "quiet",
  				  "stdout", "log", "move", "copy", "remove",
  				  "config-file", "no-summary",
  				  "disable-summary", NULL };
! 
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, clamdscan_accepted);
      if(!opt) {
--- 62,83 ----
  {
  	int ds, dms, ret, infected;
  	struct timeval t1, t2;
+ #ifndef	C_WINDOWS
  	struct timezone tz;
+ #endif
  	time_t starttime;
  	struct optstruct *opt;
  	char *clamdscan_accepted[] = { "help", "version", "verbose", "quiet",
  				  "stdout", "log", "move", "copy", "remove",
  				  "config-file", "no-summary",
  				  "disable-summary", NULL };
! 				  
! #ifdef	C_WINDOWS
! 	if(!pthread_win32_process_attach_np()) {
! 		mprintf("!Can't start the win32 pthreads layer\n");
! 		return 1;
! 	}
! #endif
  
      opt = opt_parse(argc, argv, clamscan_shortopt, clamscan_longopt, clamdscan_accepted);
      if(!opt) {
***************
*** 105,117 ****
      time(&starttime);
      /* ctime() does \n, but I need it once more */
  
!     gettimeofday(&t1, &tz);
  
      ret = client(opt, &infected);
  
      /* TODO: Implement STATUS in clamd */
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
  	gettimeofday(&t2, &tz);
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
--- 126,146 ----
      time(&starttime);
      /* ctime() does \n, but I need it once more */
  
! #ifdef	C_WINDOWS
! 	gettimeofday(&t1, NULL);
! #else
! 	gettimeofday(&t1, &tz);
! #endif
  
      ret = client(opt, &infected);
  
      /* TODO: Implement STATUS in clamd */
      if(!opt_check(opt, "disable-summary") && !opt_check(opt, "no-summary")) {
+ #ifdef	C_WINDOWS
+ 	gettimeofday(&t2, NULL);
+ #else
  	gettimeofday(&t2, &tz);
+ #endif
  	ds = t2.tv_sec - t1.tv_sec;
  	dms = t2.tv_usec - t1.tv_usec;
  	ds -= (dms < 0) ? (1):(0);
***************
*** 128,133 ****
--- 157,171 ----
      }
  
      opt_free(opt);
+ 
+ #ifdef	C_WINDOWS
+ 	WSACleanup();
+ 	if(!pthread_win32_process_detach_np()) {
+ 		mprintf("!Can't stop the win32 pthreads layer\n");
+ 		return 1;
+ 	}
+ #endif
+ 
      exit(ret);
  }
  
*** /home/njh/src/clamav-devel/./clamdscan/client.c	2006-10-29 17:08:37.000000000 +0000
--- ./clamdscan/client.c	2006-10-29 17:48:46.000000000 +0000
***************
*** 16,37 ****
--- 16,44 ----
   *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   *  MA 02110-1301, USA.
   */
+ #ifdef	_MSC_VER
+ #include <winsock.h>
+ #endif
  
  #if HAVE_CONFIG_H
  #include "clamav-config.h"
  #endif
  
  #include <stdio.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  #include <string.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifndef	C_WINDOWS
  #include <sys/socket.h>
  #include <sys/un.h>
  #include <netinet/in.h>
  #include <arpa/inet.h>
  #include <netdb.h>
  #include <utime.h>
+ #endif
  #include <errno.h>
  
  #ifdef HAVE_SYS_UIO_H
***************
*** 54,65 ****
--- 61,140 ----
  # define SOCKET_INET	AF_INET
  #endif
  
+ #ifndef	C_WINDOWS
+ #define	closesocket(s)	close(s)
+ #endif
+ 
  /* #define ENABLE_FD_PASSING	    FIXME: Doesn't work yet */
  
  void move_infected(const char *filename, const struct optstruct *opt);
  int notremoved = 0, notmoved = 0;
  static int ncore = 0;
  
+ #ifdef	C_WINDOWS
+ static  int     get_a_line(int sockd, char *buf, size_t len);
+ 
+ static int
+ dsresult(int sockd, const struct optstruct *opt)
+ {
+ 	char buff[BUFSIZ], *pt;
+ 	int infected = 0, waserror = 0;
+ 
+ 	while(get_a_line(sockd, buff, sizeof(buff))) {
+ 		if(strstr(buff, "FOUND\n")) {
+ 			infected++;
+ 			logg("%s", buff);
+ 			if(opt_check(opt, "move") || opt_check(opt, "copy")) {
+ 				/* filename: Virus FOUND */
+ 				if((pt = strrchr(buff, ':'))) {
+ 					*pt = 0;
+ 					move_infected(buff, opt);
+ 				} else
+ 					mprintf("@Broken data format. File not %s.\n", opt_check(opt, "move") ? "moved" : "copied");
+ 			} else if(opt_check(opt, "remove")) {
+ 				if(!(pt = strrchr(buff, ':')))
+ 					mprintf("@Broken data format. File not removed.\n");
+ 				else {
+ 					*pt = 0;
+ 					if(unlink(buff)) {
+ 						mprintf("%s: Can't remove.\n", buff);
+ 						logg("%s: Can't remove.\n", buff);
+ 						notremoved++;
+ 					} else {
+ 						mprintf("%s: Removed.\n", buff);
+ 						logg("%s: Removed.\n", buff);
+ 					}
+ 				}
+ 			}
+ 		}
+ 
+ 		if(strstr(buff, "ERROR\n")) {
+ 			logg("%s", buff);
+ 			waserror = 1;
+ 		}
+ 	}
+ 
+ 	return infected ? infected : (waserror ? -1 : 0);
+ }
+ 
+ static int
+ get_a_line(int sockd, char *buf, size_t len)
+ {
+ 	char *ptr;
+ 
+ 	for(ptr = buf; ptr < &buf[len]; ptr++) {
+ 		/* FIXME: very inefficient to call recv so many times */
+ 		if(recv(sockd, ptr, sizeof(char), 0) <= 0)
+ 			return 0;
+ 		if(*ptr == '\n') {
+ 			*++ptr = '\0';
+ 			return 1;
+ 		}
+ 	}
+ 	return 1;
+ }
+ 
+ #else
  static int dsresult(int sockd, const struct optstruct *opt)
  {
  	int infected = 0, waserror = 0;
***************
*** 67,76 ****
  	FILE *fd;
  
  
! #ifndef C_OS2
      if((fd = fdopen(dup(sockd), "r")) == NULL) {
! #else /* FIXME: accoriding to YD OS/2 does not support dup() for sockets */
!     if((fd = fdopen(sockd, "r")) == NULL) {
  #endif
  	logg("^Can't open descriptor for reading.\n");
  	return -1;
--- 142,151 ----
  	FILE *fd;
  
  
! #ifndef (C_OS2)
      if((fd = fdopen(dup(sockd), "r")) == NULL) {
! #else /* FIXME: according to YD OS/2 does not support dup() for sockets */
!     if((fd = fdopen(sockd, "rb")) == NULL) {
  #endif
  	logg("^Can't open descriptor for reading.\n");
  	return -1;
***************
*** 80,92 ****
  	if(strstr(buff, "FOUND\n")) {
  	    infected++;
  	    logg("%s", buff);
! 	    if(opt_check(opt, "move") || opt_check(opt, "copy")) {
  		/* filename: Virus FOUND */
  		if((pt = strrchr(buff, ':'))) {
  		    *pt = 0;
  		    move_infected(buff, opt);
  		} else {
! 		    mprintf("@Broken data format. File not %s.\n", opt_check(opt, "move") ? "moved" : "copied");
  		}
  
  	    } else if(opt_check(opt, "remove")) {
--- 155,167 ----
  	if(strstr(buff, "FOUND\n")) {
  	    infected++;
  	    logg("%s", buff);
! 	    if(opt_check(opt, "move")) {
  		/* filename: Virus FOUND */
  		if((pt = strrchr(buff, ':'))) {
  		    *pt = 0;
  		    move_infected(buff, opt);
  		} else {
! 		    mprintf("@Broken data format. File not moved.\n");
  		}
  
  	    } else if(opt_check(opt, "remove")) {
***************
*** 118,123 ****
--- 193,199 ----
  
      return infected ? infected : (waserror ? -1 : 0);
  }
+ #endif	/* C_WINDOWS */
  
  static int dsfile(int sockd, const char *scantype, const char *filename, const struct optstruct *opt)
  {
***************
*** 128,134 ****
      scancmd = mcalloc(strlen(filename) + 20, sizeof(char));
      sprintf(scancmd, "%s %s", scantype, filename);
  
!     if(write(sockd, scancmd, strlen(scancmd)) <= 0) {
  	logg("^Can't write to the socket.\n");
  	free(scancmd);
  	return -1;
--- 204,210 ----
      scancmd = mcalloc(strlen(filename) + 20, sizeof(char));
      sprintf(scancmd, "%s %s", scantype, filename);
  
!     if(send(sockd, scancmd, strlen(scancmd), 0) <= 0) {
  	logg("^Can't write to the socket.\n");
  	free(scancmd);
  	return -1;
***************
*** 202,208 ****
  	char buff[4096], *pt;
  
  
!     if(write(sockd, "STREAM", 6) <= 0) {
  	logg("^Can't write to the socket.\n");
  	return 2;
      }
--- 278,284 ----
  	char buff[4096], *pt;
  
  
!     if(send(sockd, "STREAM", 6, 0) <= 0) {
  	logg("^Can't write to the socket.\n");
  	return 2;
      }
***************
*** 312,318 ****
--- 388,396 ----
  
  static int dconnect(const struct optstruct *opt)
  {
+ #ifndef	C_WINDOWS
  	struct sockaddr_un server;
+ #endif
  	struct sockaddr_in server2;
  	struct hostent *he;
  	struct cfgstruct *copt, *cpt;
***************
*** 328,341 ****
  	return -1;
      }
  
      memset((char *) &server, 0, sizeof(server));
      memset((char *) &server2, 0, sizeof(server2));
  
      /* Set default address to connect to */
      server2.sin_addr.s_addr = inet_addr("127.0.0.1");    
  
-     if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
  
  	server.sun_family = AF_UNIX;
  	strncpy(server.sun_path, cpt->strarg, sizeof(server.sun_path));
  
--- 406,424 ----
  	return -1;
      }
  
+ #ifndef	C_WINDOWS
      memset((char *) &server, 0, sizeof(server));
+ #endif
      memset((char *) &server2, 0, sizeof(server2));
  
      /* Set default address to connect to */
      server2.sin_addr.s_addr = inet_addr("127.0.0.1");    
  
  
+     if((cpt = cfgopt(copt, "LocalSocket"))->enabled) {
+ #ifdef	C_WINDOWS
+ 	logg("^LocalSocket is not supported under Windows");
+ #else
  	server.sun_family = AF_UNIX;
  	strncpy(server.sun_path, cpt->strarg, sizeof(server.sun_path));
  
***************
*** 353,360 ****
--- 436,452 ----
  	    freecfg(copt);
  	    return -1;
  	}
+ #endif
  
      } else if((cpt = cfgopt(copt, "TCPSocket"))->enabled) {
+ #ifdef  C_WINDOWS
+                 WSADATA wsaData;
+ 
+                 if(WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR) {
+                         logg("!Error at WSAStartup(): %d\n", WSAGetLastError());
+                         return -1;
+                 }
+ #endif
  
  	if((sockd = socket(SOCKET_INET, SOCK_STREAM, 0)) < 0) {
  	    perror("socket()");
***************
*** 368,374 ****
  
  	if((cpt = cfgopt(copt, "TCPAddr"))->enabled) {
  	    if ((he = gethostbyname(cpt->strarg)) == 0) {
! 		close(sockd);
  		perror("gethostbyname()");
  		logg("^Can't lookup clamd hostname.\n");
  		freecfg(copt);
--- 460,466 ----
  
  	if((cpt = cfgopt(copt, "TCPAddr"))->enabled) {
  	    if ((he = gethostbyname(cpt->strarg)) == 0) {
! 		closesocket(sockd);
  		perror("gethostbyname()");
  		logg("^Can't lookup clamd hostname.\n");
  		freecfg(copt);
***************
*** 378,384 ****
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    close(sockd);
  	    perror("connect()");
  	    logg("^Can't connect to clamd.\n");
  	    freecfg(copt);
--- 470,476 ----
  	}
  
  	if(connect(sockd, (struct sockaddr *) &server2, sizeof(struct sockaddr_in)) < 0) {
! 	    closesocket(sockd);
  	    perror("connect()");
  	    logg("^Can't connect to clamd.\n");
  	    freecfg(copt);
***************
*** 433,439 ****
  	else
  	    errors++;
  
! 	close(sockd);
  
  #if defined(ENABLE_FD_PASSING) && defined(HAVE_SENDMSG) && (defined(HAVE_ACCRIGHTS_IN_MSGHDR) || defined(HAVE_CONTROL_IN_MSGHDR)) && !defined(C_CYGWIN)
      } else if(!strcmp(opt->filename, "-")) { /* scan data from stdin */
--- 525,531 ----
  	else
  	    errors++;
  
! 	closesocket(sockd);
  
  #if defined(ENABLE_FD_PASSING) && defined(HAVE_SENDMSG) && (defined(HAVE_ACCRIGHTS_IN_MSGHDR) || defined(HAVE_CONTROL_IN_MSGHDR)) && !defined(C_CYGWIN)
      } else if(!strcmp(opt->filename, "-")) { /* scan data from stdin */
***************
*** 494,500 ****
  			else
  			    errors++;
  
! 			close(sockd);
  			break;
  
  		    default:
--- 586,592 ----
  			else
  			    errors++;
  
! 			closesocket(sockd);
  			break;
  
  		    default:
***************
*** 516,526 ****
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
  	int moveflag = opt_check(opt, "move");
  	struct utimbuf ubuf;
  
  
      if((moveflag && !(movedir = opt_arg(opt, "move"))) ||
!         (!moveflag && !(movedir = opt_arg(opt, "copy")))) {
          /* Should never reach here */
          logg("^opt_arg() returned NULL\n");
          notmoved++;
--- 608,620 ----
  	struct stat fstat, mfstat;
  	int n, len, movefilename_size;
  	int moveflag = opt_check(opt, "move");
+ #ifndef	C_WINDOWS
  	struct utimbuf ubuf;
+ #endif
  
  
      if((moveflag && !(movedir = opt_arg(opt, "move"))) ||
!        (!moveflag && !(movedir = opt_arg(opt, "copy")))) {
          /* Should never reach here */
          logg("^opt_arg() returned NULL\n");
          notmoved++;
***************
*** 591,597 ****
         }
      }
  
!     if(!moveflag || rename(filename, movefilename) == -1) {
  	if(filecopy(filename, movefilename) == -1) {
  	    logg("^cannot %s '%s' to '%s': %s\n", (moveflag) ? "move" : "copy", filename, movefilename, strerror(errno));
  	    notmoved++;
--- 685,691 ----
         }
      }
  
!     if(rename(filename, movefilename) == -1) {
  	if(filecopy(filename, movefilename) == -1) {
  	    logg("^cannot %s '%s' to '%s': %s\n", (moveflag) ? "move" : "copy", filename, movefilename, strerror(errno));
  	    notmoved++;
***************
*** 602,610 ****
--- 696,706 ----
  	chmod(movefilename, fstat.st_mode);
  	chown(movefilename, fstat.st_uid, fstat.st_gid);
  
+ #ifndef	C_WINDOWS
  	ubuf.actime = fstat.st_atime;
  	ubuf.modtime = fstat.st_mtime;
  	utime(movefilename, &ubuf);
+ #endif
  
  	if(moveflag && unlink(filename)) {
  	    logg("^cannot unlink '%s': %s\n", filename, strerror(errno));
***************
*** 614,620 ****
  	}
      }
  
!     logg("%s: %s to '%s'\n", (moveflag)?"moved":"copied", filename, movefilename);
  
      free(movefilename);
  }
--- 710,716 ----
  	}
      }
  
!     logg("%s: %s to '%s'\n", (moveflag) ? "moved" : "copied", filename, movefilename);
  
      free(movefilename);
  }
*** /home/njh/src/clamav-devel/./clamconf/clamconf.c	2006-09-15 13:38:59.000000000 +0100
--- ./clamconf/clamconf.c	2006-09-15 14:38:42.000000000 +0100
***************
*** 26,32 ****
--- 26,34 ----
  #include <string.h>
  #include <sys/types.h>
  #include <sys/stat.h>
+ #ifdef	HAVE_UNISTD_H
  #include <unistd.h>
+ #endif
  
  #include "cfgparser.h"
  #define _GNU_SOURCE
